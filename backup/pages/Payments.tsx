import React, { useState, useEffect } from 'react';
import { 
  Card, 
  Table, 
  Button, 
  Tag, 
  Input, 
  Select, 
  Modal, 
  Form, 
  InputNumber,
  message,
  Space,
  Tooltip,
  Popconfirm,
  Switch,
  Tabs,
  Row,
  Col,
  TreeSelect,
  Spin,
  Radio
} from 'antd';
import { 
  PlusOutlined, 
  SearchOutlined, 
  EditOutlined, 
  DeleteOutlined,
  DollarOutlined,
  CalendarOutlined,
  BankOutlined,
  WalletOutlined,
  CheckCircleOutlined,
  CloseCircleOutlined,
  ShoppingCartOutlined,
  MinusCircleOutlined,
  ReloadOutlined,
  InfoCircleOutlined
} from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';
import dayjs from 'dayjs';
import { logPaymentAction } from '../utils/actionLogger';
import { paymentsApi, receiptsApi, incassateReceipts } from '../utils/baseApi';
import { calculateCashInRegister } from '../utils/cashCalculations';
import { debtsApi } from '../api/debts';
import { useAuth } from '../hooks/useAuth';
import { initializeProductEvents, closeProductEvents } from '../utils/productEvents';

const { Search } = Input;
const { Option } = Select;

interface PaymentItem {
  id: string;
  mongoId?: string; // MongoDB _id –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
  type: 'cash' | 'transfer' | 'keb'; // –Ω–∞–ª–∏—á–Ω—ã–µ, –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –ö–≠–ë
  amount: number; // –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
  description: string;
  date: string;
  supplier?: string;
  orderId?: string;
  inCashRegister: boolean; // –ø–æ–ª–æ–∂–∏–ª–∏ –≤ –∫–∞—Å—Å—É –∏–ª–∏ –Ω–µ—Ç
  cashRegisterDate?: string; // –¥–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞—Å—Å—ã
  notes?: string;
  createdAt: string;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API
  category?: string;
  paymentMethod?: string;
  apiType?: 'income' | 'expense'; // –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø –∏–∑ API backend
  status?: 'active' | 'incassated'; // —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
  incassationDate?: string; // –¥–∞—Ç–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏
  adminName?: string; // –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –∑–∞–ø–∏—Å—å
}

interface ExpenseItem {
  id: string;
  amount: number;
  description: string;
  date: string;
  category: string;
  adminName: string;
  notes?: string;
  createdAt: string;
}

interface PurchaseItem {
  id: string;
  productName: string;
  quantity: number;
  price: number;
  costPrice: number;
  supplier: string;
  date: string;
  adminName: string;
  addToArrival: boolean;
  notes?: string;
  createdAt: string;
  arrivalId?: string; // ID —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
const PaymentsTab: React.FC<{
  payments: PaymentItem[];
  setPayments: React.Dispatch<React.SetStateAction<PaymentItem[]>>;
  refreshPayments: () => Promise<void>;
}> = ({ payments, setPayments, refreshPayments }) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [editingPayment, setEditingPayment] = useState<PaymentItem | null>(null);
  const [form] = Form.useForm();
  const [searchText, setSearchText] = useState('');
  const [typeFilter, setTypeFilter] = useState<string>('all');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [incassationFilter, setIncassationFilter] = useState<string>('all');
  const [dateFilter, setDateFilter] = useState<string>('all');
  const [loadingPayments, setLoadingPayments] = useState(false);
  const [canEditPayments, setCanEditPayments] = useState(false);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏
  const { hasFullAccess } = useAuth();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const [sortField, setSortField] = useState<string>('date');
  const [sortOrder, setSortOrder] = useState<'ascend' | 'descend'>('descend');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const [pageSize, setPageSize] = useState(() => {
    const saved = localStorage.getItem('payments_page_size');
    return saved ? parseInt(saved, 10) : 10;
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏
  const [incassationModalVisible, setIncassationModalVisible] = useState(false);
  const [incassationForm] = Form.useForm();
  const [incassationType, setIncassationType] = useState<'all' | 'partial'>('all');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –º–µ—Å—è—Ü—É
  const [selectedMonth, setSelectedMonth] = useState(() => {
    const now = new Date();
    return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫ API
  const checkPermissions = async () => {
    try {
      console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞...');
      const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/payments`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('admin_token')}`
        }
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞
      const canEdit = response.headers.get('X-Can-Edit') === 'true';
      const userRole = response.headers.get('X-User-Role');
      console.log('üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:', { canEdit, userRole });
      setCanEditPayments(canEdit);
    } catch (error) {
      console.error('Error checking permissions:', error);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
  useEffect(() => {
    checkPermissions();
  }, [payments]); // –î–æ–±–∞–≤–ª—è–µ–º payments –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ localStorage
  useEffect(() => {
    localStorage.setItem('payments_page_size', pageSize.toString());
  }, [pageSize]);

  const getTypeColor = (type: PaymentItem['type'], description?: string) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ª–≥–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
    if (description && description.startsWith('–î–û–õ–ì:')) {
      return 'red';
    }
    
    switch (type) {
      case 'cash': return 'green';
      case 'transfer': return 'blue';
      case 'keb': return 'purple';
      default: return 'default';
    }
  };

  const getTypeText = (type: PaymentItem['type'], description?: string) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ª–≥–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
    if (description && description.startsWith('–î–û–õ–ì:')) {
      return '–î–æ–ª–≥';
    }
    
    switch (type) {
      case 'cash': return '–ù–∞–ª–∏—á–Ω—ã–µ';
      case 'transfer': return '–ü–µ—Ä–µ–≤–æ–¥';
      case 'keb': return '–ö–≠–ë';
      default: return type;
    }
  };

  const getTypeIcon = (type: PaymentItem['type'], description?: string) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ª–≥–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
    if (description && description.startsWith('–î–û–õ–ì:')) {
      return <MinusCircleOutlined />;
    }
    
    switch (type) {
      case 'cash': return <WalletOutlined />;
      case 'transfer': return <BankOutlined />;
      case 'keb': return <DollarOutlined />;
      default: return <DollarOutlined />;
    }
  };

  const handleModalOk = async () => {
    try {
      const values = await form.validateFields();
      
      if (editingPayment) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API
        try {
          const updateData = {
            ...values,
            date: values.date,
            cashRegisterDate: values.inCashRegister && values.cashRegisterDate ? values.cashRegisterDate : undefined
          };
          
          if (editingPayment.mongoId) {
            await paymentsApi.update(editingPayment.mongoId, updateData);
          } else {
            await paymentsApi.update(editingPayment.id, updateData);
          }
          
          // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
          logPaymentAction(
            '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞',
            `–û–±–Ω–æ–≤–ª–µ–Ω –ø–ª–∞—Ç–µ–∂: ${values.description} –Ω–∞ —Å—É–º–º—É ${values.amount.toLocaleString('ru-RU')} ‚ÇΩ`,
            editingPayment.id
          );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
      await refreshPayments();
          message.success('–ü–ª–∞—Ç–µ–∂ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
          message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
      return;
    }
      } else {
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API
        try {
                  // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–∞–∫ –¥–∞—Ç–∞ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏), –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
          const paymentDate = values.date ? 
            (values.date.includes('T') ? values.date : `${values.date}T${new Date().toTimeString().split(' ')[0]}`) :
            new Date().toISOString();

          const newPaymentData = {
          type: values.type === 'cash' ? '–Ω–∞–ª–∏—á–Ω—ã–µ' : values.type === 'transfer' ? '–ø–µ—Ä–µ–≤–æ–¥' : '–∫—ç–±',
          apiType: 'income', // –≠—Ç–æ –¥–æ—Ö–æ–¥
          category: values.description || '–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã',
          amount: values.amount,
          date: paymentDate,
          description: values.description,
          paymentMethod: values.type === 'cash' ? '–Ω–∞–ª–∏—á–Ω—ã–µ' : values.type === 'transfer' ? '–ø–µ—Ä–µ–≤–æ–¥' : '–∫—ç–±',
          notes: values.notes,
          inCashRegister: values.inCashRegister || false,
          cashRegisterDate: values.inCashRegister && values.cashRegisterDate ? values.cashRegisterDate : undefined
        };
          
          const createdPayment = await paymentsApi.create(newPaymentData);
          
          // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
          logPaymentAction(
            '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞',
            `–î–æ–±–∞–≤–ª–µ–Ω –ø–ª–∞—Ç–µ–∂: ${values.description} –Ω–∞ —Å—É–º–º—É ${values.amount.toLocaleString('ru-RU')} ‚ÇΩ`,
            `manual_${Date.now()}`
          );
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ª–æ–∫–∞–ª—å–Ω–æ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
          const newPayment: PaymentItem = {
            id: createdPayment.id,
            mongoId: createdPayment._id,
            type: createdPayment.type === '–Ω–∞–ª–∏—á–Ω—ã–µ' ? 'cash' : createdPayment.type === '–ø–µ—Ä–µ–≤–æ–¥' ? 'transfer' : 'keb',
            amount: createdPayment.amount,
            description: createdPayment.description,
            date: createdPayment.date,
            supplier: createdPayment.supplier || '',
            inCashRegister: createdPayment.inCashRegister || false,
            notes: createdPayment.notes || '',
            createdAt: createdPayment.createdAt || new Date().toISOString(),
            category: createdPayment.category || '',
            paymentMethod: createdPayment.paymentMethod || '',
            apiType: createdPayment.apiType || 'income',
            status: createdPayment.status || 'active'
          };
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
          setPayments(prevPayments => [newPayment, ...prevPayments]);
          message.success('–ü–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω');
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
          message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
          return;
        }
      }
      
      setIsModalVisible(false);
      form.resetFields();
    } catch (error) {
      console.error('Validation failed:', error);
    }
  };

  const handleIncassation = async () => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã—Ö –≤ –∫–∞—Å—Å–µ
    const totalAmount = calculateCashInRegister(payments);
    
    if (totalAmount <= 0) {
      message.info('–ù–µ—Ç –Ω–∞–ª–∏—á–Ω—ã—Ö –≤ –∫–∞—Å—Å–µ –¥–ª—è –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏');
      return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
    incassationForm.resetFields();
    incassationForm.setFieldsValue({
      type: 'all'
    });

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏
    Modal.confirm({
      title: '–°–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö –∏–∑ –∫–∞—Å—Å—ã',
      width: 600,
      content: (
        <div>
          <Form form={incassationForm} layout="vertical">
            <Form.Item
              label="–¢–∏–ø —Å–ø–∏—Å–∞–Ω–∏—è"
              name="incassationType"
              initialValue="all"
            >
              <Radio.Group defaultValue="all">
                <Space direction="vertical">
                  <Radio value="all">
                    <div>
                      <div style={{ fontWeight: 500 }}>–°–ø–∏—Å–∞—Ç—å –≤—Å–µ –Ω–∞–ª–∏—á–Ω—ã–µ</div>
                      <div style={{ fontSize: '12px', color: '#8c8c8c' }}>
                        –°—É–º–º–∞: {totalAmount.toLocaleString('ru-RU')} ‚ÇΩ
                      </div>
                    </div>
                  </Radio>
                  <Radio value="partial">
                    <div>
                      <div style={{ fontWeight: 500 }}>–£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É —Å–ø–∏—Å–∞–Ω–∏—è</div>
                      <div style={{ fontSize: '12px', color: '#8c8c8c' }}>
                        –ú–∞–∫—Å–∏–º—É–º: {totalAmount.toLocaleString('ru-RU')} ‚ÇΩ
                      </div>
                    </div>
                  </Radio>
                </Space>
              </Radio.Group>
            </Form.Item>
            <Form.Item
              noStyle
              shouldUpdate={(prevValues, currentValues) => 
                prevValues?.incassationType !== currentValues?.incassationType
              }
            >
              {({ getFieldValue }) => 
                getFieldValue('incassationType') === 'partial' && (
                  <Form.Item
                    label="–°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è"
                    name="amount"
                    rules={[
                      { required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É' },
                      { 
                        type: 'number',
                        min: 1,
                        max: totalAmount,
                        message: `–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ ${totalAmount.toLocaleString('ru-RU')} ‚ÇΩ`
                      }
                    ]}
                  >
                    <InputNumber
                      style={{ width: '100%' }}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                      min={1}
                      max={totalAmount}
                      formatter={(value) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                      parser={(value) => Number(value!.replace(/[^\d]/g, ''))}
                      addonAfter="‚ÇΩ"
                    />
                  </Form.Item>
                )
              }
            </Form.Item>
          </Form>
          <div style={{ marginTop: 16, padding: 8, background: '#fffbe6', border: '1px solid #ffe58f', borderRadius: 4 }}>
            <InfoCircleOutlined style={{ color: '#faad14', marginRight: 8 }} />
            –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞–ª–∏—á–Ω—ã—Ö –∏–∑ –∫–∞—Å—Å—ã
          </div>
        </div>
      ),
      onOk: async (close) => {
        try {
          // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É
          await incassationForm.validateFields();
          
          setLoadingPayments(true);
          
          // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º—ã
          const incassationType = incassationForm.getFieldValue('incassationType');
          const partialAmount = incassationForm.getFieldValue('amount');
          
          const incassationAmount = incassationType === 'all' ? totalAmount : partialAmount;

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —ç—Ç–æ–π –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏
          const timestamp = Date.now();
          const randomSuffix = Math.random().toString(36).substring(2, 8);

          try {
            // –°–æ–∑–¥–∞–µ–º —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            const now = new Date();
            const uniqueId = `incassation_${timestamp}_${randomSuffix}`;
            
            const finalPaymentData = {
              id: uniqueId, // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
              type: '–Ω–∞–ª–∏—á–Ω—ã–µ',
              amount: -Math.abs(incassationAmount),
              description: `–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö ${now.toLocaleDateString('ru-RU')} ${now.toLocaleTimeString('ru-RU')} [${uniqueId}]`,
              date: now.toISOString(),
              paymentMethod: '–Ω–∞–ª–∏—á–Ω—ã–µ',
              category: '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è',
              inCashRegister: false,
              notes: `–°–ø–∏—Å–∞–Ω–æ –∏–∑ –∫–∞—Å—Å—ã ${incassationAmount.toLocaleString('ru-RU')} ‚ÇΩ - ID: ${uniqueId}`,
              apiType: 'expense',
              status: 'active',
              supplier: `–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è_${timestamp}` // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ supplier
            };
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ API
            console.log('üí∞ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–ø–∏—Å–∞–Ω–∏–∏ (–Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç):', finalPaymentData);
            console.log('üí∞ –ü–æ–ª—è –æ–±—ä–µ–∫—Ç–∞:', Object.keys(finalPaymentData));
            console.log('üí∞ –ï—Å—Ç—å –ª–∏ –ø–æ–ª–µ id?', 'id' in finalPaymentData);
            console.log('üí∞ JSON –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(finalPaymentData, null, 2));
            
            const createdIncassation = await paymentsApi.create(finalPaymentData);
            console.log('üí∞ –ó–∞–ø–∏—Å—å –æ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∞:', createdIncassation);

            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            logPaymentAction(
              '–°–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö',
              `–°–ø–∏—Å–∞–Ω–æ –∏–∑ –∫–∞—Å—Å—ã ${incassationAmount.toLocaleString('ru-RU')} ‚ÇΩ`,
              createdIncassation._id || createdIncassation.id
            );

            message.success(`–°–ø–∏—Å–∞–Ω–æ –∏–∑ –∫–∞—Å—Å—ã ${incassationAmount.toLocaleString('ru-RU')} ‚ÇΩ`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API
            const typeMap: Record<string, 'cash' | 'transfer' | 'keb'> = {
              'cash': 'cash',
              'card': 'transfer', 
              'transfer': 'transfer',
              '–Ω–∞–ª–∏—á–Ω—ã–µ': 'cash',
              '–ø–µ—Ä–µ–≤–æ–¥': 'transfer',
              '–∫—ç–±': 'keb'
            };
            
            const newPayment: PaymentItem = {
              id: createdIncassation.id || createdIncassation._id || uniqueId,
              mongoId: createdIncassation._id,
              type: typeMap[createdIncassation.paymentMethod] || typeMap[createdIncassation.type] || 'cash',
              amount: createdIncassation.amount !== undefined ? createdIncassation.amount : -Math.abs(incassationAmount),
              description: createdIncassation.description || finalPaymentData.description,
              date: createdIncassation.date || finalPaymentData.date,
              inCashRegister: createdIncassation.inCashRegister !== undefined ? createdIncassation.inCashRegister : false,
              createdAt: createdIncassation.createdAt || new Date().toISOString(),
              category: createdIncassation.category || '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è',
              paymentMethod: typeMap[createdIncassation.paymentMethod] || typeMap[createdIncassation.type] || 'cash',
              apiType: createdIncassation.apiType || 'expense',
              status: createdIncassation.status || 'active',
              supplier: createdIncassation.supplier,
              notes: createdIncassation.notes
            };
            
            console.log('üí∞ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', newPayment);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            setPayments(prevPayments => {
              console.log('üí∞ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π:', prevPayments.length);
              console.log('üí∞ –î–æ–±–∞–≤–ª—è–µ–º–∞—è –∑–∞–ø–∏—Å—å:', newPayment);
              const newState = [newPayment, ...prevPayments];
              console.log('üí∞ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π:', newState.length);
              console.log('üí∞ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –Ω–æ–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏:', newState[0]);
              return newState;
            });
            
            close();
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Å–ø–∏—Å–∞–Ω–∏–∏:', error);
            message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Å–ø–∏—Å–∞–Ω–∏–∏');
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞:', error);
          message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞–ª–∏—á–Ω—ã—Ö');
        } finally {
          setLoadingPayments(false);
        }
      },
      okText: '–°–ø–∏—Å–∞—Ç—å',
      cancelText: '–û—Ç–º–µ–Ω–∞'
    });
  };

  const handleToggleCashRegister = async (payment: PaymentItem) => {
    console.log('üîÑ handleToggleCashRegister –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞:', {
      id: payment.id,
      type: payment.type,
      amount: payment.amount,
      inCashRegister: payment.inCashRegister,
      description: payment.description
    });

    if (payment.type === 'cash' && payment.inCashRegister) {
      console.log('‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: –Ω–∞–ª–∏—á–Ω—ã–µ —É–∂–µ –≤ –∫–∞—Å—Å–µ');
      message.info('–ù–∞–ª–∏—á–Ω—ã–µ –Ω–µ–ª—å–∑—è —É–±—Ä–∞—Ç—å –∏–∑ –∫–∞—Å—Å—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–Ω–∫–∞—Å—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ª–∏—á–Ω—ã–µ"');
      return;
    }

    const newStatus = !payment.inCashRegister;
    const actionText = newStatus ? '–ø–æ–º–µ—Å—Ç–∏—Ç—å –≤ –∫–∞—Å—Å—É' : '—É–±—Ä–∞—Ç—å –∏–∑ –∫–∞—Å—Å—ã';
    const confirmTitle = newStatus ? '–ü–æ–º–µ—Å—Ç–∏—Ç—å –≤ –∫–∞—Å—Å—É?' : '–£–±—Ä–∞—Ç—å –∏–∑ –∫–∞—Å—Å—ã?';
    
    console.log('üîÑ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç:', newStatus, '–î–µ–π—Å—Ç–≤–∏–µ:', actionText);
    
    let confirmContent = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${actionText} –ø–ª–∞—Ç–µ–∂ "${payment.description}" –Ω–∞ —Å—É–º–º—É ${payment.amount.toLocaleString('ru-RU')} ‚ÇΩ?`;
    
    if (newStatus && (payment.type === 'transfer' || payment.type === 'keb')) {
      const typeText = payment.type === 'keb' ? '–ö–≠–ë' : '–ø–µ—Ä–µ–≤–æ–¥';
      confirmContent += `\n\n–ü—Ä–∏ –ø–æ–º–µ—â–µ–Ω–∏–∏ –≤ –∫–∞—Å—Å—É ${typeText} –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ –Ω–∞–ª–∏—á–Ω—ã–µ.`;
    }

    Modal.confirm({
      title: confirmTitle,
      content: confirmContent,
      okText: newStatus ? '–ü–æ–º–µ—Å—Ç–∏—Ç—å' : '–£–±—Ä–∞—Ç—å',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      onOk: async () => {
        try {
          setLoadingPayments(true);
          let apiSuccess = false;

          // –ï—Å–ª–∏ —ç—Ç–æ –ø–ª–∞—Ç–µ–∂ –∏–∑ —á–µ–∫–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ–∫ —á–µ—Ä–µ–∑ API
          if (payment.id && payment.id.startsWith('receipt_')) {
            // –ü–∞—Ä—Å–∏–º ID: receipt_RECEIPT_ID_INDEX
            const match = payment.id.match(/^receipt_(.+)_(\d+)$/);
            if (match) {
              const [fullMatch, receiptId, paymentIndexStr] = match;
              const paymentIndex = parseInt(paymentIndexStr, 10);
              
              console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ ID –ø–ª–∞—Ç–µ–∂–∞:', {
                fullId: payment.id,
                fullMatch,
                receiptId,
                paymentIndexStr,
                paymentIndex,
                isValidIndex: !isNaN(paymentIndex)
              });
              
              try {
                console.log('üì° –ü–æ–ª—É—á–∞–µ–º —á–µ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', receiptId);
                // –ü–æ–ª—É—á–∞–µ–º —á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                const receipt = await receiptsApi.getById(receiptId);
                console.log('üì¶ –ü–æ–ª—É—á–µ–Ω —á–µ–∫:', receipt);
                console.log('üì¶ –ü–ª–∞—Ç–µ–∂–∏ –≤ —á–µ–∫–µ:', receipt?.payments);
                console.log('üì¶ –ù—É–∂–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–ª–∞—Ç–µ–∂–∞:', paymentIndex);
                
                if (receipt && Array.isArray(receipt.payments) && receipt.payments[paymentIndex]) {
                  console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω –≤ —á–µ–∫–µ:', receipt.payments[paymentIndex]);
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –≤ —á–µ–∫–µ
                  const updatedPayments = [...receipt.payments];
                  const oldPayment = updatedPayments[paymentIndex];
                  
                  updatedPayments[paymentIndex] = {
                    ...updatedPayments[paymentIndex],
                    inCashRegister: newStatus,
                    cashRegisterDate: newStatus ? new Date().toISOString() : undefined,
                    method: newStatus && (payment.type === 'transfer' || payment.type === 'keb') ? 'cash' : oldPayment.method
                  };

                  // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ–∫ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞
                  console.log('üì° –û–±–Ω–æ–≤–ª—è–µ–º —á–µ–∫ —á–µ—Ä–µ–∑ API:', receiptId, {
                    paymentIndex,
                    oldPayment: oldPayment,
                    newPayment: updatedPayments[paymentIndex],
                    fullUpdateData: { payments: updatedPayments }
                  });
                  
                  const updateResult = await receiptsApi.update(receiptId, {
                    payments: updatedPayments
                  });
                  
                  console.log('üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–∫–∞:', updateResult);
                  
                  // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–∫–∞ —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ payments
                  // —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∫–∞–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                  try {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Å–æ–≥–ª–∞—Å–Ω–æ enum –≤ –º–æ–¥–µ–ª–∏ Payment
                    let paymentType: string;
                    if (newStatus && (payment.type === 'transfer' || payment.type === 'keb')) {
                      paymentType = '–Ω–∞–ª–∏—á–Ω—ã–µ'; // –ü–æ—Å–ª–µ –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –∫–∞—Å—Å—É –ö–≠–ë/–ø–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∞–ª–∏—á–Ω—ã–º–∏
                    } else {
                      switch (updatedPayments[paymentIndex].method) {
                        case 'cash':
                          paymentType = '–Ω–∞–ª–∏—á–Ω—ã–µ';
                          break;
                        case 'card':
                        case 'transfer':
                        case 'sber_transfer':
                          paymentType = '–ø–µ—Ä–µ–≤–æ–¥';
                          break;
                        case 'keb':
                          paymentType = '–∫—ç–±';
                          break;
                        default:
                          paymentType = '–ø–µ—Ä–µ–≤–æ–¥';
                      }
                    }
                    
                    const paymentRecord = {
                      id: payment.id,
                      type: paymentType, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ enum
                      paymentMethod: newStatus && (payment.type === 'transfer' || payment.type === 'keb') ? 'cash' : updatedPayments[paymentIndex].method,
                      amount: updatedPayments[paymentIndex].amount,
                      description: payment.description, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ
                      date: receipt.date,
                      inCashRegister: newStatus,
                      cashRegisterDate: updatedPayments[paymentIndex].cashRegisterDate,
                      category: '–ü–ª–∞—Ç–µ–∂ –∏–∑ —á–µ–∫–∞',
                      notes: `–ü–ª–∞—Ç–µ–∂ –∏–∑ —á–µ–∫–∞ ${receipt.receiptNumber}, –º–µ—Ç–æ–¥: ${updatedPayments[paymentIndex].method}`,
                      apiType: 'income' // –ü–ª–∞—Ç–µ–∂–∏ –∏–∑ —á–µ–∫–æ–≤ –≤—Å–µ–≥–¥–∞ –¥–æ—Ö–æ–¥—ã
                    };
                    
                    console.log('üíæ –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ payments:', paymentRecord);
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    const existingPaymentInDb = await paymentsApi.getAll()
                      .then(payments => payments.find((p: any) => p.id === payment.id));
                    
                    if (existingPaymentInDb) {
                      console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞:', existingPaymentInDb._id);
                      await paymentsApi.update(existingPaymentInDb._id, paymentRecord);
                    } else {
                      console.log('üíæ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞');
                      await paymentsApi.create(paymentRecord);
                    }
                    
                    console.log('‚úÖ –ó–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ payments —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                  } catch (paymentError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞:', paymentError);
                    // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - —á–µ–∫ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å
                  }
                  
                  apiSuccess = true;
                  console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –≤ —á–µ–∫–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API');
                } else {
                  console.error('‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ–∫–µ:', {
                    receiptExists: !!receipt,
                    paymentsIsArray: Array.isArray(receipt?.payments),
                    paymentsLength: receipt?.payments?.length,
                    paymentIndex,
                    requestedPayment: receipt?.payments?.[paymentIndex]
                  });
                  message.error('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ–∫–µ');
                  return;
                }
              } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ —á–µ–∫–µ:', error);
                message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ —á–µ–∫–µ');
                return;
              }
            }
          } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π - –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API
            const updateData = {
              inCashRegister: newStatus,
              cashRegisterDate: newStatus ? new Date().toISOString() : undefined,
              paymentMethod: newStatus && (payment.type === 'transfer' || payment.type === 'keb') ? 'cash' : payment.paymentMethod,
              description: payment.description
            };

            try {
              if (payment.mongoId) {
                await paymentsApi.update(payment.mongoId, updateData);
              } else {
                await paymentsApi.update(payment.id, updateData);
              }
              
              apiSuccess = true;
              console.log('‚úÖ –û–±—ã—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API');
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API:', error);
              message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
              return;
            }
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ API-–≤—ã–∑–æ–≤ —É—Å–ø–µ—à–µ–Ω
          if (apiSuccess) {
            console.log('üîÑ API —É—Å–ø–µ—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è:', payment.id);
            
            setPayments(prevPayments => {
              console.log('üîÑ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π:', prevPayments.length);
              const updatedPayments = prevPayments.map(p => {
                if (p.id === payment.id) {
                  const updatedPayment = {
                    ...p,
                    inCashRegister: newStatus,
                    cashRegisterDate: newStatus ? new Date().toISOString() : undefined,
                    type: newStatus && (p.type === 'transfer' || p.type === 'keb') ? 'cash' : p.type,
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    description: p.description
                  };
                  console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂:', p.id, '—Å–æ —Å—Ç–∞—Ä–æ–≥–æ:', p, '–Ω–∞ –Ω–æ–≤—ã–π:', updatedPayment);
                  return updatedPayment;
                }
                return p;
              });
              console.log('üîÑ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π:', updatedPayments.length);
              return updatedPayments;
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (newStatus && (payment.type === 'transfer' || payment.type === 'keb')) {
              const typeText = payment.type === 'keb' ? '–ö–≠–ë' : '–ü–µ—Ä–µ–≤–æ–¥';
              message.success(`${typeText} –ø–æ–º–µ—â–µ–Ω –≤ –∫–∞—Å—Å—É –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ –Ω–∞–ª–∏—á–Ω—ã–µ`);
            } else {
              message.success(newStatus ? '–ü–ª–∞—Ç–µ–∂ –ø–æ–º–µ—â–µ–Ω –≤ –∫–∞—Å—Å—É' : '–ü–ª–∞—Ç–µ–∂ —É–±—Ä–∞–Ω –∏–∑ –∫–∞—Å—Å—ã');
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            logPaymentAction(
              newStatus ? '–ü–æ–º–µ—â–µ–Ω–∏–µ –≤ –∫–∞—Å—Å—É' : '–ò–∑—ä—è—Ç–∏–µ –∏–∑ –∫–∞—Å—Å—ã',
              `${payment.description} - ${payment.amount.toLocaleString('ru-RU')} ‚ÇΩ${newStatus && (payment.type === 'transfer' || payment.type === 'keb') ? ' (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ –Ω–∞–ª–∏—á–Ω—ã–µ)' : ''}`,
              payment.id
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            window.dispatchEvent(new CustomEvent('paymentUpdated', { 
              detail: { 
                type: 'cashRegisterToggle',
                paymentId: payment.id,
                newStatus: newStatus,
                description: payment.description
              } 
            }));
            
            console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
          } else {
            console.error('‚ùå API –Ω–µ—É—Å–ø–µ—à–µ–Ω, –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ù–ï –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è');
          }

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
          message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞');
        } finally {
          setLoadingPayments(false);
        }
      }
    });
  };

  const handleEditPayment = (payment: PaymentItem) => {
    if (!payment.id) {
      message.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –±–µ–∑ ID');
          return;
        }
    
    if (payment.id.startsWith('debt_')) {
      message.info('–î–æ–ª–≥–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å. –û—Ç–º–µ—Ç—å—Ç–µ –æ–ø–ª–∞—Ç—É –¥–æ–ª–≥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–ö–ª–∏–µ–Ω—Ç—ã".');
      return;
    }
    
    if (payment.id.startsWith('receipt_')) {
      message.info('–ü–ª–∞—Ç–µ–∂–∏ –∏–∑ —á–µ–∫–æ–≤ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ß–µ–∫–∏". –ó–¥–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Å–æ–π.');
      return;
    }
    
    setEditingPayment(payment);
    form.setFieldsValue({
      ...payment,
      date: payment.date.split('T')[0],
      cashRegisterDate: payment.cashRegisterDate ? payment.cashRegisterDate.split('T')[0] : undefined
    });
    setIsModalVisible(true);
  };

  const handleClearAllPayments = async () => {
    if (payments.length === 0) {
      message.info('–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }

    Modal.confirm({
      title: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏?',
      content: (
        <div>
          <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <strong>–í–°–ï {payments.length} –ø–ª–∞—Ç–µ–∂–µ–π</strong>?</p>
          <p style={{ color: '#ff4d4f', fontWeight: 'bold' }}>
            ‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
          </p>
          <p style={{ fontSize: '12px', color: '#8c8c8c' }}>
            –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –≤–∫–ª—é—á–∞—è —Ä–∞—Å—Ö–æ–¥—ã, –¥–æ—Ö–æ–¥—ã –∏ –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ —á–µ–∫–æ–≤.
            –ß–µ–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è, –Ω–æ –∏—Ö —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã —Å–±—Ä–æ—Å–∏—Ç—Å—è.
          </p>
        </div>
      ),
      okText: '–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      okType: 'danger',
      width: 500,
      onOk: async () => {
        try {
          setLoadingPayments(true);
          console.log('üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π...');
          
          const result = await paymentsApi.clearAll();
          console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', result);
          
          // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          setPayments([]);
          
          message.success(`–£–¥–∞–ª–µ–Ω–æ ${result.deletedCount || payments.length} –ø–ª–∞—Ç–µ–∂–µ–π`, 5);
          
          // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
          logPaymentAction(
            '–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ',
            `–£–¥–∞–ª–µ–Ω–æ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${result.deletedCount || payments.length}`,
            'clear_all'
          );
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏:', error);
          message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π');
        } finally {
          setLoadingPayments(false);
        }
      }
    });
  };

  const handleDeletePayment = async (paymentId: string) => {
    if (!paymentId) {
      message.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –±–µ–∑ ID');
      return;
    }
    
    if (paymentId.startsWith('debt_')) {
      message.error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–æ–ª–≥. –û—Ç–º–µ—Ç—å—Ç–µ –æ–ø–ª–∞—Ç—É –¥–æ–ª–≥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–ö–ª–∏–µ–Ω—Ç—ã" –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —á–µ–∫.');
      return;
    }

    const payment = payments.find(p => p.id === paymentId);
    
    if (payment && (
      payment.category === '–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É' || 
      payment.description?.includes('–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É') ||
      (payment.apiType === 'expense' && payment.supplier && payment.supplier !== '–ü—Ä–æ–¥–∞–∂–∞')
    )) {
      message.error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ–ø–ª–∞—Ç—É –¥–æ–ª–≥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É. –£–¥–∞–ª–∏—Ç–µ —Å–∞–º –¥–æ–ª–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–î–æ–ª–≥–∏", –∏ –æ–ø–ª–∞—Ç–∞ —É–¥–∞–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
      return;
    }
    
    if (paymentId.startsWith('receipt_')) {
      const match = paymentId.match(/^receipt_(.+)_(\d+)$/);
      if (match) {
        const receiptId = match[1];
        try {
          const receiptsData = await receiptsApi.getAll();
          const receiptExists = receiptsData.some((r: any) => r._id === receiptId || r.id === receiptId);
          
          if (receiptExists) {
            message.error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –∏–∑ —á–µ–∫–∞. –û—Ç–º–µ–Ω–∏—Ç–µ —á–µ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ß–µ–∫–∏".');
            return;
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —á–µ–∫–∞:', error);
          message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ–∫–∞');
          return;
        }
      }
    }
    
    try {
      if (payment?.mongoId) {
        await paymentsApi.delete(payment.mongoId);
      } else {
        await paymentsApi.delete(paymentId);
      }

      // –ï—Å–ª–∏ —ç—Ç–æ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if (payment?.category === '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è') {
        setPayments(prevPayments => prevPayments.filter(p => p.id !== paymentId));
        message.success('–ó–∞–ø–∏—Å—å –æ–± –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∞');
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        await refreshPayments();
        message.success('–ü–ª–∞—Ç–µ–∂ —É–¥–∞–ª–µ–Ω');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
    }
  };

  const columns: ColumnsType<PaymentItem> = [
    {
      title: '–¢–∏–ø',
      dataIndex: 'type',
      key: 'type',
      width: 120,
      render: (type, record) => {
        const typeText = getTypeText(type, record.description);
        const icon = getTypeIcon(type, record.description);
        const isIncassated = record.status === 'incassated';
        
        return (
          <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            gap: '8px',
            opacity: isIncassated ? 0.5 : 1 
          }}>
            {icon}
            <Tag color={getTypeColor(type, record.description)}>
              {typeText}
            </Tag>
            {isIncassated && (
              <Tag color="purple">–ò–Ω–∫–∞—Å—Å–∏—Ä–æ–≤–∞–Ω</Tag>
            )}
          </div>
        );
      },
    },
    {
      title: (
        <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
          <DollarOutlined />
          –°—É–º–º–∞
        </div>
      ),
      dataIndex: 'amount',
      key: 'amount',
      width: 150,
      sorter: (a, b) => {
        // –£—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞–∫ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        const amountA = a.apiType === 'expense' || a.category === '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è' ? -Math.abs(a.amount) : Math.abs(a.amount);
        const amountB = b.apiType === 'expense' || b.category === '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è' ? -Math.abs(b.amount) : Math.abs(b.amount);
        return amountA - amountB;
      },
      sortDirections: ['ascend', 'descend'],
      render: (amount, record) => {
        const isIncassated = record.status === 'incassated';
        
        // –î–û–õ–ì –ö–õ–ò–ï–ù–¢–ê: supplier = '–î–æ–ª–≥' AND amount = 0 AND description —Å–æ–¥–µ—Ä–∂–∏—Ç '–î–û–õ–ì:'
        const isClientDebt = record.supplier === '–î–æ–ª–≥' && 
                            amount === 0 && 
                            record.description?.startsWith('–î–û–õ–ì:');
        
        if (isClientDebt) {
          return (
            <div style={{ 
              fontWeight: '600', 
              color: '#ff4d4f', 
              fontSize: '16px' 
            }}>
              –î–û–õ–ì
            </div>
          );
        }
        
        // –î–û–õ–ì –ü–û–°–¢–ê–í–©–ò–ö–£: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞)
        const isSupplierDebt = record.description?.includes('–î–æ–ª–≥ –ø–æ –ø—Ä–∏—Ö–æ–¥—É –æ—Ç') ||
                              record.category === '–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É' ||
                              record.description?.includes('–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É');
        
        const isExpense = record.apiType === 'expense' || 
                         isSupplierDebt ||
                         record.category === '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è';
        
        const displayAmount = isExpense ? -Math.abs(amount) : Math.abs(amount);
        const isNegative = displayAmount < 0;

        return (
          <div style={{ 
            fontWeight: '600', 
            color: isNegative ? '#ff4d4f' : '#52c41a', 
            fontSize: '16px',
            opacity: isIncassated ? 0.5 : 1
          }}>
            {isNegative ? '-' : ''}{Math.abs(displayAmount).toLocaleString('ru-RU')} ‚ÇΩ
          </div>
        );
      },
    },
    {
      title: '–û–ø–∏—Å–∞–Ω–∏–µ',
      dataIndex: 'description',
      key: 'description',
      render: (description, record) => {
        const isIncassated = record.status === 'incassated';
        return (
          <div style={{ opacity: isIncassated ? 0.5 : 1 }}>
            <div style={{ fontWeight: '500' }}>{description}</div>
            {record.supplier && (
              <div style={{ fontSize: '12px', color: '#8c8c8c' }}>
                –ü–æ—Å—Ç–∞–≤—â–∏–∫: {record.supplier}
              </div>
            )}
            {isIncassated && record.incassationDate && (
              <div style={{ fontSize: '12px', color: '#722ed1' }}>
                –ò–Ω–∫–∞—Å—Å–∏—Ä–æ–≤–∞–Ω: {new Date(record.incassationDate).toLocaleDateString('ru-RU')}
              </div>
            )}
          </div>
        );
      },
    },
    {
      title: (
        <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
          <CalendarOutlined />
          –î–∞—Ç–∞
        </div>
      ),
      dataIndex: 'date',
      key: 'date',
      width: 120,
      sorter: (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime(),
      sortDirections: ['ascend', 'descend'],
      defaultSortOrder: 'descend',
      render: (date, record) => {
        const dateObj = new Date(date);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –¥–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
        const isDateOnly = date && typeof date === 'string' && !date.includes('T') && !date.includes(' ');
        
        return (
          <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
            <CalendarOutlined style={{ color: '#8c8c8c' }} />
            <div>
              <div>{dateObj.toLocaleDateString('ru-RU')}</div>
              {!isDateOnly && (
                <div style={{ fontSize: '12px', color: '#8c8c8c' }}>
                  {dateObj.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
                </div>
              )}
              {isDateOnly && (
                <div style={{ fontSize: '12px', color: '#8c8c8c' }}>
                  –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                </div>
              )}
            </div>
          </div>
        );
      },
    },
    {
      title: (
        <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
          <WalletOutlined />
          –í –∫–∞—Å—Å–µ
        </div>
      ),
      dataIndex: 'inCashRegister',
      key: 'inCashRegister',
      width: 140,
      sorter: (a, b) => {
        // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è (–≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É), –ø–æ—Ç–æ–º –≤ –∫–∞—Å—Å–µ, –ø–æ—Ç–æ–º –Ω–µ –≤ –∫–∞—Å—Å–µ
        if (a.category === '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è' && b.category !== '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è') return 1;
        if (b.category === '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è' && a.category !== '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è') return -1;
        if (a.category === '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è' && b.category === '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è') return 0;
        
        return (a.inCashRegister ? 1 : 0) - (b.inCashRegister ? 1 : 0);
      },
      sortDirections: ['ascend', 'descend'],
      render: (inCashRegister, record) => {
        // –î–ª—è –∑–∞–ø–∏—Å–µ–π –æ–± –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—á–µ—Ä–∫
        if (record.category === '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è') {
          return <span>-</span>;
        }

        return (
          <div>
            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
              {inCashRegister ? (
                <>
                  <CheckCircleOutlined style={{ color: '#52c41a' }} />
                  <Tag color="green">–í –∫–∞—Å—Å–µ</Tag>
                </>
              ) : (
                <>
                  <CloseCircleOutlined style={{ color: '#ff4d4f' }} />
                  <Tag color="red">–ù–µ –≤ –∫–∞—Å—Å–µ</Tag>
                </>
              )}
            </div>
          </div>
        );
      }
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      width: 120,
      render: (_, record) => {
        const isDebt = record.id && record.id.startsWith('debt_');
        const isReceipt = record.id && record.id.startsWith('receipt_');
        const isIncassation = record.category === '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è';
        
        return (
          <Space size="small">
            {/* –î–ª—è –¥–æ–ª–≥–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
            {isDebt && (
              <Tooltip title="–î–æ–ª–≥ - –æ–ø–ª–∞—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ö–ª–∏–µ–Ω—Ç—ã">
                <Tag color="red" icon={<CloseCircleOutlined />}>–î–æ–ª–≥</Tag>
              </Tooltip>
            )}
            
            {/* –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–æ–∫ –∫–∞—Å—Å—ã */}
            {(() => {
              // –î–æ–ª–≥–∏ - —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
              if (isDebt) return null;
              
              // –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è - –ø—Ä–æ—á–µ—Ä–∫
              if (isIncassation) return <span>-</span>;
              
              // –ù–∞–ª–∏—á–Ω—ã–µ –≤ –∫–∞—Å—Å–µ - –ø—Ä–æ—á–µ—Ä–∫ (–Ω–µ–ª—å–∑—è —É–±—Ä–∞—Ç—å)
              if (record.type === 'cash' && record.inCashRegister) {
                return <span>-</span>;
              }
              
              // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö (–Ω–∞–ª–∏—á–Ω—ã–µ –Ω–µ –≤ –∫–∞—Å—Å–µ, –ø–µ—Ä–µ–≤–æ–¥—ã, –ö–≠–ë) - –∫–Ω–æ–ø–∫–∞
              return (
                <Tooltip title={record.inCashRegister ? "–£–±—Ä–∞—Ç—å –∏–∑ –∫–∞—Å—Å—ã" : "–ü–æ–ª–æ–∂–∏—Ç—å –≤ –∫–∞—Å—Å—É"}>
                  <Button
                    type={record.inCashRegister ? "default" : "primary"}
                    size="small"
                    icon={record.inCashRegister ? <CloseCircleOutlined /> : <CheckCircleOutlined />}
                    onClick={() => {
                      console.log('üéØ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∫–∞—Å—Å—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞:', record.id, record.type, record.inCashRegister);
                      handleToggleCashRegister(record);
                    }}
                    style={{ padding: '0 4px' }}
                  />
                </Tooltip>
              );
            })()}

            {/* –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤ */}
            {canEditPayments && !isDebt && !isReceipt && (
              <>
                <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                  <Button
                    type="text"
                    icon={<EditOutlined />}
                    size="small"
                    onClick={() => handleEditPayment(record)}
                    style={{ padding: '0 4px' }}
                  />
                </Tooltip>
                <Popconfirm
                  title="–£–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç–µ–∂?"
                  description="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å"
                  onConfirm={() => handleDeletePayment(record.id)}
                  okText="–î–∞"
                  cancelText="–ù–µ—Ç"
                >
                  <Tooltip title="–£–¥–∞–ª–∏—Ç—å">
                    <Button
                      type="text"
                      icon={<DeleteOutlined />}
                      size="small"
                      danger
                      style={{ padding: '0 4px' }}
                    />
                  </Tooltip>
                </Popconfirm>
              </>
            )}

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ —á–µ–∫–æ–≤ */}
            {isReceipt && (
              <Tooltip title="–ü–ª–∞—Ç–µ–∂ –∏–∑ —á–µ–∫–∞ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –ß–µ–∫–∏">
                <Tag color="blue" style={{ fontSize: '11px' }}>–ß–µ–∫</Tag>
              </Tooltip>
            )}
          </Space>
        );
      },
    },
  ];

  const filteredPayments = payments
    .filter(payment => {
      const matchesSearch = payment.description.toLowerCase().includes(searchText.toLowerCase()) ||
                           payment.supplier?.toLowerCase().includes(searchText.toLowerCase()) ||
                           payment.orderId?.includes(searchText) ||
                           false;
      const matchesType = typeFilter === 'all' || payment.type === typeFilter;
      const matchesStatus = statusFilter === 'all' || 
                           (statusFilter === 'in_cash' && (payment.inCashRegister || payment.category === '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è')) ||
                           (statusFilter === 'not_in_cash' && !payment.inCashRegister && payment.category !== '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è');
      
      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏
      let matchesIncassation = true;
      if (incassationFilter === 'active') {
        matchesIncassation = payment.status !== 'incassated' && payment.category !== '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è';
      } else if (incassationFilter === 'incassated') {
        matchesIncassation = payment.status === 'incassated' || payment.category === '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è';
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
      let matchesDate = true;
      if (dateFilter !== 'all') {
        const paymentDate = new Date(payment.date);
        const today = new Date();
        
        switch (dateFilter) {
          case 'today':
            matchesDate = paymentDate.toDateString() === today.toDateString();
            break;
          case 'yesterday':
            const yesterday = new Date(today);
            yesterday.setDate(yesterday.getDate() - 1);
            matchesDate = paymentDate.toDateString() === yesterday.toDateString();
            break;
          case 'week':
            const weekAgo = new Date(today);
            weekAgo.setDate(weekAgo.getDate() - 7);
            matchesDate = paymentDate >= weekAgo;
            break;
          case 'month':
            const monthAgo = new Date(today);
            monthAgo.setMonth(monthAgo.getMonth() - 1);
            matchesDate = paymentDate >= monthAgo;
            break;
        }
      }
      
      return matchesSearch && matchesType && matchesStatus && matchesIncassation && matchesDate;
    });

  // –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Å—è—Ü—É
  const getMonthPayments = () => {
    const [year, month] = selectedMonth.split('-').map(Number);
    
    return payments.filter(payment => {
      const paymentDate = new Date(payment.date);
      return paymentDate.getFullYear() === year && paymentDate.getMonth() === month - 1;
    });
  };

  // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
  const currentMonthPayments = getMonthPayments();
  // "–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –º–µ—Å—è—Ü" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è (–¥–æ—Ö–æ–¥—ã) –∑–∞ –º–µ—Å—è—Ü, –∏—Å–∫–ª—é—á–∞—è —Ä–∞—Å—Ö–æ–¥—ã, –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –ø—Ä–∏—Ö–æ–¥–æ–≤
  const totalAmount = currentMonthPayments
    .filter(p => 
      p.amount > 0 && 
      p.category !== '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è' && 
      p.apiType !== 'expense' &&
      !p.description?.includes('–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞')
    )
    .reduce((sum, p) => sum + p.amount, 0);
  // "–ù–∞–ª–∏—á–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö (–∏—Å–∫–ª—é—á–∞–µ–º –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—é, —Ä–∞—Å—Ö–æ–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –ø—Ä–∏—Ö–æ–¥–æ–≤)
  const cashAmount = currentMonthPayments
    .filter(p => 
      p.type === 'cash' && 
      p.amount > 0 && 
      p.category !== '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è' &&
      !p.description?.includes('–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞')
    )
    .reduce((sum, p) => sum + p.amount, 0);
  const transferAmount = currentMonthPayments
    .filter(p => 
      p.type === 'transfer' && 
      !p.description?.includes('–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞')
    )
    .reduce((sum, p) => sum + p.amount, 0);
  const kebAmount = currentMonthPayments
    .filter(p => 
      p.type === 'keb' && 
      !p.description?.includes('–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞')
    )
    .reduce((sum, p) => sum + p.amount, 0);
  // "–ò–Ω–∫–∞—Å—Å–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ –º–µ—Å—è—Ü" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–π –∑–∞ –º–µ—Å—è—Ü (–±–µ—Ä–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
  const incassatedAmount = currentMonthPayments
    .filter(p => p.category === '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è')
    .reduce((sum, p) => sum + Math.abs(p.amount), 0);
  // "–ù–µ –≤ –∫–∞—Å—Å–µ –∑–∞ –º–µ—Å—è—Ü" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ö–≠–ë –∏ –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü (–∏—Å–∫–ª—é—á–∞–µ–º –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –ø—Ä–∏—Ö–æ–¥–æ–≤)
  const notInCashRegisterAmount = currentMonthPayments
    .filter(p => 
      (p.type === 'transfer' || p.type === 'keb') && 
      p.category !== '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è' &&
      !p.description?.includes('–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞')
    )
    .reduce((sum, p) => sum + p.amount, 0);
  
  // –†–∞—Å—á–µ—Ç –Ω–∞–ª–∏—á–Ω—ã—Ö –≤ –∫–∞—Å—Å–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É—Ç–∏–ª–∏—Ç—ã
  const cashInRegisterAmount = calculateCashInRegister(payments);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞—Å—Å—ã
  useEffect(() => {
    const expensesInPayments = payments.filter(p => p.apiType === 'expense');
    const refundPayments = payments.filter(p => p.description?.includes('–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞'));
    console.log('üí∞ –†–∞—Å—á–µ—Ç –∫–∞—Å—Å—ã:', {
      totalPayments: payments.length,
      expensesCount: expensesInPayments.length,
      refundsCount: refundPayments.length,
      cashInRegister: cashInRegisterAmount,
      expensesTotal: expensesInPayments.reduce((sum, p) => sum + p.amount, 0),
      refundsTotal: refundPayments.reduce((sum, p) => sum + p.amount, 0)
    });
  }, [payments, cashInRegisterAmount]);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
  useEffect(() => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    (window as any).cashInRegisterAmount = cashInRegisterAmount;
  }, [cashInRegisterAmount]);

  return (
    <div>
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
      <Card style={{ marginBottom: '16px', borderRadius: '12px', background: 'linear-gradient(135deg, #e6f7ff 0%, #f0f9ff 100%)', border: '1px solid #91d5ff' }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
          <DollarOutlined style={{ fontSize: '20px', color: '#1890ff' }} />
          <div style={{ flex: 1 }}>
            <div style={{ fontSize: '16px', fontWeight: '500', color: '#1890ff' }}>
              –†–∞—Å—á–µ—Ç—ã –∏ –ø–ª–∞—Ç–µ–∂–∏
            </div>
            <div style={{ fontSize: '14px', color: '#595959', marginTop: '4px' }}>
              –ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é. 
              –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å, –∫–∞–∫–∏–µ —Å—É–º–º—ã –ø–æ—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–∞—Å—Å—É.
            </div>
          </div>
        </div>
      </Card>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–∞ */}
      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '16px' }}>
        <div>
          <h3 style={{ margin: 0, color: '#595959', fontSize: '16px', fontWeight: '500' }}>
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {new Date(selectedMonth + '-01').toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}
          </h3>
          <div style={{ fontSize: '12px', color: '#8c8c8c', marginTop: '4px' }}>
            –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –º–µ—Å—è—Ü: {currentMonthPayments.length}
          </div>
        </div>
        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
          <span style={{ fontSize: '14px', color: '#595959' }}>–ú–µ—Å—è—Ü:</span>
          <Input
            type="month"
            value={selectedMonth}
            onChange={(e) => setSelectedMonth(e.target.value)}
            style={{ width: '150px' }}
          />
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Spin spinning={loadingPayments}>
      <div style={{ display: 'flex', gap: '12px', marginBottom: '16px' }}>
        <Card style={{ flex: 1, borderRadius: '8px', background: 'linear-gradient(135deg, #e6f7ff 0%, #bae7ff 100%)', border: 'none' }}>
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#1890ff' }}>
              {totalAmount.toLocaleString('ru-RU')} ‚ÇΩ
            </div>
            <div style={{ color: '#595959', fontWeight: '500', fontSize: '12px' }}>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –º–µ—Å—è—Ü</div>
          </div>
        </Card>
        <Card style={{ flex: 1, borderRadius: '8px', background: 'linear-gradient(135deg, #fff2e8 0%, #ffd8bf 100%)', border: 'none' }}>
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#fa541c' }}>
              {incassatedAmount.toLocaleString('ru-RU')} ‚ÇΩ
            </div>
            <div style={{ color: '#595959', fontWeight: '500', fontSize: '12px' }}>–ò–Ω–∫–∞—Å—Å–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ –º–µ—Å—è—Ü</div>
          </div>
        </Card>
        <Card style={{ flex: 1, borderRadius: '8px', background: 'linear-gradient(135deg, #fff2e8 0%, #ffd8bf 100%)', border: 'none' }}>
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#fa541c' }}>
              {notInCashRegisterAmount.toLocaleString('ru-RU')} ‚ÇΩ
            </div>
            <div style={{ color: '#595959', fontWeight: '500', fontSize: '12px' }}>–ù–µ –≤ –∫–∞—Å—Å–µ –∑–∞ –º–µ—Å—è—Ü</div>
          </div>
        </Card>
        <Card style={{ flex: 1, borderRadius: '8px', background: 'linear-gradient(135deg, #f9f0ff 0%, #d3adf7 100%)', border: 'none' }}>
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#722ed1' }}>
              {currentMonthPayments.length}
            </div>
            <div style={{ color: '#595959', fontWeight: '500', fontSize: '12px' }}>–ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ –º–µ—Å—è—Ü</div>
          </div>
        </Card>
          {/* –ù–∞–ª–∏—á–Ω—ã–µ –≤ –∫–∞—Å—Å–µ —Å–µ–π—á–∞—Å */}
        <Card style={{ flex: 1, borderRadius: '8px', background: 'linear-gradient(135deg, #fff7e6 0%, #ffd591 100%)', border: 'none' }}>
          <div style={{ textAlign: 'center' }}>
            <div style={{ 
              fontSize: '20px', 
              fontWeight: 'bold', 
              color: cashInRegisterAmount < 0 ? '#ff4d4f' : '#fa8c16' 
            }}>
              {cashInRegisterAmount.toLocaleString('ru-RU')} ‚ÇΩ
            </div>
            <div style={{ color: '#595959', fontWeight: '500', fontSize: '12px' }}>–ù–∞–ª–∏—á–Ω—ã–µ –≤ –∫–∞—Å—Å–µ —Å–µ–π—á–∞—Å</div>
          </div>
        </Card>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º */}
      <div style={{ display: 'flex', gap: '12px', marginBottom: '16px' }}>
        <Card style={{ flex: 1, borderRadius: '8px', background: 'linear-gradient(135deg, #f0f9ff 0%, #c7f0db 100%)', border: 'none' }}>
          <div style={{ textAlign: 'center' }}>
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '6px', marginBottom: '4px' }}>
              <WalletOutlined style={{ color: cashAmount < 0 ? '#ff4d4f' : '#52c41a', fontSize: '16px' }} />
              <span style={{ fontSize: '12px', fontWeight: '500', color: '#595959' }}>–ù–∞–ª–∏—á–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü</span>
            </div>
            <div style={{ fontSize: '18px', fontWeight: 'bold', color: cashAmount < 0 ? '#ff4d4f' : '#52c41a' }}>
              {cashAmount.toLocaleString('ru-RU')} ‚ÇΩ
            </div>
          </div>
        </Card>
        <Card style={{ flex: 1, borderRadius: '8px', background: 'linear-gradient(135deg, #e6f7ff 0%, #bae7ff 100%)', border: 'none' }}>
          <div style={{ textAlign: 'center' }}>
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '6px', marginBottom: '4px' }}>
              <BankOutlined style={{ color: '#1890ff', fontSize: '16px' }} />
              <span style={{ fontSize: '12px', fontWeight: '500', color: '#595959' }}>–ü–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –≤ –∫–∞—Å—Å–µ</span>
            </div>
            <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#1890ff' }}>
              {payments.filter(p => p.type === 'transfer' && !p.inCashRegister).length}
            </div>
            <div style={{ fontSize: '10px', color: '#8c8c8c', marginTop: '2px' }}>
              –æ–ø–µ—Ä–∞—Ü–∏–π
            </div>
          </div>
        </Card>
        <Card style={{ flex: 1, borderRadius: '8px', background: 'linear-gradient(135deg, #f9f0ff 0%, #d3adf7 100%)', border: 'none' }}>
          <div style={{ textAlign: 'center' }}>
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '6px', marginBottom: '4px' }}>
              <DollarOutlined style={{ color: '#722ed1', fontSize: '16px' }} />
              <span style={{ fontSize: '12px', fontWeight: '500', color: '#595959' }}>–ö–≠–ë –Ω–µ –≤ –∫–∞—Å—Å–µ</span>
            </div>
            <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#722ed1' }}>
              {payments.filter(p => p.type === 'keb' && !p.inCashRegister).length}
            </div>
            <div style={{ fontSize: '10px', color: '#8c8c8c', marginTop: '2px' }}>
              –æ–ø–µ—Ä–∞—Ü–∏–π
            </div>
          </div>
        </Card>
      </div>
      </Spin>

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
      <Card style={{ marginBottom: '24px', borderRadius: '12px' }}>
        <div style={{ display: 'flex', gap: '16px', alignItems: 'center', flexWrap: 'wrap' }}>
          <Search
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é, –ø–æ—Å—Ç–∞–≤—â–∏–∫—É, –∑–∞–∫–∞–∑—É"
            style={{ width: 350 }}
            onChange={(e) => setSearchText(e.target.value)}
            prefix={<SearchOutlined />}
          />
          <div style={{ 
            padding: '6px 12px', 
            background: '#f0f9ff', 
            borderRadius: '6px', 
            border: '1px solid #bae7ff',
            fontSize: '12px',
            color: '#1890ff',
            fontWeight: '500'
          }}>
            –ù–∞–π–¥–µ–Ω–æ: {filteredPayments.length} –∏–∑ {payments.length}
          </div>
          <div style={{ 
            padding: '4px 8px', 
            background: '#f6ffed', 
            borderRadius: '4px', 
            border: '1px solid #b7eb8f',
            fontSize: '11px',
            color: '#389e0d',
            fontWeight: '400'
          }}>
            üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
          </div>
          <Select
            value={typeFilter}
            onChange={setTypeFilter}
            style={{ minWidth: 130 }}
          >
            <Option value="all">–í—Å–µ —Ç–∏–ø—ã</Option>
            <Option value="cash">–ù–∞–ª–∏—á–Ω—ã–µ</Option>
            <Option value="transfer">–ü–µ—Ä–µ–≤–æ–¥—ã</Option>
            <Option value="keb">–ö–≠–ë</Option>
          </Select>
          <Select
            value={statusFilter}
            onChange={setStatusFilter}
            style={{ minWidth: 150 }}
          >
            <Option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</Option>
            <Option value="in_cash">–í –∫–∞—Å—Å–µ</Option>
            <Option value="not_in_cash">–ù–µ –≤ –∫–∞—Å—Å–µ</Option>
          </Select>
          <Select
            value={incassationFilter}
            onChange={setIncassationFilter}
            style={{ minWidth: 150 }}
          >
            <Option value="all">–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏</Option>
            <Option value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</Option>
            <Option value="incassated">–ò–Ω–∫–∞—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</Option>
          </Select>
          <Select
            value={dateFilter}
            onChange={setDateFilter}
            style={{ minWidth: 130 }}
            placeholder={
              <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
                <CalendarOutlined />
                –í—Å–µ –¥–∞—Ç—ã
              </div>
            }
          >
            <Option value="all">
              <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
                <CalendarOutlined />
                –í—Å–µ –¥–∞—Ç—ã
              </div>
            </Option>
            <Option value="today">–°–µ–≥–æ–¥–Ω—è</Option>
            <Option value="yesterday">–í—á–µ—Ä–∞</Option>
            <Option value="week">–ó–∞ –Ω–µ–¥–µ–ª—é</Option>
            <Option value="month">–ó–∞ –º–µ—Å—è—Ü</Option>
          </Select>
          <Button
            icon={<ReloadOutlined />}
            onClick={() => {
              setSearchText('');
              setTypeFilter('all');
              setStatusFilter('all');
              setIncassationFilter('all');
              setDateFilter('all');
              setSortField('date');
              setSortOrder('descend');
            }}
            title="–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É"
            style={{ borderRadius: '8px' }}
          >
            –°–±—Ä–æ—Å–∏—Ç—å
          </Button>
          <div style={{ marginLeft: 'auto', display: 'flex', gap: '8px' }}>
            {canEditPayments && (
              <>
                <Button
                  type="primary"
                  icon={<PlusOutlined />}
                  onClick={() => {
                    setEditingPayment(null);
                    form.resetFields();
                    form.setFieldsValue({
                      date: dayjs().format('YYYY-MM-DD'),
                      inCashRegister: true,
                      cashRegisterDate: dayjs().format('YYYY-MM-DD')
                    });
                    setIsModalVisible(true);
                  }}
                  size="middle"
                  style={{ borderRadius: '8px' }}
                >
                  –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂
                </Button>
                
                {hasFullAccess() && (
                  <Button
                    danger
                    icon={<DeleteOutlined />}
                    onClick={handleClearAllPayments}
                    size="middle"
                    style={{ borderRadius: '8px' }}
                    disabled={payments.length === 0}
                  >
                    –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ ({payments.length})
                  </Button>
                )}
              </>
            )}
          </div>
        </div>
      </Card>

      {/* –ö–Ω–æ–ø–∫–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ */}
      {payments.some(p => p.type === 'cash' && p.inCashRegister) && (
        <Card style={{ marginBottom: '16px', borderRadius: '12px', background: 'linear-gradient(135deg, #fff2e8 0%, #ffd8bf 100%)', border: '1px solid #ffbb96' }}>
          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
              <WalletOutlined style={{ fontSize: '20px', color: '#fa541c' }} />
              <div>
                <div style={{ fontSize: '16px', fontWeight: '500', color: cashInRegisterAmount < 0 ? '#ff4d4f' : '#fa541c' }}>
                  –ù–∞–ª–∏—á–Ω—ã–µ –≤ –∫–∞—Å—Å–µ: {cashInRegisterAmount.toLocaleString('ru-RU')} ‚ÇΩ
                    </div>
                <div style={{ fontSize: '14px', color: '#595959', marginTop: '2px' }}>
                  –û–ø–µ—Ä–∞—Ü–∏–π: {payments.filter(p => p.type === 'cash' && p.inCashRegister).length}
                </div>
              </div>
            </div>
            {canEditPayments && (
            <Button
              danger
              type="primary"
              icon={<DollarOutlined />}
              onClick={handleIncassation}
                size="middle"
              style={{ borderRadius: '8px' }}
            >
              –ò–Ω–∫–∞—Å—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ª–∏—á–Ω—ã–µ
            </Button>
            )}
          </div>
        </Card>
      )}

      {/* –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π */}
      <Card style={{ borderRadius: '12px' }}>
        <Table
          columns={columns}
          dataSource={filteredPayments}
          rowKey="id"
          loading={loadingPayments}
          onChange={(pagination, filters, sorter) => {
            if (sorter && !Array.isArray(sorter)) {
              setSortField(sorter.field as string || 'date');
              setSortOrder(sorter.order || 'descend');
            }
          }}
          pagination={{
            pageSize: pageSize,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total) => `–í—Å–µ–≥–æ ${total} –ø–ª–∞—Ç–µ–∂–µ–π`,
            pageSizeOptions: ['10', '20', '50', '100'],
            onShowSizeChange: (current, size) => {
              setPageSize(size);
            },
          }}
          scroll={{ x: 1200 }}
          locale={{
            emptyText: loadingPayments ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : (
              <div style={{ padding: '40px', textAlign: 'center' }}>
                <DollarOutlined style={{ fontSize: '48px', color: '#d9d9d9', marginBottom: '16px' }} />
                <div style={{ color: '#8c8c8c', fontSize: '16px' }}>–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
                <div style={{ color: '#bfbfbf', fontSize: '14px', marginTop: '8px' }}>
                  –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ
                </div>
              </div>
            )
          }}
        />
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <Modal
        title={editingPayment ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂" : "–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂"}
        open={isModalVisible}
        onOk={handleModalOk}
        onCancel={() => {
          setIsModalVisible(false);
          form.resetFields();
        }}
        width={600}
        okText="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
      >
        <Form form={form} layout="vertical">
          <div style={{ display: 'flex', gap: '16px' }}>
            <Form.Item
              name="type"
              label="–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞' }]}
              style={{ flex: 1 }}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø">
                <Option value="cash">
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <WalletOutlined />
                    –ù–∞–ª–∏—á–Ω—ã–µ
                  </div>
                </Option>
                <Option value="transfer">
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <BankOutlined />
                    –ü–µ—Ä–µ–≤–æ–¥
                  </div>
                </Option>
                <Option value="keb">
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <DollarOutlined />
                    –ö–≠–ë
                  </div>
                </Option>
              </Select>
            </Form.Item>

            <Form.Item
              name="amount"
              label="–°—É–º–º–∞"
              rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É' }]}
              style={{ flex: 1 }}
            >
              <InputNumber
                style={{ width: '100%' }}
                placeholder="10000"
                min={0}
                formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                addonAfter="‚ÇΩ"
              />
            </Form.Item>
          </div>

          <Form.Item
            name="description"
            label="–û–ø–∏—Å–∞–Ω–∏–µ"
            rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞' }]}
          >
            <Input placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞" />
          </Form.Item>

          <div style={{ display: 'flex', gap: '16px' }}>
            <Form.Item
              name="supplier"
              label="–ü–æ—Å—Ç–∞–≤—â–∏–∫"
              style={{ flex: 1 }}
            >
              <Input placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" />
            </Form.Item>

            <Form.Item
              name="orderId"
              label="ID –∑–∞–∫–∞–∑–∞"
              style={{ flex: 1 }}
            >
              <Input placeholder="–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" />
            </Form.Item>
          </div>

          <Form.Item
            name="date"
            label="–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞"
            rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É' }]}
          >
            <Input type="date" />
          </Form.Item>

          <Form.Item
            name="inCashRegister"
            label="–í –∫–∞—Å—Å–µ"
            valuePropName="checked"
          >
            <Switch 
              checkedChildren="–í –∫–∞—Å—Å–µ" 
              unCheckedChildren="–ù–µ –≤ –∫–∞—Å—Å–µ"
            />
          </Form.Item>

          <Form.Item
            noStyle
            shouldUpdate={(prevValues, currentValues) => prevValues.inCashRegister !== currentValues.inCashRegister}
          >
            {({ getFieldValue }) =>
              getFieldValue('inCashRegister') ? (
                <Form.Item
                  name="cashRegisterDate"
                  label="–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞—Å—Å—É"
                >
                  <Input type="date" />
                </Form.Item>
              ) : null
            }
          </Form.Item>

          <Form.Item
            name="notes"
            label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
          >
            <Input.TextArea rows={3} placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" />
          </Form.Item>
        </Form>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ */}
      <Modal
        title="–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö"
        open={incassationModalVisible}
        onOk={handleIncassation}
        onCancel={() => {
          setIncassationModalVisible(false);
          incassationForm.resetFields();
        }}
        width={500}
        okText="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
      >
        <Form form={incassationForm} layout="vertical">
                      <div style={{ marginBottom: '16px', padding: '12px', background: '#f6ffed', border: '1px solid #b7eb8f', borderRadius: '6px' }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px' }}>
                <WalletOutlined style={{ color: '#52c41a' }} />
                <span style={{ fontWeight: '500' }}>–ù–∞–ª–∏—á–Ω—ã–µ –≤ –∫–∞—Å—Å–µ</span>
              </div>
              <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#52c41a' }}>
                {totalAmount.toLocaleString('ru-RU')} ‚ÇΩ
              </div>
              <div style={{ fontSize: '12px', color: '#8c8c8c' }}>
                –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏
              </div>
            </div>

          <Form.Item
            name="type"
            label="–¢–∏–ø –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏"
          >
            <Select
              onChange={(value) => {
                setIncassationType(value);
                if (value === 'all') {
                  const totalAmount = payments.filter(p => p.type === 'cash' && p.inCashRegister).reduce((sum, p) => sum + p.amount, 0);
                  incassationForm.setFieldValue('amount', totalAmount);
                }
              }}
            >
              <Option value="all">
                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                  <CheckCircleOutlined style={{ color: '#52c41a' }} />
                  –ò–Ω–∫–∞—Å—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –Ω–∞–ª–∏—á–Ω—ã–µ
                </div>
              </Option>
              <Option value="partial">
                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                  <EditOutlined style={{ color: '#1890ff' }} />
                  –£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏
                </div>
              </Option>
            </Select>
          </Form.Item>

          <Form.Item
            name="amount"
            label="–°—É–º–º–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏"
            rules={[
              { required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏' },
              { 
                type: 'number', 
                min: 1, 
                message: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' 
              },
              {
                validator: (_, value) => {
                  if (value > totalAmount) {
                    return Promise.reject(new Error(`–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å ${totalAmount.toLocaleString('ru-RU')} ‚ÇΩ`));
                  }
                  return Promise.resolve();
                }
              }
            ]}
          >
                          <InputNumber
                style={{ width: '100%' }}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                min={0}
                max={totalAmount}
                formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                parser={value => Number(value!.replace(/\$\s?|(,*)/g, ''))}
                addonAfter="‚ÇΩ"
                disabled={incassationType === 'all'}
              />
          </Form.Item>

          {incassationType === 'partial' && (
            <div style={{ padding: '8px', background: '#fff7e6', border: '1px solid #ffd591', borderRadius: '6px', fontSize: '12px', color: '#d46b08' }}>
              üí° –ü—Ä–∏ —á–∞—Å—Ç–∏—á–Ω–æ–π –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ –±—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö
            </div>
          )}
        </Form>
      </Modal>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
const ExpensesTab: React.FC = () => {
  const [expenses, setExpenses] = useState<ExpenseItem[]>([]);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [form] = Form.useForm();
  const [searchText, setSearchText] = useState('');
  const [loading, setLoading] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const [pageSize, setPageSize] = useState(() => {
    const saved = localStorage.getItem('expenses_page_size');
    return saved ? parseInt(saved, 10) : 10;
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏–∑ API
  const loadExpenses = async () => {
    try {
      console.log('üí∏ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏–∑ API...');
      setLoading(true);
      const data = await paymentsApi.getAll();
      console.log('üí∏ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ API:', data?.length || 0, '–∑–∞–ø–∏—Å–µ–π');
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã (–∏—â–µ–º –ø–æ apiType)
      const expensePayments = data.filter((p: any) => p.apiType === 'expense' && p.category !== '–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É');
      console.log('üí∏ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ä–∞—Å—Ö–æ–¥–æ–≤:', expensePayments.length);
      
      const mappedExpenses = expensePayments.map((p: any) => ({
        id: p._id || p.id,
        amount: Math.abs(p.amount || 0), // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º—É —á–∏—Å–ª—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        description: p.description,
        date: p.date,
        category: p.category,
        adminName: p.adminName || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' // –ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ API
      }));
      
      console.log('üí∏ –ú–∞–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:', mappedExpenses);
      setExpenses(mappedExpenses);
      console.log('üí∏ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Ö–æ–¥–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadExpenses();
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ localStorage
  useEffect(() => {
    localStorage.setItem('expenses_page_size', pageSize.toString());
  }, [pageSize]);

  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
  useEffect(() => {
    const handlePaymentUpdated = (e: CustomEvent) => {
      console.log('üí∏ ExpensesTab –ø–æ–ª—É—á–∏–ª —Å–æ–±—ã—Ç–∏–µ paymentUpdated:', e.detail);
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      if (e.detail?.type === 'expense') {
        console.log('üí∏ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ');
        loadExpenses();
      }
    };

    window.addEventListener('paymentUpdated', handlePaymentUpdated as EventListener);
    return () => {
      window.removeEventListener('paymentUpdated', handlePaymentUpdated as EventListener);
    };
  }, []);

  const handleCreateExpense = () => {
    form.resetFields();
    form.setFieldsValue({
      date: dayjs().format('YYYY-MM-DD')
    });
    setIsModalVisible(true);
  };

  const handleModalOk = async () => {
    try {
      console.log('üí∏ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞...');
      const values = await form.validateFields();
      console.log('üí∏ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ:', values);
      
      const adminName = localStorage.getItem('admin_name') || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
      console.log('üí∏ –ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', adminName);
      
      // –ú–∞–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
      const categoryMap: Record<string, string> = {
        'office': '–û—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
        'equipment': '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
        'transport': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
        'marketing': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
        'utilities': '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
        'salary': '–ó–∞—Ä–ø–ª–∞—Ç–∞',
        'other': '–ü—Ä–æ—á–µ–µ'
      };
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
      const paymentData = {
        type: '–Ω–∞–ª–∏—á–Ω—ã–µ', // –†–∞—Å—Ö–æ–¥—ã –≤—Å–µ–≥–¥–∞ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å –Ω–∞–ª–∏—á–Ω—ã—Ö (—Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è enum)
        apiType: 'expense', // –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ä–∞—Å—Ö–æ–¥
        category: categoryMap[values.category] || values.category,
        amount: Math.abs(values.amount), // –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π, –º–∏–Ω—É—Å –¥–æ–±–∞–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ apiType
        date: values.date + 'T' + new Date().toISOString().split('T')[1], // –ë–µ—Ä–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º—ã + —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        description: values.description,
        paymentMethod: '–Ω–∞–ª–∏—á–Ω—ã–µ', // –†–∞—Å—Ö–æ–¥—ã –≤—Å–µ–≥–¥–∞ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å –Ω–∞–ª–∏—á–Ω—ã—Ö
        inCashRegister: true, // –ù–∞–ª–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –≤–ª–∏—è—é—Ç –Ω–∞ –∫–∞—Å—Å—É
        adminName: adminName, // –ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ —Ä–∞—Å—Ö–æ–¥
        notes: values.notes || `–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${adminName}`
      };
      
      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ API
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞ –≤ API:', paymentData);
        const createdPayment = await paymentsApi.create(paymentData);
        console.log('‚úÖ –ó–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î:', createdPayment);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        logPaymentAction(
          '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞',
          `–†–∞—Å—Ö–æ–¥ "${values.description}" –Ω–∞ —Å—É–º–º—É ${values.amount.toLocaleString('ru-RU')} ‚ÇΩ (${categoryMap[values.category] || values.category})`,
          createdPayment._id || createdPayment.id
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        await loadExpenses();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ExpensesTab
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ paymentUpdated –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è ExpensesTab)');
        window.dispatchEvent(new CustomEvent('paymentUpdated', { 
          detail: { 
            type: 'expense',
            amount: values.amount,
            category: values.category,
            description: values.description,
            expenseOnly: true // –§–ª–∞–≥ —á—Ç–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
          } 
        }));
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ expenseCreated –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
        window.dispatchEvent(new CustomEvent('expenseCreated', { 
          detail: { 
            payment: {
              id: createdPayment.id || createdPayment._id,
              mongoId: createdPayment._id,
              type: 'cash' as const,
              amount: -Math.abs(values.amount), // ‚úÖ –†–∞—Å—Ö–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞—Å—Å—ã
              description: values.description,
              date: paymentData.date,
              supplier: categoryMap[values.category] || values.category,
              orderId: undefined,
              inCashRegister: true, // –ù–∞–ª–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –≤–ª–∏—è—é—Ç –Ω–∞ –∫–∞—Å—Å—É  
              cashRegisterDate: paymentData.date,
              notes: values.notes,
              createdAt: new Date().toISOString(),
              category: categoryMap[values.category] || values.category,
              paymentMethod: '–Ω–∞–ª–∏—á–Ω—ã–µ',
              apiType: 'expense' as const,
              status: 'active' as const,
              incassationDate: undefined,
              adminName: adminName
            }
          } 
        }));
        
        message.success(`–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω. –ò–∑ –Ω–∞–ª–∏—á–Ω—ã—Ö –∫–∞—Å—Å—ã —Å–ø–∏—Å–∞–Ω–æ ${values.amount.toLocaleString('ru-RU')} ‚ÇΩ`, 5);
        
      } catch (apiError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î:', apiError);
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
          message: apiError instanceof Error ? apiError.message : 'Unknown error',
          status: (apiError as any)?.response?.status,
          data: (apiError as any)?.response?.data,
          stack: apiError instanceof Error ? apiError.stack : 'No stack trace'
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ —á–µ—Ä–µ–∑ API:', apiError);
        return;
      }
      
      setIsModalVisible(false);
      form.resetFields();
    } catch (error) {
      console.error('Validation failed:', error);
    }
  };

  const columns: ColumnsType<ExpenseItem> = [
    {
      title: '–°—É–º–º–∞',
      dataIndex: 'amount',
      key: 'amount',
      width: 120,
      render: (amount) => (
        <div style={{ fontWeight: '600', color: '#ff4d4f', fontSize: '16px' }}>
          -{Math.abs(amount).toLocaleString('ru-RU')} ‚ÇΩ
        </div>
      ),
    },
    {
      title: '–û–ø–∏—Å–∞–Ω–∏–µ',
      dataIndex: 'description',
      key: 'description',
      render: (description, record) => (
        <div>
          <div style={{ fontWeight: '500' }}>{description}</div>
          <div style={{ fontSize: '12px', color: '#8c8c8c' }}>
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {record.category}
          </div>
        </div>
      ),
    },
    {
      title: '–î–∞—Ç–∞',
      dataIndex: 'date',
      key: 'date',
      width: 120,
      render: (date) => {
        const dateObj = new Date(date);
        const isDateOnly = date && typeof date === 'string' && !date.includes('T') && !date.includes(' ');
        
        return (
          <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
            <CalendarOutlined style={{ color: '#8c8c8c' }} />
            <div>
              <div>{dateObj.toLocaleDateString('ru-RU')}</div>
              {!isDateOnly && (
                <div style={{ fontSize: '12px', color: '#8c8c8c' }}>
                  {dateObj.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
                </div>
              )}
              {isDateOnly && (
                <div style={{ fontSize: '12px', color: '#8c8c8c' }}>
                  –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                </div>
              )}
            </div>
          </div>
        );
      },
    },
    {
      title: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      dataIndex: 'adminName',
      key: 'adminName',
      width: 120,
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      width: 100,
      render: (_, record) => (
        <Popconfirm
          title="–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥?"
          description="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å"
          onConfirm={async () => {
            try {
              console.log('üí∏ –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥:', record.id, record.description);
              await paymentsApi.delete(record.id);
              console.log('üí∏ –†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
              
              // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
              logPaymentAction(
                '–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞',
                `–£–¥–∞–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥ "${record.description}" –Ω–∞ —Å—É–º–º—É ${Math.abs(record.amount).toLocaleString('ru-RU')} ‚ÇΩ`,
                record.id
              );
              
              // –û–±–Ω–æ–≤–ª—è–µ–º ExpensesTab
              await loadExpenses();
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
              console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ expenseDeleted –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è');
              window.dispatchEvent(new CustomEvent('expenseDeleted', { 
                detail: { 
                  expenseId: record.id,
                  amount: record.amount,
                  description: record.description
                } 
              }));
              
              message.success('–†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω');
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞:', error);
              message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞');
            }
          }}
          okText="–î–∞"
          cancelText="–ù–µ—Ç"
        >
          <Button
            type="text"
            icon={<DeleteOutlined />}
            size="small"
            danger
          />
        </Popconfirm>
      ),
    },
  ];

  const filteredExpenses = expenses.filter(expense =>
    expense.description.toLowerCase().includes(searchText.toLowerCase()) ||
    expense.category.toLowerCase().includes(searchText.toLowerCase()) ||
    expense.adminName.toLowerCase().includes(searchText.toLowerCase())
  );

  return (
    <div>
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ */}
      <Card style={{ marginBottom: '16px', borderRadius: '12px', background: 'linear-gradient(135deg, #fff2f0 0%, #ffccc7 100%)', border: '1px solid #ffaaa5' }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
          <MinusCircleOutlined style={{ fontSize: '20px', color: '#ff4d4f' }} />
          <div>
            <div style={{ fontSize: '16px', fontWeight: '500', color: '#ff4d4f' }}>
              –†–∞—Å—Ö–æ–¥—ã
            </div>
            <div style={{ fontSize: '14px', color: '#595959', marginTop: '4px' }}>
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–ø–∏—Å–∞–Ω–∏–µ–º –∏–∑ –∫–∞—Å—Å—ã
            </div>
          </div>
        </div>
      </Card>

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
      <Card style={{ marginBottom: '24px', borderRadius: '12px' }}>
        <div style={{ display: 'flex', gap: '16px', alignItems: 'center', flexWrap: 'wrap' }}>
          <Search
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            style={{ width: 350 }}
            onChange={(e) => setSearchText(e.target.value)}
            prefix={<SearchOutlined />}
          />
          <div style={{ marginLeft: 'auto' }}>
            <Button
              type="primary"
              icon={<PlusOutlined />}
              onClick={handleCreateExpense}
              style={{ borderRadius: '8px' }}
            >
              –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
            </Button>
          </div>
        </div>
      </Card>

      {/* –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ */}
      <Card style={{ borderRadius: '12px' }}>
        <Table
          columns={columns}
          dataSource={filteredExpenses}
          rowKey="id"
          loading={loading}
          pagination={{
            pageSize: pageSize,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total) => `–í—Å–µ–≥–æ ${total} —Ä–∞—Å—Ö–æ–¥–æ–≤`,
            pageSizeOptions: ['10', '20', '50', '100'],
            onShowSizeChange: (current, size) => {
              setPageSize(size);
            },
          }}
          scroll={{ x: 800 }}
        />
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ */}
      <Modal
        title="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"
        open={isModalVisible}
        onOk={handleModalOk}
        onCancel={() => {
          setIsModalVisible(false);
          form.resetFields();
        }}
        width={600}
        okText="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
      >
        <Form form={form} layout="vertical">
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="amount"
                label="–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É' }]}
              >
                <InputNumber
                  style={{ width: '100%' }}
                  placeholder="10000"
                  min={0}
                  formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  addonAfter="‚ÇΩ"
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="category"
                label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é' }]}
              >
                <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é">
                  <Option value="office">–û—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã</Option>
                  <Option value="equipment">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</Option>
                  <Option value="transport">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</Option>
                  <Option value="marketing">–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</Option>
                  <Option value="utilities">–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏</Option>
                  <Option value="salary">–ó–∞—Ä–ø–ª–∞—Ç–∞</Option>
                  <Option value="other">–ü—Ä–æ—á–µ–µ</Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="description"
            label="–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"
            rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ' }]}
          >
            <Input placeholder="–ù–∞ —á—Ç–æ –ø–æ—Ç—Ä–∞—á–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞" />
          </Form.Item>

          <Form.Item
            name="date"
            label="–î–∞—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞"
            rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É' }]}
          >
            <Input type="date" />
          </Form.Item>

          <Form.Item
            name="notes"
            label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
          >
            <Input.TextArea rows={3} placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –ø–æ–∫—É–ø–æ–∫
const PurchasesTab: React.FC<{
  refreshPayments: (showMessage?: boolean) => Promise<void>;
}> = ({ refreshPayments }) => {
  const [purchases, setPurchases] = useState<PurchaseItem[]>([]);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [form] = Form.useForm();
  const [searchText, setSearchText] = useState('');
  const [suppliers, setSuppliers] = useState<any[]>([]);
  const [categories, setCategories] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const { hasFullAccess } = useAuth();
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
  const [selectedCategory, setSelectedCategory] = useState('');
  const [serialNumbers, setSerialNumbers] = useState<string[]>(['']);
  const [barcodes, setBarcodes] = useState<string[]>(['']);
  const [selectedImages, setSelectedImages] = useState<File[]>([]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const [pageSize, setPageSize] = useState(() => {
    const saved = localStorage.getItem('purchases_page_size');
    return saved ? parseInt(saved, 10) : 10;
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
  const loadPurchases = async () => {
    try {
      setLoading(true);
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –∏–∑ localStorage
      const savedPurchases = localStorage.getItem('admin_purchases');
      if (savedPurchases) {
        try {
          const parsedPurchases = JSON.parse(savedPurchases);
          const purchasesArray = Array.isArray(parsedPurchases) ? parsedPurchases : [];
          console.log('üíæ PurchasesTab: –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –∏–∑ localStorage:', purchasesArray.map(p => ({ 
            id: p.id, 
            productName: p.productName, 
            arrivalId: p.arrivalId 
          })));
          setPurchases(purchasesArray);
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–∫—É–ø–æ–∫ –∏–∑ localStorage:', e);
          setPurchases([]);
        }
      } else {
        setPurchases([]);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫—É–ø–æ–∫:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫—É–ø–æ–∫');
      setPurchases([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadPurchases();
    fetchSuppliers();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SSE –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–æ–≤
    console.log('üîå PurchasesTab: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏—Ö–æ–¥–æ–≤');
    initializeProductEvents();
    
    return () => {
      console.log('üîå PurchasesTab: –ó–∞–∫—Ä—ã–≤–∞–µ–º SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
      closeProductEvents();
    };
  }, []);

  useEffect(() => {
    fetchCategories();
  }, []);

  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞
  useEffect(() => {
    const handleArrivalDeleted = (e: CustomEvent) => {
      console.log('üîî PurchasesTab: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ arrivalDeleted:', e.detail);
      
      const deletedArrivalId = e.detail?.arrivalId;
      if (deletedArrivalId) {
        console.log('üóëÔ∏è –ü—Ä–∏—Ö–æ–¥ —É–¥–∞–ª–µ–Ω, –∏—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –ø–æ–∫—É–ø–∫—É —Å arrivalId:', deletedArrivalId);
        console.log('üîç –¢–µ–∫—É—â–∏–µ –ø–æ–∫—É–ø–∫–∏:', purchases.map(p => ({ id: p.id, productName: p.productName, arrivalId: p.arrivalId })));
        
        // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø–æ–∫—É–ø–∫—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —ç—Ç–∏–º –ø—Ä–∏—Ö–æ–¥–æ–º
        const updatedPurchases = purchases.filter(p => p.arrivalId !== deletedArrivalId);
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', {
          before: purchases.length,
          after: updatedPurchases.length,
          deletedArrivalId
        });
        
        if (updatedPurchases.length !== purchases.length) {
          setPurchases(updatedPurchases);
          localStorage.setItem('admin_purchases', JSON.stringify(updatedPurchases));
          message.info('–°–≤—è–∑–∞–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
        } else {
          console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫ —Å arrivalId:', deletedArrivalId);
        }
      } else {
        console.log('‚ùå –°–æ–±—ã—Ç–∏–µ arrivalDeleted –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç arrivalId');
      }
    };

    window.addEventListener('arrivalDeleted', handleArrivalDeleted as EventListener);
    
    return () => {
      window.removeEventListener('arrivalDeleted', handleArrivalDeleted as EventListener);
    };
  }, [purchases]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const fetchSuppliers = async () => {
    try {
      const token = localStorage.getItem('admin_token');
      const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/suppliers`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        setSuppliers(data || []);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', error);
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤');
    }
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ localStorage
  useEffect(() => {
    localStorage.setItem('purchases_page_size', pageSize.toString());
  }, [pageSize]);

  const fetchCategories = async () => {
    try {
      const token = localStorage.getItem('admin_token');
      const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/categories`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        setCategories(data || []);
      }
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–∏–π–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
  const addSerialNumber = () => {
    setSerialNumbers(prev => [...prev, '']);
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    setTimeout(() => {
      updateQuantityBasedOnSerials();
    }, 100);
  };

  const removeSerialNumber = (index: number) => {
    setSerialNumbers(prev => prev.filter((_, i) => i !== index));
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    setTimeout(() => {
      updateQuantityBasedOnSerials();
    }, 100);
  };

  const updateSerialNumber = (index: number, value: string) => {
    setSerialNumbers(prev => {
      const newSerials = prev.map((sn, i) => i === index ? value : sn);
      return newSerials;
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    setTimeout(() => {
      updateQuantityBasedOnSerials();
    }, 100);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞–º–∏
  const addBarcode = () => {
    setBarcodes(prev => [...prev, '']);
  };

  const removeBarcode = (index: number) => {
    setBarcodes(prev => prev.filter((_, i) => i !== index));
  };

  const updateBarcode = (index: number, value: string) => {
    setBarcodes(prev => prev.map((bc, i) => i === index ? value : bc));
  };

  // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
  const generateUniqueArticle = async (isAccessory: boolean = false): Promise<string> => {
    const prefix = isAccessory ? '1' : '0';
    const maxAttempts = 100; // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    for (let attempt = 0; attempt < maxAttempts; attempt++) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 8 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–∏—Ñ—Ä
      const randomDigits = Math.floor(Math.random() * 100000000).toString().padStart(8, '0');
      const article = prefix + randomDigits;
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞—Ä—Ç–∏–∫—É–ª –≤ –±–∞–∑–µ
        const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/products?fields=article`, {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('admin_token')}`
          }
        });
        
        if (response.ok) {
          const products = await response.json();
          const existingArticles = products.map((p: any) => p.article);
          
          // –ï—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —É–Ω–∏–∫–∞–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
          if (!existingArticles.includes(article)) {
            return article;
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª–∞:', error);
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –∑–∞ maxAttempts –ø–æ–ø—ã—Ç–æ–∫
    const fallback = prefix + Date.now().toString().slice(-8);
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', fallback);
    return fallback;
  };

  const isAccessoryCategory = (categoryName: string): boolean => {
    // –ê–∫—Å–µ—Å—Å—É–∞—Ä–∞–º–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã" –∏ –∏—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const ACCESSORIES_CATEGORY_NAME = '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã';
    
    // –ù–∞–π–¥–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏
    const findCategoryByName = (cats: any[], name: string): any => {
      for (const cat of cats) {
        if (cat.name === name) return cat;
        if (cat.children) {
          const found = findCategoryByName(cat.children, name);
          if (found) return found;
        }
      }
      return null;
    };

    const findParentCategory = (cats: any[], childName: string): any => {
      for (const cat of cats) {
        if (cat.children) {
          if (cat.children.some((child: any) => child.name === childName)) {
            return cat;
          }
          const foundParent = findParentCategory(cat.children, childName);
          if (foundParent) return foundParent;
        }
      }
      return null;
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"
    if (categoryName === ACCESSORIES_CATEGORY_NAME) {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"
    let parent = findParentCategory(categories, categoryName);
    while (parent) {
      if (parent.name === ACCESSORIES_CATEGORY_NAME) {
        return true;
      }
      parent = findParentCategory(categories, parent.name);
    }

    return false;
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ—Ö–Ω–∏–∫–æ–π (–Ω–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–º)
  const isTechCategory = (categoryName: string): boolean => {
    return !isAccessoryCategory(categoryName);
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏
  const updateQuantityBasedOnSerials = () => {
    if (selectedCategory && isTechCategory(selectedCategory)) {
      const validSerials = serialNumbers.filter(sn => sn.trim() !== '');
      form.setFieldsValue({ quantity: validSerials.length || 1 });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
  const checkDuplicateSerialNumbers = async (serialNumbers: string[]): Promise<string[]> => {
    const validSerials = serialNumbers.filter(sn => sn.trim() !== '');
    if (validSerials.length === 0) return [];

    try {
      const token = localStorage.getItem('admin_token');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏—Ö–æ–¥—ã
      const arrivalsResponse = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/arrivals`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫–∏
      const receiptsResponse = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/receipts`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (arrivalsResponse.ok && receiptsResponse.ok) {
        const arrivals = await arrivalsResponse.json();
        const receipts = await receiptsResponse.json();
        
        const availableSerials = new Set<string>();
        const soldSerials = new Set<string>();
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ –ø—Ä–∏—Ö–æ–¥–æ–≤ (–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã)
        arrivals.forEach((arrival: any) => {
          if (arrival.items && Array.isArray(arrival.items)) {
            arrival.items.forEach((item: any) => {
              if (item.serialNumbers && Array.isArray(item.serialNumbers)) {
                item.serialNumbers.forEach((sn: string) => {
                  if (sn && sn.trim()) {
                    availableSerials.add(sn.trim().toLowerCase());
                  }
                });
              }
            });
          }
        });

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —á–µ–∫–æ–≤ (–ø—Ä–æ–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã)
        receipts.forEach((receipt: any) => {
          if (receipt.status !== 'cancelled' && receipt.items && Array.isArray(receipt.items)) {
            receipt.items.forEach((item: any) => {
              if (item.serialNumber && item.serialNumber.trim()) {
                soldSerials.add(item.serialNumber.trim().toLowerCase());
              }
            });
          }
        });

        // –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        soldSerials.forEach(soldSerial => {
          availableSerials.delete(soldSerial);
        });

        console.log(`üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: ${availableSerials.size} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, ${soldSerials.size} –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ (–Ω–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã–º–∏)
        const duplicates = validSerials.filter(sn => 
          availableSerials.has(sn.trim().toLowerCase())
        );

        return duplicates;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:', error);
    }
    
    return [];
  };

  const handleCreatePurchase = () => {
    form.resetFields();
    form.setFieldsValue({
      date: dayjs().format('YYYY-MM-DD'),
      isHidden: true,
      quantity: 1
    });
    setSelectedCategory('');
    setSerialNumbers(['']);
    setBarcodes(['']);
    setSelectedImages([]);
    setIsModalVisible(true);
  };

  const handleModalOk = async () => {
    try {
      const values = await form.validateFields();
      const adminName = localStorage.getItem('admin_name') || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
      const validSerials = serialNumbers.filter(sn => sn.trim() !== '');
      if (validSerials.length > 0) {
        const duplicates = await checkDuplicateSerialNumbers(validSerials);
        if (duplicates.length > 0) {
          message.error(`–°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Å–∏—Å—Ç–µ–º–µ: ${duplicates.join(', ')}`);
          return;
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É
      const newPurchase: PurchaseItem = {
        id: `purchase_${Date.now()}`,
        productName: values.productName,
        quantity: values.quantity,
        price: values.price,
        costPrice: values.costPrice,
        supplier: suppliers.find(s => (s._id || s.id) === values.supplier)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫',
        date: (() => {
          if (values.date) {
            // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            const selectedDate = new Date(values.date);
            const now = new Date();
            selectedDate.setHours(now.getHours(), now.getMinutes(), now.getSeconds(), now.getMilliseconds());
            return selectedDate.toISOString();
          } else {
            // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            return new Date().toISOString();
          }
        })(),
        adminName,
        addToArrival: values.addToArrival !== undefined ? values.addToArrival : true,
        notes: values.notes,
        createdAt: new Date().toISOString()
      };

      // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –∏ –Ω–∞ –ø—Ä–∏—Ö–æ–¥
      await createProductAndArrival(values, newPurchase);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
      const updatedPurchases = [newPurchase, ...purchases];
      setPurchases(updatedPurchases);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem('admin_purchases', JSON.stringify(updatedPurchases));

      message.success('–ü–æ–∫—É–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —Ç–æ–≤–∞—Ä –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–∏—Ö–æ–¥');
      setIsModalVisible(false);
      form.resetFields();
    } catch (error) {
      console.error('Error:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏');
    }
  };

  const createProductAndArrival = async (values: any, purchase: PurchaseItem) => {
    try {
      const token = localStorage.getItem('admin_token');
      const adminId = localStorage.getItem('admin_id') || '';
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      const isAccessory = isAccessoryCategory(values.category);
      
      // –ù–∞—Ö–æ–¥–∏–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é
      const findCategoryId = (categoryName: string, categories: any[]): string | null => {
        for (const category of categories) {
          if (category.name === categoryName) {
            return category._id || category.id;
          }
          if (category.children && category.children.length > 0) {
            const childId = findCategoryId(categoryName, category.children);
            if (childId) return childId;
          }
        }
        return null;
      };

      const categoryId = findCategoryId(values.category, categories);
      if (!categoryId) {
        throw new Error(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${values.category}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
      
              // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π slug
        const baseSlug = values.productName.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
        const uniqueSlug = `${baseSlug}-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const productData = {
          name: values.productName,
          article: values.article,
          price: values.price,
          costPrice: values.costPrice,
          categoryId: categoryId, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∞ –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
          category: values.category, // –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤
          brand: values.brand || '',
          description: '', // –û–ø–∏—Å–∞–Ω–∏–µ —É–±–∏—Ä–∞–µ–º
          isHidden: values.isHidden !== undefined ? values.isHidden : true,
          isAccessory: isAccessory, // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          slug: uniqueSlug, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π slug
          isActive: true,
          inStock: true,
          stockQuantity: values.quantity,
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥—ã
          serialNumbers: serialNumbers.filter(sn => sn.trim() !== ''),
          barcodes: isAccessory ? barcodes.filter(bc => bc.trim() !== '') : [] // –®—Ç—Ä–∏—Ö-–∫–æ–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
        };

      console.log('üì¶ –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä:', productData);
      
      const productResponse = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/products`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(productData)
      });

      if (productResponse.ok) {
        const productResult = await productResponse.json();
        console.log('‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω:', productResult);
        
        // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        const supplier = suppliers.find(s => (s._id || s.id) === values.supplier);
        if (!supplier) {
          throw new Error('–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏—Ö–æ–¥ —á–µ—Ä–µ–∑ API
        const arrivalData = {
          supplierId: values.supplier,
          supplierName: supplier.name,
          date: new Date().toISOString(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–æ values.date
          notes: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ –ø–æ–∫—É–ø–∫–∏: ${values.productName}`,
          totalQuantity: values.quantity,
          totalValue: values.costPrice * values.quantity,
          items: [{
            productId: productResult._id,
            productName: values.productName,
            quantity: values.quantity,
            price: values.price,
            costPrice: values.costPrice,
            isAccessory: isAccessory,
            serialNumbers: serialNumbers.filter(sn => sn.trim() !== ''),
            barcode: isAccessory && barcodes.length > 0 ? barcodes.filter(bc => bc.trim() !== '')[0] : undefined
          }]
        };

        console.log('üì¶ –°–æ–∑–¥–∞–µ–º –ø—Ä–∏—Ö–æ–¥:', arrivalData);

        const arrivalResponse = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/arrivals`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(arrivalData)
        });

        if (arrivalResponse.ok) {
          const arrivalResult = await arrivalResponse.json();
          console.log('‚úÖ –ü—Ä–∏—Ö–æ–¥ —Å–æ–∑–¥–∞–Ω:', arrivalResult);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º arrivalId –≤ –æ–±—ä–µ–∫—Ç–µ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          purchase.arrivalId = arrivalResult._id;

          // Backend –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –¥–æ–ª–≥ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞
          // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–ª–≥ –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ
          const debtAmount = values.costPrice * values.quantity;
          
          // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–ª–≥ —Ç–æ—á–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
          await new Promise(resolve => setTimeout(resolve, 500));
          
          try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–ª–≥
            const debtsResponse = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/debts`, {
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            
            if (debtsResponse.ok) {
              const debtsData = await debtsResponse.json();
              // –ò—â–µ–º –¥–æ–ª–≥ –ø–æ arrivalId
              const createdDebt = debtsData.find((debt: any) => debt.arrivalId === arrivalResult._id.toString());
              
              if (createdDebt) {
                console.log('üí∞ –ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–ª–≥:', createdDebt);
                
                // –û–ø–ª–∞—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –¥–æ–ª–≥
                console.log('üí≥ –û–ø–ª–∞—á–∏–≤–∞–µ–º –¥–æ–ª–≥ –Ω–∞ —Å—É–º–º—É:', debtAmount);
                
                await debtsApi.pay(createdDebt.id || createdDebt._id, {
                  amount: debtAmount
                });

                console.log('‚úÖ –î–æ–ª–≥ –æ–ø–ª–∞—á–µ–Ω');
                
                // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ —Å—Ä–∞–∑—É - –¥–æ–∂–¥–µ–º—Å—è —Å–æ–±—ã—Ç–∏—è paymentUpdated
              } else {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–ª–≥ –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞:', arrivalResult._id);
              }
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏ –æ–ø–ª–∞—Ç–µ –¥–æ–ª–≥–∞:', error);
          }

          message.success(`–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–∏—Ö–æ–¥ –∏ –¥–æ–ª–≥ ${debtAmount.toLocaleString('ru-RU')} ‚ÇΩ –æ–ø–ª–∞—á–µ–Ω`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö)
          window.dispatchEvent(new CustomEvent('paymentUpdated', {
            detail: {
              type: 'debtPaid',
              amount: debtAmount,
              description: `–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞ –∑–∞ ${values.productName}`
            }
          }));

        } else {
          throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞');
        }
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞, –ø—Ä–∏—Ö–æ–¥–∞ –∏ –æ–ø–ª–∞—Ç–µ –¥–æ–ª–≥–∞:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏ –æ–ø–ª–∞—Ç–µ –¥–æ–ª–≥–∞');
      throw error;
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const buildCategoryTree = (categories: any[]): any[] => {
    if (categories.length > 0 && categories[0].children !== undefined) {
      return categories
    }
    
    const categoryMap = new Map<string, any>()
    const rootCategories: any[] = []

    categories.forEach(category => {
      categoryMap.set(category._id, { ...category, children: [] })
    })

    categories.forEach(category => {
      const categoryWithChildren = categoryMap.get(category._id)!
      if (category.parentId) {
        const parent = categoryMap.get(category.parentId)
        if (parent) {
          parent.children!.push(categoryWithChildren)
        } else {
          rootCategories.push(categoryWithChildren)
        }
      } else {
        rootCategories.push(categoryWithChildren)
      }
    })

    return rootCategories
  };

  const convertToTreeSelectData = (categories: any[]): any[] => {
    return categories.map(category => ({
      title: category.name,
      value: category.name,
      key: category._id,
      children: category.children && category.children.length > 0 ? convertToTreeSelectData(category.children) : undefined,
      isLeaf: !category.children || category.children.length === 0,
      selectable: true
    }))
  };

  const columns: ColumnsType<PurchaseItem> = [
    {
      title: '–¢–æ–≤–∞—Ä',
      dataIndex: 'productName',
      key: 'productName',
      render: (productName, record) => (
        <div>
          <div style={{ fontWeight: '500' }}>{productName}</div>
          <div style={{ fontSize: '12px', color: '#8c8c8c' }}>
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {record.quantity} —à—Ç.
          </div>
        </div>
      ),
    },
    {
      title: '–¶–µ–Ω–∞',
      dataIndex: 'price',
      key: 'price',
      width: 120,
      render: (price) => (
        <div style={{ fontWeight: '600', color: '#52c41a', fontSize: '16px' }}>
          {price.toLocaleString('ru-RU')} ‚ÇΩ
        </div>
      ),
    },
    {
      title: '–ó–∞–∫—É–ø–∫–∞',
      dataIndex: 'costPrice',
      key: 'costPrice',
      width: 120,
      render: (costPrice) => (
        <div style={{ fontWeight: '600', color: '#fa8c16', fontSize: '16px' }}>
          {costPrice.toLocaleString('ru-RU')} ‚ÇΩ
        </div>
      ),
    },
    {
      title: '–ü–æ—Å—Ç–∞–≤—â–∏–∫',
      dataIndex: 'supplier',
      key: 'supplier',
      width: 140,
      render: (supplierId) => {
        const supplier = suppliers.find(s => s.id === supplierId);
        return supplier ? supplier.name : '-';
      },
    },
    {
      title: '–î–∞—Ç–∞',
      dataIndex: 'date',
      key: 'date',
      width: 120,
      render: (date) => {
        const dateObj = new Date(date);
        const isDateOnly = date && typeof date === 'string' && !date.includes('T') && !date.includes(' ');
        
        return (
          <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
            <CalendarOutlined style={{ color: '#8c8c8c' }} />
            <div>
              <div>{dateObj.toLocaleDateString('ru-RU')}</div>
              {!isDateOnly && (
                <div style={{ fontSize: '12px', color: '#8c8c8c' }}>
                  {dateObj.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
                </div>
              )}
              {isDateOnly && (
                <div style={{ fontSize: '12px', color: '#8c8c8c' }}>
                  –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                </div>
              )}
            </div>
          </div>
        );
      },
    },
    {
      title: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      dataIndex: 'adminName',
      key: 'adminName',
      width: 120,
    },
    {
      title: '–ù–∞ –ø—Ä–∏—Ö–æ–¥–µ',
      dataIndex: 'addToArrival',
      key: 'addToArrival',
      width: 100,
      render: (addToArrival) => (
        <Tag color={addToArrival ? 'green' : 'orange'}>
          {addToArrival ? '–î–∞' : '–ù–µ—Ç'}
        </Tag>
      ),
    }
  ];

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É "–î–µ–π—Å—Ç–≤–∏—è" —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤
  if (hasFullAccess()) {
    columns.push({
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      width: 100,
      render: (_, record) => (
        <Popconfirm
          title="–£–¥–∞–ª–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
          description="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å"
          onConfirm={() => {
            const updatedPurchases = purchases.filter(p => p.id !== record.id);
            setPurchases(updatedPurchases);
            localStorage.setItem('admin_purchases', JSON.stringify(updatedPurchases));
            message.success('–ü–æ–∫—É–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
          }}
          okText="–î–∞"
          cancelText="–ù–µ—Ç"
        >
          <Button
            type="text"
            icon={<DeleteOutlined />}
            size="small"
            danger
          />
        </Popconfirm>
      ),
    });
  }

  const filteredPurchases = purchases.filter(purchase =>
    purchase.productName.toLowerCase().includes(searchText.toLowerCase()) ||
    purchase.adminName.toLowerCase().includes(searchText.toLowerCase())
  );

  return (
    <div>
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫ */}
      <Card style={{ marginBottom: '16px', borderRadius: '12px', background: 'linear-gradient(135deg, #f0f9ff 0%, #bae7ff 100%)', border: '1px solid #91d5ff' }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
          <ShoppingCartOutlined style={{ fontSize: '20px', color: '#1890ff' }} />
          <div>
            <div style={{ fontSize: '16px', fontWeight: '500', color: '#1890ff' }}>
              –ü–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            </div>
            <div style={{ fontSize: '14px', color: '#595959', marginTop: '4px' }}>
              –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –ø—Ä–∏—Ö–æ–¥
            </div>
            <div style={{ fontSize: '12px', color: '#fa8c16', marginTop: '8px', fontWeight: '500' }}>
              üí° –ü–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞
              {hasFullAccess() && <span style={{ marginLeft: '8px' }}>‚Ä¢ –†—É—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º</span>}
            </div>
          </div>
        </div>
      </Card>

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
      <Card style={{ marginBottom: '24px', borderRadius: '12px' }}>
        <div style={{ display: 'flex', gap: '16px', alignItems: 'center', flexWrap: 'wrap' }}>
          <Search
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            style={{ width: 350 }}
            onChange={(e) => setSearchText(e.target.value)}
            prefix={<SearchOutlined />}
          />
          <div style={{ marginLeft: 'auto' }}>
            <Button
              type="primary"
              icon={<PlusOutlined />}
              onClick={handleCreatePurchase}
              style={{ borderRadius: '8px' }}
            >
              –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É
            </Button>
          </div>
        </div>
      </Card>

      {/* –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫—É–ø–æ–∫ */}
      <Card style={{ borderRadius: '12px' }}>
        <Table
          columns={columns}
          dataSource={filteredPurchases}
          rowKey="id"
          pagination={{
            pageSize: pageSize,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total) => `–í—Å–µ–≥–æ ${total} –ø–æ–∫—É–ø–æ–∫`,
            pageSizeOptions: ['10', '20', '50', '100'],
            onShowSizeChange: (current, size) => {
              setPageSize(size);
            },
          }}
          scroll={{ x: 1000 }}
        />
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ */}
      <Modal
        title="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞"
        open={isModalVisible}
        onOk={handleModalOk}
        onCancel={() => {
          setIsModalVisible(false);
          form.resetFields();
          setSelectedCategory('');
          setSerialNumbers(['']);
          setBarcodes(['']);
          setSelectedImages([]);
        }}
        width={900}
        okText="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
      >
        <Form form={form} layout="vertical">
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="productName"
                label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' }]}
              >
                <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="article"
                label="–ê—Ä—Ç–∏–∫—É–ª"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª' }]}
                extra="–ê—Ä—Ç–∏–∫—É–ª –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
              >
                <Input 
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏" 
                  readOnly
                  suffix={
                    <Button 
                      type="text"
                      icon={<ReloadOutlined />}
                      disabled={!selectedCategory}
                      onClick={async () => {
                        if (selectedCategory) {
                          try {
                            const isAccessory = isAccessoryCategory(selectedCategory);
                            const newArticle = await generateUniqueArticle(isAccessory);
                            form.setFieldsValue({ article: newArticle });
                            message.success(`–ù–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª: ${newArticle}`);
                          } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–∞:', error);
                            message.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª');
                          }
                        }
                      }}
                      title="–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª"
                      size="small"
                    />
                  }
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="category"
                label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é' }]}
                extra="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é"
              >
                <TreeSelect
                  placeholder="üîç –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
                  allowClear
                  treeData={categories ? convertToTreeSelectData(buildCategoryTree(categories)) : []}
                  treeDefaultExpandAll={false}
                  showSearch
                  filterTreeNode={(inputValue, treeNode) => {
                    const getTextFromNode = (node: any): string => {
                      if (typeof node === 'string') return node;
                      if (node?.props?.children) {
                        if (Array.isArray(node.props.children)) {
                          return node.props.children.map(getTextFromNode).join(' ');
                        }
                        return getTextFromNode(node.props.children);
                      }
                      return '';
                    };
                    
                    const title = getTextFromNode(treeNode.title).toLowerCase();
                    return title.includes(inputValue.toLowerCase());
                  }}
                  dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}
                  style={{ width: '100%' }}
                  onChange={async (value) => {
                    setSelectedCategory(value);
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    setSerialNumbers(['']);
                    setBarcodes(['']);
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—Ä—Ç–∏–∫—É–ª –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    if (value) {
                      try {
                        const isAccessory = isAccessoryCategory(value);
                        const newArticle = await generateUniqueArticle(isAccessory);
                        form.setFieldsValue({ article: newArticle });
                        message.success(`–ê—Ä—Ç–∏–∫—É–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${newArticle}`);
                      } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–∞:', error);
                        message.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª');
                      }
                    }
                  }}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="brand"
                label="–ë—Ä–µ–Ω–¥"
              >
                <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥" />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                name="quantity"
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' }]}
                extra={selectedCategory && isTechCategory(selectedCategory) 
                  ? "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º" 
                  : "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä—É—á–Ω—É—é"
                }
              >
                <InputNumber
                  style={{ width: '100%' }}
                  placeholder="1"
                  min={1}
                  disabled={selectedCategory ? isTechCategory(selectedCategory) : false}
                  value={selectedCategory && isTechCategory(selectedCategory) 
                    ? serialNumbers.filter(sn => sn.trim() !== '').length || 1
                    : undefined
                  }
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="costPrice"
                label="–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É' }]}
              >
                <InputNumber
                  style={{ width: '100%' }}
                  placeholder="8000"
                  min={0}
                  formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  addonAfter="‚ÇΩ"
                  onChange={() => {
                    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫—É–ø–æ—á–Ω–æ–π —Ü–µ–Ω—ã
                    setTimeout(() => {
                      form.validateFields(['price']);
                    }, 100);
                  }}
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="price"
                label="–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É' }]}
              >
                <InputNumber
                  style={{ width: '100%' }}
                  placeholder="10000"
                  min={0}
                  formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  addonAfter="‚ÇΩ"
                />
              </Form.Item>
            </Col>
          </Row>



          {/* –°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ */}
          <Form.Item label="–°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞">
            {serialNumbers.map((serialNumber, index) => (
              <div key={index} style={{ display: 'flex', marginBottom: '8px', alignItems: 'center' }}>
                <Input
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä"
                  value={serialNumber}
                  onChange={(e) => updateSerialNumber(index, e.target.value)}
                  style={{ marginRight: '8px' }}
                />
                {serialNumbers.length > 1 && (
                  <Button
                    type="text"
                    danger
                    icon={<MinusCircleOutlined />}
                    onClick={() => removeSerialNumber(index)}
                  />
                )}
                {index === serialNumbers.length - 1 && (
                  <Button
                    type="text"
                    icon={<PlusOutlined />}
                    onClick={addSerialNumber}
                  />
                )}
              </div>
            ))}
          </Form.Item>

          {/* –®—Ç—Ä–∏—Ö-–∫–æ–¥—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ */}
          {selectedCategory && isAccessoryCategory(selectedCategory) && (
            <Form.Item label="–®—Ç—Ä–∏—Ö-–∫–æ–¥—ã">
              {barcodes.map((barcode, index) => (
                <div key={index} style={{ display: 'flex', marginBottom: '8px', alignItems: 'center' }}>
                  <Input
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥"
                    value={barcode}
                    onChange={(e) => updateBarcode(index, e.target.value)}
                    style={{ marginRight: '8px' }}
                  />
                  {barcodes.length > 1 && (
                    <Button
                      type="text"
                      danger
                      icon={<MinusCircleOutlined />}
                      onClick={() => removeBarcode(index)}
                    />
                  )}
                  {index === barcodes.length - 1 && (
                    <Button
                      type="text"
                      icon={<PlusOutlined />}
                      onClick={addBarcode}
                    />
                  )}
                </div>
              ))}
            </Form.Item>
          )}

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="supplier"
                label="–ü–æ—Å—Ç–∞–≤—â–∏–∫"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' }]}
              >
                <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞">
                  {suppliers.filter(s => s.status === 'active').map(supplier => (
                    <Option key={supplier._id || supplier.id} value={supplier._id || supplier.id}>
                      {supplier.name}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="date"
                label="–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É' }]}
              >
                <Input type="date" />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="isHidden"
            label=" "
            valuePropName="checked"
            initialValue={true}
          >
            <div style={{ marginTop: '8px' }}>
              <input
                type="checkbox"
                defaultChecked={true}
                onChange={(e) => {
                  form.setFieldsValue({
                    isHidden: e.target.checked
                  });
                }}
                style={{ marginRight: '8px' }}
              />
              <span style={{ color: '#fa8c16', fontWeight: '500' }}>
                –°–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
              </span>
            </div>
            <div style={{ fontSize: '12px', color: '#8c8c8c', marginTop: '4px' }}>
              –¢–æ–≤–∞—Ä –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∞–π—Ç–µ. –¢–æ–≤–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø—Ä–∏—Ö–æ–¥.
            </div>
          </Form.Item>

          <Form.Item
            name="notes"
            label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
          >
            <Input.TextArea rows={3} placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

const Payments: React.FC = () => {
  const [payments, setPayments] = useState<PaymentItem[]>([]);
  const [loadingPayments, setLoadingPayments] = useState(true);
  
  const [activeTab, setActiveTab] = useState('payments');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–∑ —á–µ–∫–∞
  const formatReceiptPaymentDescription = (receipt: any, paymentMethod: string, baseDescription: string): string => {
    // –ï—Å–ª–∏ –≤ —á–µ–∫–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    if (!receipt.items || receipt.items.length === 0) {
      return baseDescription;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    const itemsDescription = receipt.items.map((item: any) => {
      let itemDesc = item.productName;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1
      if (item.quantity > 1) {
        itemDesc += ` (${item.quantity} —à—Ç.)`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
      if (item.serialNumbers && item.serialNumbers.length > 0) {
        // –ú–∞—Å—Å–∏–≤ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (—Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–≥–æ–≤)
        itemDesc += ` [S/N: ${item.serialNumbers.join(', ')}]`;
      } else if (item.serialNumber && item.serialNumber.trim()) {
        // –û–¥–∏–Ω–æ—á–Ω—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä (—Ñ–æ—Ä–º–∞—Ç —á–µ–∫–æ–≤)
        itemDesc += ` [S/N: ${item.serialNumber.trim()}]`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∏—Ö-–∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (item.barcode) {
        itemDesc += ` [–®–ö: ${item.barcode}]`;
      }
      
      return itemDesc;
    }).join('; ');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    let methodName = '';
    switch (paymentMethod) {
      case 'cash':
        methodName = '–ù–∞–ª–∏—á–Ω—ã–µ';
        break;
      case 'card':
        methodName = '–ö–∞—Ä—Ç–∞';
        break;
      case 'transfer':
        methodName = '–ü–µ—Ä–µ–≤–æ–¥';
        break;
      case 'keb':
        methodName = '–ö–≠–ë';
        break;
      case 'sber_transfer':
        methodName = '–ü–µ—Ä–µ–≤–æ–¥ –°–±–µ—Ä–±–∞–Ω–∫';
        break;
      default:
        methodName = '–ü–ª–∞—Ç–µ–∂';
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const customerName = receipt.customerName || receipt.clientName || '';
    const clientPart = customerName ? ` –æ—Ç ${customerName}` : '';
    return `${methodName}${clientPart}: ${itemsDescription} (–ß–µ–∫ ${receipt.receiptNumber})`;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–µ–∫–æ–≤ –≤ –ø–ª–∞—Ç–µ–∂–∏
  const integrateReceiptsIntoPayments = (basePayments: PaymentItem[], receiptsData: any[]): PaymentItem[] => {
    const receiptPayments: PaymentItem[] = [];
    
    console.log('üí∞ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ–∫–æ–≤ –≤ –ø–ª–∞—Ç–µ–∂–∏:');
    console.log('üí∞ - –ë–∞–∑–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:', basePayments?.length || 0);
    console.log('üí∞ - –í—Å–µ–≥–æ —á–µ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', receiptsData?.length || 0);
    console.log('üí∞ - –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–∫–æ–≤ (–Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö):', receiptsData?.filter((receipt: any) => receipt?.status !== 'cancelled')?.length || 0);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!Array.isArray(basePayments)) {
      console.error('üí∞ basePayments –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', basePayments);
      return [];
    }
    
    if (!Array.isArray(receiptsData)) {
      console.error('üí∞ receiptsData –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', receiptsData);
      return basePayments;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    const validBasePayments = basePayments.filter(payment => {
      if (!payment || typeof payment !== 'object') {
        console.warn('üí∞ –ù–∞–π–¥–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–ª–∞—Ç–µ–∂:', payment);
        return false;
      }
      if (!payment.id) {
        console.warn('üí∞ –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂ –±–µ–∑ ID:', payment);
        return false;
      }
      return true;
    });
    
    // –°–æ–∑–¥–∞–µ–º Set —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID —á–µ–∫–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    const existingReceiptIds = new Set(receiptsData.map((r: any) => r._id || r.id));
    
    // –û—á–∏—â–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤
    const cleanedBasePayments = validBasePayments.filter(payment => {
      if (payment.id && payment.id.startsWith('receipt_')) {
        const match = payment.id.match(/^receipt_(.+)_(\d+)$/);
        if (match) {
          const receiptId = match[1];
          const receiptExists = existingReceiptIds.has(receiptId);
          if (!receiptExists) {
            console.log(`üí∞ –£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å—à–∏–π –ø–ª–∞—Ç–µ–∂ –∏–∑ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–µ–∫–∞ ${receiptId}:`, payment.description);
            return false; // –ò—Å–∫–ª—é—á–∞–µ–º —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂
          }
        }
      }
      return true; // –û—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂
    });
    
    if (cleanedBasePayments.length !== basePayments.length) {
      console.log(`üí∞ –û—á–∏—â–µ–Ω–æ –∑–∞–≤–∏—Å—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${basePayments.length - cleanedBasePayments.length}`);
    }
    
    receiptsData
      .filter((receipt: any) => receipt.status !== 'cancelled')
      .forEach((receipt: any) => {
        console.log(`üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫ ${receipt.receiptNumber}:`, {
          id: receipt.id,
          _id: receipt._id,
          isDebt: receipt.isDebt,
          debtPaid: receipt.debtPaid,
          paymentsCount: receipt.payments?.length || 0,
          totalAmount: receipt.totalAmount || receipt.total || 0,
          payments: receipt.payments
        });
        console.log(`üí∞ –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ–∫–∞:`, JSON.stringify(receipt.payments, null, 2));
        // –ï—Å–ª–∏ —á–µ–∫ –≤ –¥–æ–ª–≥ –∏ –¥–æ–ª–≥ –Ω–µ –æ–ø–ª–∞—á–µ–Ω - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ–ª–≥–µ
        if (receipt.isDebt && !receipt.debtPaid) {
          console.log(`üí∞ - –≠—Ç–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ–ª–≥`);
          const receiptId = receipt._id || receipt.id;
          const debtPaymentId = `debt_${receiptId}`;
          const existingDebtPayment = cleanedBasePayments.find(p => p.id === debtPaymentId);
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º customerName –≤–º–µ—Å—Ç–æ clientName
          const customerName = receipt.customerName || receipt.clientName || '–ö–ª–∏–µ–Ω—Ç (–∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ)';
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–µ—Ä–∏–π–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
          const itemsDescription = (receipt.items || []).map((item: any) => {
            let description = item.productName;
            if (item.quantity > 1) {
              description += ` (${item.quantity} —à—Ç.)`;
            }
            if (item.serialNumber) {
              description += ` [S/N: ${item.serialNumber}]`;
            }
            return description;
          }).join(', ');
          
          if (!existingDebtPayment) {
            receiptPayments.push({
              id: debtPaymentId,
              type: 'transfer',
              amount: 0,
              description: `–î–û–õ–ì: ${customerName} (–ß–µ–∫ ${receipt.receiptNumber}) - ${itemsDescription}`,
              date: receipt.date,
              orderId: receipt.receiptNumber,
              supplier: '–î–æ–ª–≥',
              inCashRegister: false,
              cashRegisterDate: undefined,
              createdAt: receipt.date,
              notes: `–î–æ–ª–≥ –∫–ª–∏–µ–Ω—Ç–∞: ${customerName}, –°—É–º–º–∞ —á–µ–∫–∞: ${(receipt.totalAmount || receipt.total || 0).toLocaleString('ru-RU')} ‚ÇΩ, –¢–æ–≤–∞—Ä—ã: ${itemsDescription}`
            });
          }
        }
        // –ï—Å–ª–∏ —á–µ–∫ –≤ –¥–æ–ª–≥ –∏ –¥–æ–ª–≥ –æ–ø–ª–∞—á–µ–Ω - —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        else if (receipt.isDebt && receipt.debtPaid) {
          console.log(`üí∞ - –≠—Ç–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ–ª–≥`);
          const customerName = receipt.customerName || receipt.clientName || '–ö–ª–∏–µ–Ω—Ç';
          (receipt.payments || []).forEach((payment: any, index: number) => {
            const receiptId = receipt._id || receipt.id;
            const paymentId = `receipt_${receiptId}_${index}`;
            const existingPayment = cleanedBasePayments.find(p => p.id === paymentId);
            

            
            if (!existingPayment) {
              let paymentType: 'cash' | 'transfer' | 'keb';
              let paymentDescription: string;
              
              switch (payment.method) {
                case 'cash':
                  paymentType = 'cash';
                  paymentDescription = formatReceiptPaymentDescription(receipt, 'cash', `–ù–∞–ª–∏—á–Ω—ã–µ –æ—Ç ${customerName} (–ß–µ–∫ ${receipt.receiptNumber})`);
                  break;
                case 'card':
                  paymentType = 'transfer';
                  paymentDescription = formatReceiptPaymentDescription(receipt, 'card', `–ö–∞—Ä—Ç–∞ –æ—Ç ${customerName} (–ß–µ–∫ ${receipt.receiptNumber})`);
                  break;
                case 'transfer':
                  paymentType = 'transfer';
                  paymentDescription = formatReceiptPaymentDescription(receipt, 'transfer', `–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç ${customerName} (–ß–µ–∫ ${receipt.receiptNumber})`);
                  break;
                case 'keb':
                  paymentType = 'keb';
                  paymentDescription = formatReceiptPaymentDescription(receipt, 'keb', `–ö–≠–ë –æ—Ç ${customerName} (–ß–µ–∫ ${receipt.receiptNumber})`);
                  break;
                case 'sber_transfer':
                  paymentType = 'transfer';
                  const sberDescription = `–ü–µ—Ä–µ–≤–æ–¥ –°–±–µ—Ä–±–∞–Ω–∫${payment.sberRecipient ? ` ‚Üí ${payment.sberRecipient}` : ''} –æ—Ç ${customerName} (–ß–µ–∫ ${receipt.receiptNumber})`;
                  paymentDescription = formatReceiptPaymentDescription(receipt, 'sber_transfer', sberDescription);
                  break;
                default:
                  paymentType = 'transfer';
                  paymentDescription = formatReceiptPaymentDescription(receipt, 'transfer', `–ü–ª–∞—Ç–µ–∂ –æ—Ç ${customerName} (–ß–µ–∫ ${receipt.receiptNumber})`);
              }
              
              const finalInCashRegister = payment.inCashRegister !== undefined ? payment.inCashRegister : (paymentType === 'cash');
              
              console.log(`üí∞ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–æ–ª–≥–∞ ${paymentId}:`, {
                method: payment.method,
                amount: payment.amount,
                paymentInCashRegister: payment.inCashRegister,
                paymentCashRegisterDate: payment.cashRegisterDate,
                finalInCashRegister: finalInCashRegister,
                paymentType: paymentType
              });

              receiptPayments.push({
                id: paymentId,
                type: paymentType,
                amount: payment.amount,
                description: paymentDescription,
                date: receipt.date,
                orderId: receipt.receiptNumber,
                supplier: customerName,
                inCashRegister: finalInCashRegister,
                cashRegisterDate: payment.cashRegisterDate || (paymentType === 'cash' ? receipt.date : undefined),
                createdAt: receipt.date
              });
            }
          });
        }
        // –û–±—ã—á–Ω—ã–µ —á–µ–∫–∏ (–Ω–µ –≤ –¥–æ–ª–≥)
        else if (!receipt.isDebt) {
          console.log(`üí∞ - –≠—Ç–æ –æ–±—ã—á–Ω—ã–π —á–µ–∫ (–Ω–µ –¥–æ–ª–≥)`);
          (receipt.payments || []).forEach((payment: any, index: number) => {
            const receiptId = receipt._id || receipt.id;
            const paymentId = `receipt_${receiptId}_${index}`;
            const existingPayment = cleanedBasePayments.find(p => p.id === paymentId);
            

            
            if (!existingPayment) {
              let paymentType: 'cash' | 'transfer' | 'keb';
              let paymentDescription: string;
              
              switch (payment.method) {
                case 'cash':
                  paymentType = 'cash';
                  paymentDescription = formatReceiptPaymentDescription(receipt, 'cash', `–ù–∞–ª–∏—á–Ω—ã–µ (–ß–µ–∫ ${receipt.receiptNumber})`);
                  break;
                case 'card':
                  paymentType = 'transfer';
                  paymentDescription = formatReceiptPaymentDescription(receipt, 'card', `–ö–∞—Ä—Ç–∞ (–ß–µ–∫ ${receipt.receiptNumber})`);
                  break;
                case 'transfer':
                  paymentType = 'transfer';
                  paymentDescription = formatReceiptPaymentDescription(receipt, 'transfer', `–ü–µ—Ä–µ–≤–æ–¥ (–ß–µ–∫ ${receipt.receiptNumber})`);
                  break;
                case 'keb':
                  paymentType = 'keb';
                  paymentDescription = formatReceiptPaymentDescription(receipt, 'keb', `–ö–≠–ë (–ß–µ–∫ ${receipt.receiptNumber})`);
                  break;
                case 'sber_transfer':
                  paymentType = 'transfer';
                  const sberDescription = `–ü–µ—Ä–µ–≤–æ–¥ –°–±–µ—Ä–±–∞–Ω–∫${payment.sberRecipient ? ` ‚Üí ${payment.sberRecipient}` : ''} (–ß–µ–∫ ${receipt.receiptNumber})`;
                  paymentDescription = formatReceiptPaymentDescription(receipt, 'sber_transfer', sberDescription);
                  break;
                default:
                  paymentType = 'transfer';
                  paymentDescription = formatReceiptPaymentDescription(receipt, 'transfer', `–ü–ª–∞—Ç–µ–∂ (–ß–µ–∫ ${receipt.receiptNumber})`);
              }
              
              const finalInCashRegister = payment.inCashRegister !== undefined ? payment.inCashRegister : (paymentType === 'cash');
              
              console.log(`üí∞ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ ${paymentId}:`, {
                method: payment.method,
                amount: payment.amount,
                paymentInCashRegister: payment.inCashRegister,
                paymentCashRegisterDate: payment.cashRegisterDate,
                finalInCashRegister: finalInCashRegister,
                paymentType: paymentType
              });

              receiptPayments.push({
                id: paymentId,
                type: paymentType,
                amount: payment.amount,
                description: paymentDescription,
                date: receipt.date,
                orderId: receipt.receiptNumber,
                supplier: '–ü—Ä–æ–¥–∞–∂–∞',
                inCashRegister: finalInCashRegister,
                cashRegisterDate: payment.cashRegisterDate || (paymentType === 'cash' ? receipt.date : undefined),
                createdAt: receipt.date
              });
            }
          });
        } else {
          console.log(`üí∞ - –ß–µ–∫ –Ω–µ –ø–æ–ø–∞–ª –Ω–∏ –≤ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é:`, {
            isDebt: receipt.isDebt,
            debtPaid: receipt.debtPaid
          });
        }
      });
    
    console.log('üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:');
    console.log('üí∞ - –°–æ–∑–¥–∞–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ —á–µ–∫–æ–≤:', receiptPayments.length);
    console.log('üí∞ - –ò—Ç–æ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π:', basePayments.length + receiptPayments.length);
    
    return [...cleanedBasePayments, ...receiptPayments];
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ API —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —á–µ–∫–æ–≤
  const refreshPayments = async (showMessage = true) => {
    setLoadingPayments(true);
    try {
      console.log('üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ API...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ API
      const apiPayments = await paymentsApi.getAll();
      console.log(`üí∞ –ü–æ–ª—É—á–µ–Ω–æ ${apiPayments?.length || 0} –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ API`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫–∏ –∏–∑ API
      const receiptsData = await receiptsApi.getAll();
      console.log(`üí∞ –ü–æ–ª—É—á–µ–Ω–æ ${receiptsData?.length || 0} —á–µ–∫–æ–≤ –∏–∑ API`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ª–≥–∏ –∏–∑ API
      const debtsData = await debtsApi.getAll();
      console.log(`üí∞ –ü–æ–ª—É—á–µ–Ω–æ ${debtsData?.length || 0} –¥–æ–ª–≥–æ–≤ –∏–∑ API`);
      console.log('üí∞ –ü–µ—Ä–≤—ã–µ 3 –¥–æ–ª–≥–∞:', debtsData?.slice(0, 3));
      
      // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —á–µ–∫–∏ –≤ –ø–ª–∞—Ç–µ–∂–∏
      const integratedPayments = integrateReceiptsIntoPayments(apiPayments || [], receiptsData || []);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ù–ï–û–ü–õ–ê–ß–ï–ù–ù–´–ï –¥–æ–ª–≥–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      // –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏ —É–∂–µ –µ—Å—Ç—å –≤ API –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∫ "–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É"
      const unpaidDebts = (debtsData || []).filter((debt: any) => debt.status !== 'paid');
      console.log(`üí∞ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: ${unpaidDebts.length} –∏–∑ ${debtsData?.length || 0}`);
      
      const debtsAsPayments = unpaidDebts.map((debt: any) => ({
        id: `debt_${debt._id || debt.id}`,
        mongoId: debt._id,
        type: 'transfer' as const,
        amount: debt.remainingAmount || debt.amount,
        description: debt.notes || `–î–æ–ª–≥ ${debt.supplierName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç'}`,
        date: debt.date || new Date().toISOString(),
        supplier: debt.supplierName || '–î–æ–ª–≥',
        inCashRegister: false,
        notes: debt.notes,
        createdAt: debt.createdAt || debt.date || new Date().toISOString(),
        category: '–î–æ–ª–≥',
        paymentMethod: 'debt',
        apiType: 'expense' as const,
        status: debt.status === 'paid' ? 'incassated' : 'active'
      }));
      
      console.log(`üí∞ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ ${debtsAsPayments.length} –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤ –≤ –ø–ª–∞—Ç–µ–∂–∏`);
      console.log('üí∞ –ü–µ—Ä–≤—ã–µ 2 –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–∞ –∫–∞–∫ –ø–ª–∞—Ç–µ–∂–∏:', debtsAsPayments.slice(0, 2));
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
      const allPayments = [...integratedPayments, ...debtsAsPayments];
      
      setPayments(allPayments);
              console.log(`üí∞ –ò—Ç–æ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${allPayments.length}`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –∏ —Å—Ç–∞—Ç—É—Å—É –∫–∞—Å—Å—ã
        const stats = allPayments.reduce((acc, p) => {
          const key = `${p.type}_${p.inCashRegister ? 'in' : 'out'}`;
          acc[key] = (acc[key] || 0) + 1;
          return acc;
        }, {} as Record<string, number>);
        console.log('üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Ç–∏–ø–∞–º –∏ –∫–∞—Å—Å–µ:', stats);
        
        if (showMessage) {
          message.success(`–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${apiPayments?.length || 0} –ø–ª–∞—Ç–µ–∂–µ–π + ${receiptsData?.length || 0} —á–µ–∫–æ–≤`);
        }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ API:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π');
    } finally {
      setLoadingPayments(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const loadPayments = async () => {
      setLoadingPayments(true);
      try {
        console.log('üí∞ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –∏ —á–µ–∫–∏ –∏–∑ API...');
        console.log('üí∞ BaseURL:', import.meta.env.VITE_API_URL || 'http://localhost:5002/api');
        console.log('üí∞ –¢–æ–∫–µ–Ω:', localStorage.getItem('admin_token')?.substring(0, 20) + '...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ API
        console.log('üí∞ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ API...');
        const apiPayments = await paymentsApi.getAll();
        console.log(`üí∞ –ü–æ–ª—É—á–µ–Ω–æ ${apiPayments?.length || 0} –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ API`);
        console.log('üí∞ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ apiPayments:', typeof apiPayments, Array.isArray(apiPayments));
        console.log('üí∞ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:', apiPayments);
        if (apiPayments && apiPayments.length > 0) {
          console.log('üí∞ –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ API:', apiPayments[0]);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫–∏ –∏–∑ API
        const receiptsData = await receiptsApi.getAll();
        console.log(`üí∞ –ü–æ–ª—É—á–µ–Ω–æ ${receiptsData?.length || 0} —á–µ–∫–æ–≤ –∏–∑ API`);
        console.log('üí∞ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ receiptsData:', typeof receiptsData, Array.isArray(receiptsData));
        
        // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –º–∞—Å—Å–∏–≤–∞–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
        const validApiPayments = Array.isArray(apiPayments) 
          ? apiPayments.map(payment => {
              // –ú–∞–ø–ø–∏–Ω–≥ paymentMethod –≤ type (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
              const typeMap: Record<string, 'cash' | 'transfer' | 'keb'> = {
                'cash': 'cash',
                'card': 'transfer', 
                'transfer': 'transfer',
                '–Ω–∞–ª–∏—á–Ω—ã–µ': 'cash',
                '–ø–µ—Ä–µ–≤–æ–¥': 'transfer',
                '–∫—ç–±': 'keb'
              };
              
              return {
                id: payment.id || payment._id, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º _id –≤ id
                mongoId: payment._id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º MongoDB _id –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
                type: typeMap[payment.paymentMethod] || typeMap[payment.type] || 'cash' as 'cash' | 'transfer' | 'keb', // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º paymentMethod –∏–ª–∏ type
                amount: payment.apiType === 'expense' ? -(Math.abs(payment.amount || 0)) : (payment.amount || 0), // –†–∞—Å—Ö–æ–¥—ã –¥–µ–ª–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏
                description: payment.description || '–ü–ª–∞—Ç–µ–∂',
                date: payment.date || new Date().toISOString(),
                supplier: payment.supplierName,
                inCashRegister: payment.inCashRegister || payment.paymentMethod === 'cash' || payment.paymentMethod === '–Ω–∞–ª–∏—á–Ω—ã–µ', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ API –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                cashRegisterDate: payment.cashRegisterDate || (payment.paymentMethod === 'cash' || payment.paymentMethod === '–Ω–∞–ª–∏—á–Ω—ã–µ' ? payment.date : undefined),
                notes: payment.notes,
                createdAt: payment.createdAt || payment.date || new Date().toISOString(),
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ API
                category: payment.category,
                paymentMethod: payment.paymentMethod,
                apiType: payment.apiType, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø –∏–∑ API
                status: payment.status,
                adminName: payment.adminName // –ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ API
              };
                         })
           : [];
           
        console.log('üí∞ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:', validApiPayments?.length || 0);
        if (validApiPayments && validApiPayments.length > 0) {
          console.log('üí∞ –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', validApiPayments[0]);
        }
           
        const validReceiptsData = Array.isArray(receiptsData) ? receiptsData : [];
        
        // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —á–µ–∫–∏ –≤ –ø–ª–∞—Ç–µ–∂–∏
        const integratedPayments = integrateReceiptsIntoPayments(validApiPayments, validReceiptsData);
        
        console.log('üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–µ–∫–æ–≤:', {
          input: validApiPayments?.length || 0,
          output: integratedPayments?.length || 0,
          isArray: Array.isArray(integratedPayments)
        });
        
        if (integratedPayments && integratedPayments.length > 0) {
          setPayments(integratedPayments);
          console.log(`üí∞ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${integratedPayments.length} –ø–ª–∞—Ç–µ–∂–µ–π (—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —á–µ–∫–æ–≤)`);
        } else {
          console.log('üí∞ API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç');
          console.log('üí∞ –î–µ—Ç–∞–ª–∏:', {
            apiPayments: apiPayments?.length || 0,
            receiptsData: validReceiptsData?.length || 0,
            integratedPayments: integratedPayments?.length || 0
          });
          console.log('üí∞ –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º API –≤–º–µ—Å—Ç–æ localStorage');
          console.log('üí∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ API –¥–∞–∂–µ –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç');
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∏–∑ API, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
          setPayments(integratedPayments || []);
          console.log(`üí∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${(integratedPayments || []).length}`);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ API:', error);
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
          message: error instanceof Error ? error.message : 'Unknown error',
          stack: error instanceof Error ? error.stack : 'No stack trace'
        });
        console.log('üí∞ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage –ø—Ä–∏ –æ—à–∏–±–∫–µ API - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É');
        setPayments([]);
        console.error('üí∞ API –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
      } finally {
        setLoadingPayments(false);
      }
    };

    loadPayments();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö —á–µ–∫–æ–≤
  useEffect(() => {
    const handleReceiptCreated = (e: CustomEvent) => {
      console.log('üí∞ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏...', e.detail);
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      setTimeout(() => {
        refreshPayments();
      }, 1000);
    };

    const handleReceiptDeleted = (e: CustomEvent) => {
      console.log('üí∞ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏...', e.detail);
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞
      refreshPayments();
    };

    const handleReceiptCancelled = (e: CustomEvent) => {
      console.log('üí∞ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã —á–µ–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏...', e.detail);
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã —á–µ–∫–∞
      refreshPayments();
    };

    const handlePaymentUpdated = (e: CustomEvent) => {
      console.log('üí∞ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:', e.detail);
      
      // –ù–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Å—Å—ã - —ç—Ç–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ
      if (e.detail?.type === 'cashRegisterToggle') {
        console.log('üí∞ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Å—Å—ã - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ');
        return;
      }
      
            // –ù–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ - —ç—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
      if (e.detail?.type === 'expense') {
        console.log('üí∞ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ');
        return;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
      setTimeout(() => {
        console.log('üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ–ª–≥–∞...');
        refreshPayments();
      }, 3000);
    };

    const handleExpenseCreated = (e: CustomEvent) => {
      console.log('üí∞ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', e.detail);
      if (e.detail?.payment) {
        const newExpense = e.detail.payment;
        console.log('üí∞ –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥ –ª–æ–∫–∞–ª—å–Ω–æ:', {
          id: newExpense.id,
          amount: newExpense.amount,
          apiType: newExpense.apiType,
          description: newExpense.description
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ
        setPayments(prevPayments => {
          const newPayments = [newExpense, ...prevPayments];
          console.log('üí∞ –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π:', newPayments.length);
          console.log('üí∞ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –∫–∞—Å—Å–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
          return newPayments;
        });
      }
    };

    const handleExpenseDeleted = (e: CustomEvent) => {
      console.log('üí∞ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', e.detail);
      if (e.detail?.expenseId) {
        const expenseId = e.detail.expenseId;
        console.log('üí∞ –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥ –ª–æ–∫–∞–ª—å–Ω–æ:', {
          id: expenseId,
          description: e.detail.description
        });
        
        // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ
        setPayments(prevPayments => {
          const newPayments = prevPayments.filter(p => p.id !== expenseId && p.mongoId !== expenseId);
          console.log('üí∞ –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π:', newPayments.length);
          console.log('üí∞ –†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –∫–∞—Å—Å–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
          return newPayments;
        });
      }
    };

    const handleRefundCreated = (e: CustomEvent) => {
      console.log('üí∞ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', e.detail);
      if (e.detail?.payment) {
        const refundPayment = e.detail.payment;
        console.log('üí∞ –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –ª–æ–∫–∞–ª—å–Ω–æ:', {
          id: refundPayment.id,
          amount: refundPayment.amount,
          apiType: refundPayment.apiType,
          description: refundPayment.description,
          inCashRegister: refundPayment.inCashRegister
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ
        setPayments(prevPayments => {
          const newPayments = [refundPayment, ...prevPayments];
          console.log('üí∞ –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π:', newPayments.length);
          console.log('üí∞ –í–æ–∑–≤—Ä–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –∫–∞—Å—Å–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
          return newPayments;
        });
      }
    };

    window.addEventListener('receiptCreated', handleReceiptCreated as EventListener);
    window.addEventListener('receiptDeleted', handleReceiptDeleted as EventListener);
    window.addEventListener('receiptCancelled', handleReceiptCancelled as EventListener);
    window.addEventListener('paymentUpdated', handlePaymentUpdated as EventListener);
    window.addEventListener('expenseCreated', handleExpenseCreated as EventListener);
    window.addEventListener('expenseDeleted', handleExpenseDeleted as EventListener);
    window.addEventListener('refundCreated', handleRefundCreated as EventListener);
    return () => {
      window.removeEventListener('receiptCreated', handleReceiptCreated as EventListener);
      window.removeEventListener('receiptDeleted', handleReceiptDeleted as EventListener);
      window.removeEventListener('receiptCancelled', handleReceiptCancelled as EventListener);
      window.removeEventListener('paymentUpdated', handlePaymentUpdated as EventListener);
      window.removeEventListener('expenseCreated', handleExpenseCreated as EventListener);
      window.removeEventListener('expenseDeleted', handleExpenseDeleted as EventListener);
      window.removeEventListener('refundCreated', handleRefundCreated as EventListener);
    };
  }, [refreshPayments]);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ API –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏

  return (
    <div>


      <Tabs
        activeKey={activeTab}
        onChange={setActiveTab}
        size="large"
        style={{ marginBottom: '24px' }}
        items={[
          {
            key: 'payments',
            label: (
              <span>
                <DollarOutlined />
                –û—Å–Ω–æ–≤–Ω–æ–µ
              </span>
            ),
            children: (
              <PaymentsTab 
                payments={payments} 
                setPayments={setPayments}
                refreshPayments={refreshPayments}
              />
            )
          },
          {
            key: 'expenses',
            label: (
              <span>
                <MinusCircleOutlined />
                –†–∞—Å—Ö–æ–¥—ã
              </span>
            ),
            children: <ExpensesTab />
          },
          {
            key: 'purchases',
            label: (
              <span>
                <ShoppingCartOutlined />
                –ü–æ–∫—É–ø–∫–∏
              </span>
            ),
            children: <PurchasesTab refreshPayments={refreshPayments} />
          }
        ]}
      />
    </div>
  );
};

export default Payments; 