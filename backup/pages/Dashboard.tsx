import React, { useEffect, useCallback, useMemo, useState } from 'react'
import { Row, Col, Card, Statistic, Typography, Badge, Button, Space, Tag, Tooltip, Avatar, Progress, Select, DatePicker, Tabs } from 'antd'
import { useQuery } from 'react-query'
import { useNavigate } from 'react-router-dom'
import {
  ShoppingCartOutlined,
  UserOutlined,
  ShoppingOutlined,
  DollarOutlined,
  ExclamationCircleOutlined,
  EyeOutlined,
  EditOutlined,
  ClockCircleOutlined,
  CheckCircleOutlined,
  PhoneOutlined,
  CloseOutlined,
  RiseOutlined,
  CalendarOutlined,
  BarChartOutlined,
  TrophyOutlined,
  LineChartOutlined,
  PieChartOutlined,
  AreaChartOutlined,
  SettingOutlined
} from '@ant-design/icons'
import { 
  LineChart, Line, AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell,
  XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, ResponsiveContainer,
  Legend, ComposedChart
} from 'recharts'
import { useOrderStats } from '../hooks/useOrderStats'

const { Title, Text } = Typography
const { Option } = Select
const { RangePicker } = DatePicker
const { TabPane } = Tabs

interface DashboardStats {
  totalOrders: number
  totalUsers: number
  totalProducts: number
  totalRevenue: number
  averageOrderValue: number
  activeUsers: number
  orderStatusStats: {
    pending?: number
    confirmed?: number
    processing?: number
    shipped?: number
    delivered?: number
    cancelled?: number
    with_courier?: number
  }
  today: {
    orders: number
    revenue: number
  }
  week: {
    orders: number
    revenue: number
  }
  month: {
    orders: number
    revenue: number
  }
  visitStats: Array<{
    _id: string
    count: number
  }>
  monthlyRevenue: Array<{
    _id: {
      year: number
      month: number
    }
    revenue: number
    orders: number
  }>
  yearlyRevenue: Array<{
    _id: {
      year: number
    }
    revenue: number
    orders: number
  }>
  weeklyStats: Array<{
    _id: number
    revenue: number
    orders: number
  }>
  hourlyStats: Array<{
    _id: number
    revenue: number
    orders: number
  }>
  dailyStats: Array<{
    _id: string
    revenue: number
    orders: number
  }>
}

async function fetchDashboardStats(): Promise<DashboardStats> {
  const token = localStorage.getItem('admin_token')
  if (!token) {
    throw new Error('No auth token')
  }

  const response = await fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/admin/dashboard`, {
    headers: {
      'Authorization': `Bearer ${token}`
    }
  })
  
  if (!response.ok) {
    if (response.status === 401) {
      localStorage.removeItem('admin_token')
      throw new Error('Unauthorized')
    }
    throw new Error('Failed to fetch dashboard stats')
  }
  
  return response.json()
}

const Dashboard: React.FC = () => {
  const navigate = useNavigate();
  const [selectedPeriod, setSelectedPeriod] = useState('month');
  const [selectedChart, setSelectedChart] = useState('revenue');
  
  const { data: stats, isLoading, error } = useQuery<DashboardStats>({
    queryKey: ['dashboardStats'],
    queryFn: fetchDashboardStats,
    retry: 1,
    retryDelay: 1000,
    enabled: !!localStorage.getItem('admin_token'),
  })

  const { data: orderStats } = useOrderStats()

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }, []);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
  const getStatusColor = useCallback((status: string) => {
    switch (status) {
      case 'pending': return 'orange';
      case 'confirmed': return 'blue';
      case 'processing': return 'purple';
      case 'shipped': return 'indigo';
      case 'delivered': return 'green';
      case 'cancelled': return 'red';
      case 'with_courier': return 'cyan';
      default: return 'default';
    }
  }, []);

  const getStatusText = useCallback((status: string) => {
    switch (status) {
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
      case 'confirmed': return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω';
      case 'processing': return '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ';
      case 'shipped': return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω';
      case 'delivered': return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω';
      case 'with_courier': return '–ü–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É';
      default: return status;
    }
  }, []);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
  const formatCurrency = useCallback((amount: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0
    }).format(amount);
  }, []);

  const formatNumber = useCallback((num: number) => {
    return new Intl.NumberFormat('ru-RU').format(num);
  }, []);

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const visitChartData = useMemo(() => {
    if (!stats?.visitStats) return [];
    return stats.visitStats.map(item => ({
      date: item._id,
      visits: item.count
    }));
  }, [stats?.visitStats]);

  const monthlyChartData = useMemo(() => {
    if (!stats?.monthlyRevenue) return [];
    return stats.monthlyRevenue.map(item => ({
      month: `${item._id.year}-${String(item._id.month).padStart(2, '0')}`,
      revenue: item.revenue,
      orders: item.orders
    }));
  }, [stats?.monthlyRevenue]);

  const yearlyChartData = useMemo(() => {
    if (!stats?.yearlyRevenue) return [];
    return stats.yearlyRevenue.map(item => ({
      year: item._id.year,
      revenue: item.revenue,
      orders: item.orders
    }));
  }, [stats?.yearlyRevenue]);

  const weeklyChartData = useMemo(() => {
    if (!stats?.weeklyStats) return [];
    const dayNames = ['', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    return stats.weeklyStats.map(item => ({
      day: dayNames[item._id] || `–î–µ–Ω—å ${item._id}`,
      revenue: item.revenue,
      orders: item.orders
    }));
  }, [stats?.weeklyStats]);

  const hourlyChartData = useMemo(() => {
    if (!stats?.hourlyStats) return [];
    return stats.hourlyStats.map(item => ({
      hour: `${item._id}:00`,
      revenue: item.revenue,
      orders: item.orders
    }));
  }, [stats?.hourlyStats]);

  const dailyChartData = useMemo(() => {
    if (!stats?.dailyStats) return [];
    return stats.dailyStats.map(item => ({
      date: item._id,
      revenue: item.revenue,
      orders: item.orders
    }));
  }, [stats?.dailyStats]);

  const pieChartData = useMemo(() => {
    if (!stats?.orderStatusStats) return [];
    return Object.entries(stats.orderStatusStats).map(([status, count]) => ({
      name: getStatusText(status),
      value: count,
      color: getStatusColor(status)
    }));
  }, [stats?.orderStatusStats, getStatusText, getStatusColor]);

  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D', '#FFC658'];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—ã—Ä—É—á–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  const getRevenueData = useCallback(() => {
    const now = new Date();
    
    switch (selectedPeriod) {
      case 'day':
        // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è
        const today = now.toISOString().split('T')[0];
        return dailyChartData.filter(item => item.date === today);
      case 'week':
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        return dailyChartData.filter(item => {
          const itemDate = new Date(item.date);
          return itemDate >= weekAgo;
        });
      case 'month':
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
        return dailyChartData.filter(item => {
          const itemDate = new Date(item.date);
          return itemDate >= monthAgo;
        });
      case 'year':
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        return monthlyChartData;
      default:
        return dailyChartData;
    }
  }, [dailyChartData, selectedPeriod, monthlyChartData]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º
  const getDailyStatsData = useCallback(() => {
    if (!dailyChartData.length) return [];
    
    const now = new Date();
    
    switch (selectedPeriod) {
      case 'day':
        // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è
        const today = now.toISOString().split('T')[0];
        return dailyChartData.filter(item => item.date === today);
      case 'week':
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        return dailyChartData.filter(item => {
          const itemDate = new Date(item.date);
          return itemDate >= weekAgo;
        });
      case 'month':
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
        return dailyChartData.filter(item => {
          const itemDate = new Date(item.date);
          return itemDate >= monthAgo;
        });
      case 'year':
        // –î–ª—è –≥–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        return monthlyChartData;
      default:
        return dailyChartData;
    }
  }, [dailyChartData, selectedPeriod, monthlyChartData]);

  if (isLoading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
  }

  if (error) {
    return <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {(error as Error).message}</div>
  }

  return (
    <div style={{ padding: '24px' }}>
      <div style={{ marginBottom: '24px' }}>
        <Title level={2} style={{ margin: 0, color: '#1f1f1f' }}>
          üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        </Title>
        <Text type="secondary">
          –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        </Text>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Row gutter={[16, 16]} style={{ marginBottom: '24px' }}>
        <Col xs={24} sm={12} lg={6}>
          <Card 
            style={{ 
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              border: 'none',
              borderRadius: '12px'
            }}
            bodyStyle={{ padding: '20px' }}
          >
            <Statistic
              title={<span style={{ color: 'white', fontSize: '14px' }}>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</span>}
              value={stats?.totalOrders || 0}
              valueStyle={{ color: 'white', fontSize: '28px', fontWeight: 'bold' }}
              prefix={<ShoppingCartOutlined style={{ color: 'white' }} />}
            />
          </Card>
        </Col>
        
        <Col xs={24} sm={12} lg={6}>
          <Card 
            style={{ 
              background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
              border: 'none',
              borderRadius: '12px'
            }}
            bodyStyle={{ padding: '20px' }}
          >
            <Statistic
              title={<span style={{ color: 'white', fontSize: '14px' }}>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞</span>}
              value={formatCurrency(stats?.totalRevenue || 0)}
              valueStyle={{ color: 'white', fontSize: '24px', fontWeight: 'bold' }}
              prefix={<DollarOutlined style={{ color: 'white' }} />}
            />
          </Card>
        </Col>
        
        <Col xs={24} sm={12} lg={6}>
          <Card 
            style={{ 
              background: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',
              border: 'none',
              borderRadius: '12px'
            }}
            bodyStyle={{ padding: '20px' }}
          >
            <Statistic
              title={<span style={{ color: 'white', fontSize: '14px' }}>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</span>}
              value={stats?.totalUsers || 0}
              valueStyle={{ color: 'white', fontSize: '28px', fontWeight: 'bold' }}
              prefix={<UserOutlined style={{ color: 'white' }} />}
            />
          </Card>
        </Col>
        
        <Col xs={24} sm={12} lg={6}>
          <Card 
            style={{ 
              background: 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)',
              border: 'none',
              borderRadius: '12px'
            }}
            bodyStyle={{ padding: '20px' }}
          >
            <Statistic
              title={<span style={{ color: 'white', fontSize: '14px' }}>–¢–æ–≤–∞—Ä—ã</span>}
              value={stats?.totalProducts || 0}
              valueStyle={{ color: 'white', fontSize: '28px', fontWeight: 'bold' }}
              prefix={<ShoppingOutlined style={{ color: 'white' }} />}
            />
          </Card>
        </Col>
      </Row>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ */}
      <Row gutter={[16, 16]} style={{ marginBottom: '24px' }}>
        <Col xs={24}>
          <Card style={{ borderRadius: '12px' }}>
            <Space wrap>
              <Text strong>–ü–µ—Ä–∏–æ–¥:</Text>
              <Select 
                value={selectedPeriod} 
                onChange={setSelectedPeriod}
                style={{ width: 120 }}
              >
                <Option value="day">–î–µ–Ω—å</Option>
                <Option value="week">–ù–µ–¥–µ–ª—è</Option>
                <Option value="month">–ú–µ—Å—è—Ü</Option>
                <Option value="year">–ì–æ–¥</Option>
              </Select>
              
              <Text strong>–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:</Text>
              <Select 
                value={selectedChart} 
                onChange={setSelectedChart}
                style={{ width: 120 }}
              >
                <Option value="revenue">–í—ã—Ä—É—á–∫–∞</Option>
                <Option value="orders">–ó–∞–∫–∞–∑—ã</Option>
                <Option value="visits">–ü–æ—Å–µ—â–µ–Ω–∏—è</Option>
              </Select>
            </Space>
          </Card>
        </Col>
      </Row>

      {/* –ì—Ä–∞—Ñ–∏–∫–∏ */}
      <Tabs defaultActiveKey="1" style={{ marginBottom: '24px' }}>
        <TabPane tab={<span><LineChartOutlined /> –í—ã—Ä—É—á–∫–∞</span>} key="1">
          <Card style={{ borderRadius: '12px' }}>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={getRevenueData()}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey={selectedPeriod === 'year' ? 'month' : 'date'} />
                <YAxis />
                <RechartsTooltip 
                  formatter={(value: number) => [formatCurrency(value), '–í—ã—Ä—É—á–∫–∞']}
                  labelFormatter={(label) => {
                    if (selectedPeriod === 'year') return `–ú–µ—Å—è—Ü: ${label}`;
                    if (selectedPeriod === 'month') return `–î–µ–Ω—å: ${label}`;
                    if (selectedPeriod === 'week') return `–î–µ–Ω—å: ${label}`;
                    return `–î–∞—Ç–∞: ${label}`;
                  }}
                />
                <Legend />
                <Line 
                  type="monotone" 
                  dataKey="revenue" 
                  stroke="#8884d8" 
                  strokeWidth={2}
                  dot={{ fill: '#8884d8', strokeWidth: 2, r: 4 }}
                />
              </LineChart>
            </ResponsiveContainer>
          </Card>
        </TabPane>

        <TabPane tab={<span><AreaChartOutlined /> –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å</span>} key="2">
          <Card style={{ borderRadius: '12px' }}>
            <ResponsiveContainer width="100%" height={300}>
              <AreaChart data={visitChartData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <RechartsTooltip 
                  formatter={(value: number) => [value, '–ü–æ—Å–µ—â–µ–Ω–∏–π']}
                  labelFormatter={(label) => `–î–∞—Ç–∞: ${label}`}
                />
                <Legend />
                <Area 
                  type="monotone" 
                  dataKey="visits" 
                  stroke="#82ca9d" 
                  fill="#82ca9d" 
                  fillOpacity={0.6}
                />
              </AreaChart>
            </ResponsiveContainer>
          </Card>
        </TabPane>

        <TabPane tab={<span><BarChartOutlined /> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</span>} key="3">
          <Card style={{ borderRadius: '12px' }}>
            <ResponsiveContainer width="100%" height={300}>
              <ComposedChart data={weeklyChartData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="day" />
                <YAxis yAxisId="left" />
                <YAxis yAxisId="right" orientation="right" />
                <RechartsTooltip 
                  formatter={(value: number, name: string) => [
                    name === 'revenue' ? formatCurrency(value) : value,
                    name === 'revenue' ? '–í—ã—Ä—É—á–∫–∞' : '–ó–∞–∫–∞–∑—ã'
                  ]}
                />
                <Legend />
                <Bar yAxisId="left" dataKey="orders" fill="#8884d8" />
                <Line yAxisId="right" type="monotone" dataKey="revenue" stroke="#82ca9d" strokeWidth={2} />
              </ComposedChart>
            </ResponsiveContainer>
          </Card>
        </TabPane>

        <TabPane tab={<span><PieChartOutlined /> –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤</span>} key="4">
          <Card style={{ borderRadius: '12px' }}>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={pieChartData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, percent }) => `${name} ${((percent || 0) * 100).toFixed(0)}%`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {pieChartData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <RechartsTooltip 
                  formatter={(value: number) => [value, '–ó–∞–∫–∞–∑–æ–≤']}
                />
              </PieChart>
            </ResponsiveContainer>
          </Card>
        </TabPane>

        <TabPane tab={<span><BarChartOutlined /> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º</span>} key="5">
          <Card style={{ borderRadius: '12px' }}>
            <ResponsiveContainer width="100%" height={300}>
              <ComposedChart data={getDailyStatsData()}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey={selectedPeriod === 'year' ? 'month' : 'date'} />
                <YAxis yAxisId="left" />
                <YAxis yAxisId="right" orientation="right" />
                <RechartsTooltip 
                  formatter={(value: number, name: string) => [
                    name === 'revenue' ? formatCurrency(value) : value,
                    name === 'revenue' ? '–í—ã—Ä—É—á–∫–∞' : '–ó–∞–∫–∞–∑—ã'
                  ]}
                  labelFormatter={(label) => {
                    if (selectedPeriod === 'year') return `–ú–µ—Å—è—Ü: ${label}`;
                    return `–î–∞—Ç–∞: ${label}`;
                  }}
                />
                <Legend />
                <Bar yAxisId="left" dataKey="orders" fill="#8884d8" />
                <Line yAxisId="right" type="monotone" dataKey="revenue" stroke="#82ca9d" strokeWidth={2} />
              </ComposedChart>
            </ResponsiveContainer>
          </Card>
        </TabPane>
      </Tabs>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Row gutter={[16, 16]} style={{ marginBottom: '24px' }}>
        <Col xs={24} sm={12} lg={8}>
          <Card 
            title={
              <Space>
                <CalendarOutlined />
                <span>–°–µ–≥–æ–¥–Ω—è</span>
              </Space>
            }
            style={{ borderRadius: '12px' }}
          >
            <Row gutter={16}>
              <Col span={12}>
                <Statistic
                  title="–ó–∞–∫–∞–∑–æ–≤"
                  value={stats?.today.orders || 0}
                  valueStyle={{ color: '#1890ff', fontSize: '24px' }}
                />
              </Col>
              <Col span={12}>
                <Statistic
                  title="–í—ã—Ä—É—á–∫–∞"
                  value={formatCurrency(stats?.today.revenue || 0)}
                  valueStyle={{ color: '#52c41a', fontSize: '20px' }}
                />
              </Col>
            </Row>
          </Card>
        </Col>
        
        <Col xs={24} sm={12} lg={8}>
          <Card 
            title={
              <Space>
                <RiseOutlined />
                <span>–ó–∞ –Ω–µ–¥–µ–ª—é</span>
              </Space>
            }
            style={{ borderRadius: '12px' }}
          >
            <Row gutter={16}>
              <Col span={12}>
                <Statistic
                  title="–ó–∞–∫–∞–∑–æ–≤"
                  value={stats?.week.orders || 0}
                  valueStyle={{ color: '#1890ff', fontSize: '24px' }}
                />
              </Col>
              <Col span={12}>
                <Statistic
                  title="–í—ã—Ä—É—á–∫–∞"
                  value={formatCurrency(stats?.week.revenue || 0)}
                  valueStyle={{ color: '#52c41a', fontSize: '20px' }}
                />
              </Col>
            </Row>
          </Card>
        </Col>
        
        <Col xs={24} sm={12} lg={8}>
          <Card 
            title={
              <Space>
                <BarChartOutlined />
                <span>–ó–∞ –º–µ—Å—è—Ü</span>
              </Space>
            }
            style={{ borderRadius: '12px' }}
          >
            <Row gutter={16}>
              <Col span={12}>
                <Statistic
                  title="–ó–∞–∫–∞–∑–æ–≤"
                  value={stats?.month.orders || 0}
                  valueStyle={{ color: '#1890ff', fontSize: '24px' }}
                />
              </Col>
              <Col span={12}>
                <Statistic
                  title="–í—ã—Ä—É—á–∫–∞"
                  value={formatCurrency(stats?.month.revenue || 0)}
                  valueStyle={{ color: '#52c41a', fontSize: '20px' }}
                />
              </Col>
            </Row>
          </Card>
        </Col>
      </Row>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Row gutter={[16, 16]}>
        <Col xs={24} lg={12}>
          <Card 
            title={
              <Space>
                <TrophyOutlined />
                <span>–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</span>
              </Space>
            }
            style={{ borderRadius: '12px' }}
          >
            <Row gutter={[16, 16]}>
              <Col span={12}>
                <Statistic
                  title="–°—Ä–µ–¥–Ω–∏–π —á–µ–∫"
                  value={formatCurrency(stats?.averageOrderValue || 0)}
                  valueStyle={{ color: '#722ed1', fontSize: '20px' }}
                />
              </Col>
              <Col span={12}>
                <Statistic
                  title="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
                  value={stats?.activeUsers || 0}
                  valueStyle={{ color: '#13c2c2', fontSize: '20px' }}
                />
              </Col>
            </Row>
          </Card>
        </Col>
        
        <Col xs={24} lg={12}>
          <Card 
            title={
              <Space>
                <CheckCircleOutlined />
                <span>–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤</span>
              </Space>
            }
            style={{ borderRadius: '12px' }}
          >
            <Space direction="vertical" style={{ width: '100%' }}>
              {stats?.orderStatusStats && Object.entries(stats.orderStatusStats).map(([status, count]) => (
                <div key={status} style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <Space>
                    <Badge color={getStatusColor(status)} />
                    <Text>{getStatusText(status)}</Text>
                  </Space>
                  <Text strong>{count}</Text>
                </div>
              ))}
            </Space>
          </Card>
        </Col>
      </Row>

      {/* –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ */}
      <Row gutter={[16, 16]} style={{ marginTop: '24px' }}>
        <Col xs={24}>
          <Card style={{ borderRadius: '12px' }}>
            <Title level={4} style={{ marginBottom: '16px' }}>
              üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            </Title>
            <Space wrap>
              <Button 
                type="primary" 
                icon={<ShoppingCartOutlined />}
                onClick={() => navigate('/orders')}
                size="large"
              >
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
              </Button>
              <Button 
                icon={<UserOutlined />}
                onClick={() => navigate('/users')}
                size="large"
              >
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
              </Button>
              <Button 
                icon={<ShoppingOutlined />}
                onClick={() => navigate('/products')}
                size="large"
              >
                –¢–æ–≤–∞—Ä—ã
              </Button>
              <Button 
                icon={<EditOutlined />}
                onClick={() => navigate('/categories')}
                size="large"
              >
                –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
              </Button>
            </Space>
          </Card>
        </Col>
      </Row>
    </div>
  )
}

export default Dashboard 