const fetch = require('node-fetch');
require('dotenv').config();

async function getCdekToken() {
  try {
    const response = await fetch('https://api.cdek.ru/v2/oauth/token?parameters', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: new URLSearchParams({
        grant_type: 'client_credentials',
        client_id: process.env.CDEK_CLIENT_ID || 'EMscd6r9JnFiQ3bLoyjJY6eM78JrJceI',
        client_secret: process.env.CDEK_CLIENT_SECRET || 'PjLZPKBgI86kgKNzZI0'
      })
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${response.status}`);
    }

    const data = await response.json();
    return data.access_token;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    return null;
  }
}

async function debugCdekSearch() {
  try {
    console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –ü–í–ó –≤ CDEK API...');
    
    const token = await getCdekToken();
    if (!token) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω');
      return;
    }
    
    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –∏–∑ –∑–∞–∫–∞–∑–∞
    const testAddress = '163020, –†–æ—Å—Å–∏—è, –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫, —É–ª. –¢–µ—Ä–µ—Ö–∏–Ω–∞, 5';
    console.log('\nüìã –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:', testAddress);
    
    // 1. –ò—â–µ–º –≥–æ—Ä–æ–¥ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫
    console.log('\nüèôÔ∏è –®–∞–≥ 1: –ò—â–µ–º –≥–æ—Ä–æ–¥ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫');
    const cityResponse = await fetch('https://api.cdek.ru/v2/location/cities?city=–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (cityResponse.ok) {
      const cities = await cityResponse.json();
      console.log('üèôÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:', cities.length);
      cities.forEach((city, index) => {
        console.log(`  ${index + 1}. ${city.city} (–∫–æ–¥: ${city.code})`);
      });
      
      if (cities.length > 0) {
        const cityCode = cities[0].code;
        console.log('üèôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –≥–æ—Ä–æ–¥–∞:', cityCode);
        
        // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ü–í–ó –≤ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–µ
        console.log('\nüè™ –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ü–í–ó –≤ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–µ');
        const pvzResponse = await fetch(`https://api.cdek.ru/v2/deliverypoints?city_code=${cityCode}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (pvzResponse.ok) {
          const pvzList = await pvzResponse.json();
          console.log('üè™ –í—Å–µ–≥–æ –ü–í–ó –≤ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–µ:', pvzList.length);
          
          // 3. –ò—â–µ–º –ü–í–ó —Å —É–ª–∏—Ü–µ–π –¢–µ—Ä–µ—Ö–∏–Ω–∞
          console.log('\nüìç –®–∞–≥ 3: –ò—â–µ–º –ü–í–ó —Å —É–ª–∏—Ü–µ–π –¢–µ—Ä–µ—Ö–∏–Ω–∞');
          const terekhinaPvz = pvzList.filter(pvz => 
            pvz.name?.toLowerCase().includes('—Ç–µ—Ä–µ—Ö–∏–Ω–∞') ||
            pvz.address?.toLowerCase().includes('—Ç–µ—Ä–µ—Ö–∏–Ω–∞')
          );
          
          console.log('üìç –ü–í–ó —Å —É–ª–∏—Ü–µ–π –¢–µ—Ä–µ—Ö–∏–Ω–∞:', terekhinaPvz.length);
          terekhinaPvz.forEach((pvz, index) => {
            console.log(`  ${index + 1}. ${pvz.name} (${pvz.code})`);
            console.log(`     –ê–¥—Ä–µ—Å: ${pvz.address}`);
            console.log(`     –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: ${pvz.work_time}`);
            console.log('');
          });
          
          // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ü–í–ó –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          console.log('\nüìã –®–∞–≥ 4: –í—Å–µ –ü–í–ó –≤ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
          pvzList.forEach((pvz, index) => {
            console.log(`${index + 1}. ${pvz.name} (${pvz.code})`);
            console.log(`   –ê–¥—Ä–µ—Å: ${pvz.address}`);
            console.log(`   –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: ${pvz.work_time}`);
            console.log('');
          });
          
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ü–í–ó:', pvzResponse.status);
        }
      }
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞:', cityResponse.status);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

debugCdekSearch(); 