const mongoose = require('mongoose');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/technoline-store', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// –°—Ö–µ–º–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
const deliveryMethodSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: { type: String, required: true },
  type: { 
    type: String, 
    required: true, 
    enum: ['pickup', 'courier', 'cdek', 'urgent'] 
  },
  price: { type: Number, default: 0 },
  isActive: { type: Boolean, default: true },
  order: { type: Number, default: 0 },
  conditions: { type: String },
  workingHours: { type: String },
  address: { type: String },
  restrictions: { type: String }
}, {
  timestamps: true
});

const DeliveryMethod = mongoose.model('DeliveryMethod', deliveryMethodSchema);

async function debugDeliveryMethods() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫:', process.env.MONGODB_URI || 'mongodb://localhost:27017/technoline-store');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    const allMethods = await DeliveryMethod.find({});
    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ ${allMethods.length} –º–µ—Ç–æ–¥–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏:`);
    
    allMethods.forEach((method, index) => {
      console.log(`${index + 1}. ${method.name} - ${method.price}‚ÇΩ (${method.type})`);
      console.log(`   ID: ${method._id}`);
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${method.isActive}`);
      console.log(`   –ü–æ—Ä—è–¥–æ–∫: ${method.order}`);
      console.log('   ---');
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    const activeMethods = await DeliveryMethod.find({ isActive: true });
    console.log(`\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: ${activeMethods.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    const inactiveMethods = await DeliveryMethod.find({ isActive: false });
    console.log(`‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: ${inactiveMethods.length}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:', error);
  } finally {
    mongoose.connection.close();
  }
}

debugDeliveryMethods(); 