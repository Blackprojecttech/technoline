const mongoose = require('mongoose');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/techno-line');
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
};

// –ú–æ–¥–µ–ª—å –¥–æ–ª–≥–∞
const debtSchema = new mongoose.Schema({
  id: { type: String, required: true, unique: true },
  arrivalId: { type: String, required: true },
  supplierId: { type: String, required: true },
  supplierName: { type: String, required: true },
  amount: { type: Number, required: true },
  paidAmount: { type: Number, default: 0 },
  remainingAmount: { type: Number, required: true },
  date: { type: Date, required: true },
  status: { type: String, enum: ['active', 'partially_paid', 'paid', 'overdue'], default: 'active' },
  notes: { type: String },
  items: [{}],
  createdBy: { type: String, required: true }
}, { timestamps: true });

const Debt = mongoose.model('Debt', debtSchema);

async function cleanClientDebts() {
  try {
    await connectDB();
    
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–æ–ª–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Debt...');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–æ–ª–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –∏–∑ —á–µ–∫–æ–≤
    // –≠—Ç–æ –¥–æ–ª–≥–∏ —Å supplierId = 'client' –∏–ª–∏ arrivalId –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å 'receipt_'
    const clientDebts = await Debt.find({
      $or: [
        { supplierId: 'client' },
        { arrivalId: { $regex: /^receipt_/ } },
        { id: { $regex: /^debt_receipt_/ } }
      ]
    });
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${clientDebts.length} –¥–æ–ª–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`, 
      clientDebts.map(debt => ({
        id: debt.id,
        supplierName: debt.supplierName,
        amount: debt.amount,
        notes: debt.notes
      }))
    );
    
    if (clientDebts.length > 0) {
      // –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
      const result = await Debt.deleteMany({
        $or: [
          { supplierId: 'client' },
          { arrivalId: { $regex: /^receipt_/ } },
          { id: { $regex: /^debt_receipt_/ } }
        ]
      });
      
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} –¥–æ–ª–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Debt`);
      console.log('üí° –¢–µ–ø–µ—Ä—å –¥–æ–ª–≥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –ø–ª–∞—Ç–µ–∂–µ–π');
    } else {
      console.log('‚úÖ –î–æ–ª–≥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ Debt');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –¥–æ–ª–≥–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
    const remainingDebts = await Debt.find({});
    console.log(`üìä –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–æ–ª–≥–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º: ${remainingDebts.length}`);
    
    mongoose.connection.close();
    console.log('üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–æ–ª–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
    process.exit(1);
  }
}

cleanClientDebts(); 