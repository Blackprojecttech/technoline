import express from 'express';
import { Receipt } from '../models/Receipt';
import { Payment } from '../models/Payment';
import { Arrival } from '../models/Arrival';
import { auth } from '../middleware/auth';
import { admin } from '../middleware/admin';

const router = express.Router();

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —á–µ–∫–∏
router.get('/', auth, admin, async (req, res) => {
  try {
    const { status, dateFrom, dateTo, search, paymentMethod } = req.query;
    
    let query: any = {};
    if (status && status !== 'all') {
      query.status = status;
    }
    if (paymentMethod && paymentMethod !== 'all') {
      query.paymentMethod = paymentMethod;
    }
    if (dateFrom && dateTo) {
      query.date = {
        $gte: new Date(dateFrom as string),
        $lte: new Date(dateTo as string)
      };
    }
    if (search) {
      query.$or = [
        { receiptNumber: { $regex: search, $options: 'i' } },
        { customerName: { $regex: search, $options: 'i' } },
        { customerPhone: { $regex: search, $options: 'i' } },
        { 'items.productName': { $regex: search, $options: 'i' } }
      ];
    }

    const receipts = await Receipt.find(query).sort({ date: -1 });
    return res.json(receipts);
  } catch (error) {
    console.error('Error fetching receipts:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–∫–æ–≤' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫ –ø–æ ID
router.get('/:id', auth, admin, async (req, res) => {
  try {
    const receipt = await Receipt.findById(req.params.id);
    if (!receipt) {
      return res.status(404).json({ error: '–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    return res.json(receipt);
  } catch (error) {
    console.error('Error fetching receipt:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–∫–∞' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ–∫
router.post('/', auth, admin, async (req, res) => {
  try {
    console.log('üßæ POST /api/receipts - –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞:', {
      isDebt: req.body.isDebt,
      customerName: req.body.customerName,
      total: req.body.total
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—Ä–∏—Ö–æ–¥–∞—Ö
    if (req.body.items && req.body.items.length > 0) {
      const unavailableItems = [];
      
      for (const item of req.body.items) {
        if (item.arrivalId) {
          const arrival = await Arrival.findById(item.arrivalId);
          if (!arrival) {
            const itemDescription = item.serialNumber 
              ? `"${item.productName}" (S/N: ${item.serialNumber})`
              : `"${item.productName}" (${item.quantity} —à—Ç.)`;
            
            unavailableItems.push(`‚Ä¢ ${itemDescription} - –ø—Ä–∏—Ö–æ–¥ –±—ã–ª —É–¥–∞–ª–µ–Ω`);
            continue;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –ø—Ä–∏—Ö–æ–¥–µ
          const arrivalItem = arrival.items.find(arrItem => {
            if (item.serialNumber) {
              // –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–µ—Ä–∏–π–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
              return arrItem.productName === item.productName && 
                     arrItem.serialNumbers && 
                     arrItem.serialNumbers.includes(item.serialNumber);
            } else {
              // –î–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥
              return arrItem.productName === item.productName &&
                     arrItem.isAccessory === item.isAccessory &&
                     arrItem.isService === item.isService;
            }
          });

          if (!arrivalItem) {
            const itemDescription = item.serialNumber 
              ? `"${item.productName}" (S/N: ${item.serialNumber})`
              : `"${item.productName}" (${item.quantity} —à—Ç.)`;
            
            unavailableItems.push(`‚Ä¢ ${itemDescription} - —Ç–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–∏—Ö–æ–¥–µ`);
          } else {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–∏—Ö–æ–¥–µ
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –≤ –ø—Ä–∏—Ö–æ–¥–µ
            if (Math.abs(arrivalItem.price - item.price) > 0.01) {
              const itemDescription = item.serialNumber 
                ? `"${item.productName}" (S/N: ${item.serialNumber})`
                : `"${item.productName}"`;
              
              unavailableItems.push(`‚Ä¢ ${itemDescription} - —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å (–±—ã–ª–∞: ${item.price} ‚ÇΩ, —Å—Ç–∞–ª–∞: ${arrivalItem.price} ‚ÇΩ)`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
            if (Math.abs(arrivalItem.costPrice - item.costPrice) > 0.01) {
              const itemDescription = item.serialNumber 
                ? `"${item.productName}" (S/N: ${item.serialNumber})`
                : `"${item.productName}"`;
              
              unavailableItems.push(`‚Ä¢ ${itemDescription} - —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å (–±—ã–ª–∞: ${item.costPrice} ‚ÇΩ, —Å—Ç–∞–ª–∞: ${arrivalItem.costPrice} ‚ÇΩ)`);
            }
            
            // –î–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if (!item.serialNumber && (item.isAccessory || item.isService)) {
              if (arrivalItem.quantity < item.quantity) {
                unavailableItems.push(`‚Ä¢ "${item.productName}" - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–æ—Å—Ç—É–ø–Ω–æ: ${arrivalItem.quantity}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${item.quantity})`);
              }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if (arrivalItem.supplierId && item.supplierId && arrivalItem.supplierId !== item.supplierId) {
              const itemDescription = item.serialNumber 
                ? `"${item.productName}" (S/N: ${item.serialNumber})`
                : `"${item.productName}"`;
              
              unavailableItems.push(`‚Ä¢ ${itemDescription} - –ø–æ—Å—Ç–∞–≤—â–∏–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è –≤ –ø—Ä–∏—Ö–æ–¥–µ`);
            }
          }
        } else {
          // –¢–æ–≤–∞—Ä –±–µ–∑ arrivalId
          const itemDescription = item.serialNumber 
            ? `"${item.productName}" (S/N: ${item.serialNumber})`
            : `"${item.productName}" (${item.quantity} —à—Ç.)`;
          
          unavailableItems.push(`‚Ä¢ ${itemDescription} - —Ç–æ–≤–∞—Ä –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–∏—Ö–æ–¥—É`);
        }
      }
      
      if (unavailableItems.length > 0) {
        const errorMessage = `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫. –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å:\n\n${unavailableItems.join('\n')}\n\n–û–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ —á–µ–∫ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.`;
        
        return res.status(400).json({ 
          error: errorMessage
        });
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —á–µ–∫–∞
    const lastReceipt = await Receipt.findOne().sort({ createdAt: -1 });
    const lastNumber = lastReceipt?.receiptNumber 
      ? parseInt(lastReceipt.receiptNumber.replace('R-', '')) 
      : 0;
    const receiptNumber = `R-${String(lastNumber + 1).padStart(6, '0')}`;

    const receiptData = {
      ...req.body,
      receiptNumber,
      createdBy: (req as any).user.id
    };
    
    const receipt = new Receipt(receiptData);
    await receipt.save();

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –≤ –¥–æ–ª–≥
    if (receipt.isDebt) {
      const customerName = receipt.customerName || '–ö–ª–∏–µ–Ω—Ç (–∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ)';
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–µ—Ä–∏–π–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      const itemsDescription = receipt.items.map(item => {
        let description = `${item.productName}`;
        if (item.serialNumber) {
          description += ` (S/N: ${item.serialNumber})`;
        }
        return description;
      }).join(', ');
      
      console.log(`üí∞ –°–æ–∑–¥–∞–Ω –¥–æ–ª–≥ –¥–ª—è —á–µ–∫–∞ ${receiptNumber}:`, {
        customerName: customerName,
        amount: receipt.total,
        items: itemsDescription
      });
    }

    return res.status(201).json(receipt);
  } catch (error) {
    console.error('Error creating receipt:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —á–µ–∫
router.put('/:id', auth, admin, async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π —á–µ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const oldReceipt = await Receipt.findById(req.params.id);
    if (!oldReceipt) {
      return res.status(404).json({ error: '–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ–∫
    const receipt = await Receipt.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );

    // –ï—Å–ª–∏ —á–µ–∫ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è (status –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 'cancelled'), —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    const wasCancelled = oldReceipt.status !== 'cancelled' && req.body.status === 'cancelled';
    if (wasCancelled) {
      console.log(`üóëÔ∏è –ß–µ–∫ ${receipt!.receiptNumber} –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è, —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏...`);
      
      // –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —á–µ–∫–æ–º –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ payments
      const deletedPayments = await Payment.deleteMany({ 
        $or: [
          { description: { $regex: `–ß–µ–∫ ${receipt!.receiptNumber}` } },
          { id: { $regex: `^receipt_${req.params.id}_` } }
        ]
      });
      
      if (deletedPayments.deletedCount > 0) {
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deletedPayments.deletedCount} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∞ ${receipt!.receiptNumber}`);
      }
    }

    return res.json(receipt);
  } catch (error) {
    console.error('Error updating receipt:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ–∫–∞' });
  }
});

// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —á–µ–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤) - –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–ï–†–ï–î /:id
router.delete('/clear-all', auth, admin, async (req, res) => {
  try {
    console.log('üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —á–µ–∫–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', (req as any).user);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    const userRole = (req as any).user.role;
    if (userRole !== 'admin' && userRole !== 'accountant') {
      return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä –º–æ–∂–µ—Ç –æ—á–∏—â–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const count = await Receipt.countDocuments();
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —á–µ–∫–∏
    const result = await Receipt.deleteMany({});
    
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —á–µ–∫–æ–≤ –∏–∑ ${count}`);
    
    return res.json({ 
      message: '–í—Å–µ —á–µ–∫–∏ —É–¥–∞–ª–µ–Ω—ã',
      deletedCount: result.deletedCount,
      totalCount: count
    });
  } catch (error) {
    console.error('Error clearing all receipts:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —á–µ–∫–æ–≤' });
  }
});

// –£–¥–∞–ª–∏—Ç—å —á–µ–∫
router.delete('/:id', auth, admin, async (req, res) => {
  try {
    const receipt = await Receipt.findByIdAndDelete(req.params.id);
    if (!receipt) {
      return res.status(404).json({ error: '–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    return res.json({ message: '–ß–µ–∫ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('Error deleting receipt:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ–∫–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–µ–∫–∞–º
router.get('/stats/summary', auth, admin, async (req, res) => {
  try {
    const { dateFrom, dateTo } = req.query;
    
    let dateFilter: any = {};
    if (dateFrom && dateTo) {
      dateFilter = {
        date: {
          $gte: new Date(dateFrom as string),
          $lte: new Date(dateTo as string)
        }
      };
    }

    const stats = await Receipt.aggregate([
      { $match: { status: 'completed', ...dateFilter } },
      {
        $group: {
          _id: null,
          totalSales: { $sum: '$total' },
          totalReceipts: { $sum: 1 },
          averageCheck: { $avg: '$total' }
        }
      }
    ]);

    return res.json(stats[0] || { totalSales: 0, totalReceipts: 0, averageCheck: 0 });
  } catch (error) {
    console.error('Error fetching receipt stats:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
});

// –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
router.patch('/incassate', auth, admin, async (req, res) => {
  try {
    const { receiptIds } = req.body;
    
    if (!receiptIds || !Array.isArray(receiptIds)) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–∞—Å—Å–∏–≤ ID —á–µ–∫–æ–≤' });
    }

    console.log('üè¶ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è —á–µ–∫–æ–≤:', receiptIds);

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤ –±–∞–∑–µ
    const receiptsBeforeUpdate = await Receipt.find({ _id: { $in: receiptIds } });
    console.log('üè¶ –ß–µ–∫–∏ –ø–µ—Ä–µ–¥ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–µ–π:');
    receiptsBeforeUpdate.forEach(r => {
      console.log(`  –ß–µ–∫ ${r.receiptNumber} (${r._id}):`);
      r.payments.forEach((p, index) => {
        console.log(`    –ü–ª–∞—Ç–µ–∂ ${index + 1}: ${p.method} ${p.amount}‚ÇΩ, inCashRegister: ${p.inCashRegister}, cashRegisterDate: ${p.cashRegisterDate}`);
      });
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–ª–∏—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–µ–∫–∞—Ö
    const result = await Receipt.updateMany(
      { 
        _id: { $in: receiptIds }
      },
      { 
        $set: { 
          'payments.$[elem].inCashRegister': false
        },
        $unset: {
          'payments.$[elem].cashRegisterDate': ""
        }
      },
      {
        arrayFilters: [{ 
          'elem.method': 'cash',
          'elem.inCashRegister': true
        }]
      }
    );

    console.log('üè¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏:', result);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    const updatedReceipts = await Receipt.find({ _id: { $in: receiptIds } });
    console.log('üè¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤:');
    updatedReceipts.forEach(r => {
      console.log(`  –ß–µ–∫ ${r.receiptNumber} (${r._id}):`);
      r.payments.forEach((p, index) => {
        console.log(`    –ü–ª–∞—Ç–µ–∂ ${index + 1}: ${p.method} ${p.amount}‚ÇΩ, inCashRegister: ${p.inCashRegister}, cashRegisterDate: ${p.cashRegisterDate}`);
      });
    });

    return res.json({ 
      message: '–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
      modifiedCount: result.modifiedCount
    });
  } catch (error) {
    console.error('Error during incassation:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏' });
  }
});

export default router; 