import express from 'express';
import { Debt } from '../models/Debt';
import { Payment } from '../models/Payment';
import { auth } from '../middleware/auth';
import { admin } from '../middleware/admin';

const router = express.Router();

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ–ª–≥–∏
router.get('/', auth, admin, async (req, res) => {
  try {
    const { status, supplierId, search } = req.query;
    
    let query: any = {};
    if (status && status !== 'all') {
      query.status = status;
    }
    if (supplierId) {
      query.supplierId = supplierId;
    }
    if (search) {
      query.$or = [
        { supplierName: { $regex: search, $options: 'i' } },
        { notes: { $regex: search, $options: 'i' } }
      ];
    }

    const debts = await Debt.find(query).sort({ date: -1 });
    return res.json(debts);
  } catch (error) {
    console.error('Error fetching debts:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ª–≥–æ–≤' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ª–≥ –ø–æ ID
router.get('/:id', auth, admin, async (req, res) => {
  try {
    const debt = await Debt.findById(req.params.id);
    if (!debt) {
      return res.status(404).json({ error: '–î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    return res.json(debt);
  } catch (error) {
    console.error('Error fetching debt:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ª–≥–∞' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–ª–≥
router.post('/', auth, admin, async (req, res) => {
  try {
    const debtData = {
      ...req.body,
      createdBy: (req as any).user.id
    };
    
    const debt = new Debt(debtData);
    await debt.save();
    return res.status(201).json(debt);
  } catch (error) {
    console.error('Error creating debt:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–ª–≥–∞' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–ª–≥
router.put('/:id', auth, admin, async (req, res) => {
  try {
    const debt = await Debt.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );
    if (!debt) {
      return res.status(404).json({ error: '–î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    return res.json(debt);
  } catch (error) {
    console.error('Error updating debt:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞' });
  }
});

// –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞
router.patch('/:id/pay', auth, admin, async (req, res) => {
  try {
    const { amount } = req.body;
    
    console.log('üí∞ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–æ–ª–≥–∞:', {
      debtId: req.params.id,
      amount,
      body: req.body
    });
    
    if (!amount || typeof amount !== 'number' || amount <= 0) {
      console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:', amount);
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞' });
    }

    // –ò—â–µ–º –¥–æ–ª–≥ —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–ª—é id
    const debt = await Debt.findOne({ id: req.params.id });
    
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–æ–ª–≥–∞:', debt ? {
      _id: debt._id,
      id: debt.id,
      amount: debt.amount,
      paidAmount: debt.paidAmount,
      remainingAmount: debt.remainingAmount,
      status: debt.status
    } : '–î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    if (!debt) {
      return res.status(404).json({ error: '–î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (amount > debt.remainingAmount) {
      console.log('‚ùå –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫:', {
        payment: amount,
        remaining: debt.remainingAmount
      });
      return res.status(400).json({ 
        error: `–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ (${amount}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —Å—É–º–º—ã –¥–æ–ª–≥–∞ (${debt.remainingAmount})`
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—ã
    debt.paidAmount += amount;
    debt.remainingAmount -= amount;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const oldStatus = debt.status;
    if (debt.remainingAmount === 0) {
      debt.status = 'paid';
    } else if (debt.paidAmount > 0) {
      debt.status = 'partially_paid';
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await debt.save();

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –∏–∑ –Ω–∞–ª–∏—á–Ω—ã—Ö –∫–∞—Å—Å—ã
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
      const paymentId = `payment_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
      
      const cashExpense = new Payment({
        id: paymentId,
        type: '–Ω–∞–ª–∏—á–Ω—ã–µ', // –¢–∏–ø –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        category: '–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É',
        amount: -Math.abs(amount), // –†–∞—Å—Ö–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏
        date: new Date(),
        description: (() => {
          // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤
          const itemsDescription = debt.items.map(item => {
            let itemDesc = `${item.productName}`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1
            if (item.quantity > 1) {
              itemDesc += ` (${item.quantity} —à—Ç.)`;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (item.serialNumbers && item.serialNumbers.length > 0) {
              itemDesc += ` [S/N: ${item.serialNumbers.join(', ')}]`;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∏—Ö-–∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (item.barcode) {
              itemDesc += ` [–®–ö: ${item.barcode}]`;
            }
            
            return itemDesc;
          }).join('; ');
          
          return `–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É "${debt.supplierName}": ${itemsDescription} (${new Date(debt.date).toLocaleDateString('ru-RU')})`;
        })(),
        paymentMethod: '–Ω–∞–ª–∏—á–Ω—ã–µ',
        apiType: 'expense', // –≠—Ç–æ —Ä–∞—Å—Ö–æ–¥ - –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É –≤ UI
        supplierId: debt.supplierId,
        supplierName: debt.supplierName,
        debtId: debt.id,
        notes: (() => {
          const itemsList = debt.items.map(item => {
            let details = `‚Ä¢ ${item.productName} - ${item.quantity} —à—Ç. –ø–æ ${item.costPrice.toLocaleString('ru-RU')} ‚ÇΩ`;
            if (item.serialNumbers && item.serialNumbers.length > 0) {
              details += ` (S/N: ${item.serialNumbers.join(', ')})`;
            }
            if (item.barcode) {
              details += ` (–®–ö: ${item.barcode})`;
            }
            return details;
          }).join('\n');
          
          return `–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞ –Ω–∞ —Å—É–º–º—É ${amount.toLocaleString('ru-RU')} ‚ÇΩ. –ü—Ä–∏—Ö–æ–¥ –æ—Ç ${new Date(debt.date).toLocaleDateString('ru-RU')}.\n\n–¢–æ–≤–∞—Ä—ã:\n${itemsList}`;
        })(),
        inCashRegister: true, // –ù–∞–ª–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –∫–∞—Å—Å–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cashRegisterDate: new Date(), // –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∫–∞—Å—Å—É
        createdBy: (req as any).user.id
      });

      await cashExpense.save();
      
      console.log('üí∞ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –∏–∑ –∫–∞—Å—Å—ã:', {
        paymentId: paymentId,
        mongoId: cashExpense._id,
        amount: amount,
        supplier: debt.supplierName,
        debtId: debt.id
      });
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –∏–∑ –∫–∞—Å—Å—ã:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –¥–æ–ª–≥ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω
    }

    console.log('‚úÖ –î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', {
      _id: debt._id,
      id: debt.id,
      payment: amount,
      oldStatus,
      newStatus: debt.status,
      oldPaid: debt.paidAmount - amount,
      newPaid: debt.paidAmount,
      oldRemaining: debt.remainingAmount + amount,
      newRemaining: debt.remainingAmount
    });

    return res.json(debt);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –¥–æ–ª–≥–∞:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –¥–æ–ª–≥–∞' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –¥–æ–ª–≥
router.delete('/:id', auth, admin, async (req, res) => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –¥–æ–ª–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const debt = await Debt.findById(req.params.id);
    if (!debt) {
      return res.status(404).json({ error: '–î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞:', {
      debtId: debt._id?.toString(),
      debtIdField: debt.id,
      supplier: debt.supplierName,
      amount: debt.amount,
      paidAmount: debt.paidAmount
    });

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (–æ–ø–ª–∞—Ç—ã —ç—Ç–æ–≥–æ –¥–æ–ª–≥–∞)
    const deletedPayments = await Payment.deleteMany({ 
      $or: [
        { debtId: (debt._id as any)?.toString() },
        { debtId: debt.id }
      ]
    });
    
    if (deletedPayments.deletedCount > 0) {
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deletedPayments.deletedCount} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –¥–æ–ª–≥–∞ ${debt.id}`);
    }

    // –ï—Å–ª–∏ –¥–æ–ª–≥ –±—ã–ª —á–∞—Å—Ç–∏—á–Ω–æ –æ–ø–ª–∞—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –≤ –∫–∞—Å—Å—É
    if (debt.paidAmount > 0) {
      try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        const refundPaymentId = `refund_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
        
        const refundPayment = new Payment({
          id: refundPaymentId,
          type: 'income',
          category: '–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É',
          amount: debt.paidAmount,
          date: new Date(),
          description: `–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É "${debt.supplierName}"`,
          paymentMethod: 'cash',
          supplierId: debt.supplierId,
          supplierName: debt.supplierName,
          notes: `–í–æ–∑–≤—Ä–∞—Ç ${debt.paidAmount.toLocaleString('ru-RU')} ‚ÇΩ –≤ –∫–∞—Å—Å—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞ –æ—Ç ${new Date(debt.date).toLocaleDateString('ru-RU')}`,
          createdBy: (req as any).user.id
        });

        await refundPayment.save();
        console.log('üí∞ –°–æ–∑–¥–∞–Ω –≤–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É –Ω–∞ —Å—É–º–º—É:', debt.paidAmount);
      } catch (error) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–∞—Å—Å—É:', error);
      }
    }

    // –£–¥–∞–ª—è–µ–º —Å–∞–º –¥–æ–ª–≥
    await Debt.findByIdAndDelete(req.params.id);

    console.log('‚úÖ –î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –≤–º–µ—Å—Ç–µ —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏');
    
    return res.json({ 
      message: '–î–æ–ª–≥ —É–¥–∞–ª–µ–Ω',
      deletedPayments: deletedPayments.deletedCount,
      refundAmount: debt.paidAmount > 0 ? debt.paidAmount : 0
    });
  } catch (error) {
    console.error('Error deleting debt:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ–ª–≥–∞–º
router.get('/stats/summary', auth, admin, async (req, res) => {
  try {
    const stats = await Debt.aggregate([
      {
        $group: {
          _id: '$status',
          totalAmount: { $sum: '$amount' },
          remainingAmount: { $sum: '$remainingAmount' },
          count: { $sum: 1 }
        }
      }
    ]);

    const summary = {
      totalDebt: 0,
      remainingDebt: 0,
      paidDebt: 0,
      activeDebts: 0,
      overdue: 0
    };

    stats.forEach(stat => {
      summary.totalDebt += stat.totalAmount;
      summary.remainingDebt += stat.remainingAmount;
      
      if (stat._id === 'active' || stat._id === 'partially_paid') {
        summary.activeDebts += stat.count;
      }
      if (stat._id === 'overdue') {
        summary.overdue += stat.count;
      }
    });

    summary.paidDebt = summary.totalDebt - summary.remainingDebt;

    return res.json(summary);
  } catch (error) {
    console.error('Error fetching debt stats:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–ª–≥–æ–≤' });
  }
});

export default router; 