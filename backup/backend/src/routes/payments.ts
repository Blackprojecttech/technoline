import express, { Response } from 'express';
import { Payment } from '../models/Payment';
import { auth, AuthRequest } from '../middleware/auth';
import { admin } from '../middleware/admin';

const router = express.Router();

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
router.get('/', auth, admin, async (req, res) => {
  try {
    const { type, category, dateFrom, dateTo, search, paymentMethod } = req.query;
    
    let query: any = {};
    if (type && type !== 'all') {
      query.type = type;
    }
    if (category && category !== 'all') {
      query.category = category;
    }
    if (paymentMethod && paymentMethod !== 'all') {
      query.paymentMethod = paymentMethod;
    }
    if (dateFrom && dateTo) {
      query.date = {
        $gte: new Date(dateFrom as string),
        $lte: new Date(dateTo as string)
      };
    }
    if (search) {
      query.$or = [
        { description: { $regex: search, $options: 'i' } },
        { supplierName: { $regex: search, $options: 'i' } },
        { notes: { $regex: search, $options: 'i' } }
      ];
    }

    const payments = await Payment.find(query).sort({ date: -1 });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    const userRole = (req as any).user?.role;
    const canEdit = userRole === 'admin' || userRole === 'accountant';
    
    res.set('X-Can-Edit', canEdit.toString());
    res.set('X-User-Role', userRole || 'unknown');
    
    console.log('üîê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:', { canEdit, userRole });
    
    return res.json(payments);
  } catch (error) {
    console.error('Error fetching payments:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –ø–æ ID
router.get('/:id', auth, admin, async (req, res) => {
  try {
    const payment = await Payment.findById(req.params.id);
    if (!payment) {
      return res.status(404).json({ error: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    return res.json(payment);
  } catch (error) {
    console.error('Error fetching payment:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
router.post('/', auth, admin, async (req, res) => {
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω null
    const paymentId = req.body.id && req.body.id !== null ? req.body.id : `payment_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
    
    const paymentData = {
      ...req.body,
      id: paymentId,
      createdBy: (req as any).user.id
    };
    
    const payment = new Payment(paymentData);
    await payment.save();
    return res.status(201).json(payment);
  } catch (error) {
    console.error('Error creating payment:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
router.put('/:id', auth, admin, async (req: AuthRequest, res: Response) => {
  try {
    const { id } = req.params;
    const updateData = req.body;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    if (updateData.status === 'incassated') {
      const payment = await Payment.findByIdAndUpdate(
        id,
        {
          status: 'incassated',
          incassationDate: updateData.incassationDate
          // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º inCashRegister: true –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        },
        { new: true, runValidators: false }
      );
      
      if (!payment) {
        return res.status(404).json({ error: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      return res.json(payment);
    }
    
    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
    const payment = await Payment.findByIdAndUpdate(
      id,
      updateData,
      { new: true, runValidators: true }
    );

    if (!payment) {
      return res.status(404).json({ error: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    return res.json(payment);
  } catch (error) {
    console.warn('Error updating payment:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞' });
  }
});



// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–ï–î /:id)
router.delete('/clear-all', auth, admin, async (req: AuthRequest, res: Response) => {
  try {
    console.log('üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user?.role);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
    if (req.user?.role !== 'admin') {
      return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const count = await Payment.countDocuments();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${count}`);

    if (count === 0) {
      return res.json({ message: '–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', deletedCount: 0 });
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
    const result = await Payment.deleteMany({});
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${result.deletedCount}`);

    return res.json({ 
      message: `–£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} –ø–ª–∞—Ç–µ–∂–µ–π`,
      deletedCount: result.deletedCount 
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç–µ–∂
router.delete('/:id', auth, admin, async (req, res) => {
  try {
    const payment = await Payment.findByIdAndDelete(req.params.id);
    if (!payment) {
      return res.status(404).json({ error: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    return res.json({ message: '–ü–ª–∞—Ç–µ–∂ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('Error deleting payment:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞' });
  }
});



// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º
router.get('/stats/summary', auth, admin, async (req, res) => {
  try {
    const { dateFrom, dateTo } = req.query;
    
    let dateFilter: any = {};
    if (dateFrom && dateTo) {
      dateFilter = {
        date: {
          $gte: new Date(dateFrom as string),
          $lte: new Date(dateTo as string)
        }
      };
    }

    const stats = await Payment.aggregate([
      { $match: dateFilter },
      {
        $group: {
          _id: '$type',
          totalAmount: { $sum: '$amount' },
          count: { $sum: 1 }
        }
      }
    ]);

    const summary = {
      totalIncome: 0,
      totalExpense: 0,
      netProfit: 0,
      incomeCount: 0,
      expenseCount: 0
    };

    stats.forEach(stat => {
      if (stat._id === 'income') {
        summary.totalIncome = stat.totalAmount;
        summary.incomeCount = stat.count;
      } else if (stat._id === 'expense') {
        summary.totalExpense = stat.totalAmount;
        summary.expenseCount = stat.count;
      }
    });

    summary.netProfit = summary.totalIncome - summary.totalExpense;

    return res.json(summary);
  } catch (error) {
    console.error('Error fetching payment stats:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π' });
  }
});

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ 8900
router.delete('/amount/8900', auth, admin, async (req, res) => {
  try {
    console.log('üîç –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ 8900 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...');
    
    // –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ 8900
    const payment = await Payment.findOne({ amount: 8900 });
    
    if (payment) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
        _id: payment._id,
        type: payment.type,
        amount: payment.amount,
        description: payment.description,
        date: payment.date,
        paymentMethod: payment.paymentMethod
      });
      
      // –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
      await Payment.findByIdAndDelete(payment._id);
      console.log('üóëÔ∏è –ü–ª–∞—Ç–µ–∂ –Ω–∞ 8900 —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
      
      return res.json({ 
        message: '–ü–ª–∞—Ç–µ–∂ –Ω–∞ 8900 —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
        deletedPayment: {
          _id: payment._id,
          type: payment.type,
          amount: payment.amount,
          description: payment.description
        }
      });
    } else {
      console.log('‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–∞ 8900 –Ω–µ –Ω–∞–π–¥–µ–Ω');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const allPayments = await Payment.find({}).sort({ date: -1 }).limit(10);
      console.log('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–ª–∞—Ç–µ–∂–µ–π:');
      allPayments.forEach(p => {
        console.log(`- ${p.amount}‚ÇΩ (${p.type}) - ${p.description} - ${p.date}`);
      });
      
      return res.status(404).json({ 
        error: '–ü–ª–∞—Ç–µ–∂ –Ω–∞ 8900 –Ω–µ –Ω–∞–π–¥–µ–Ω',
        recentPayments: allPayments.map(p => ({
          _id: p._id,
          amount: p.amount,
          type: p.type,
          description: p.description,
          date: p.date
        }))
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ 8900:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞' });
  }
});

export default router; 