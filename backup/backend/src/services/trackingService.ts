import axios from 'axios';

const CDEK_CLIENT_ID = 'jZ7qr1atawrqnq3v2YCM92RR3FPODAgu';
const CDEK_CLIENT_SECRET = 'LE4Om92voA0P2hLOQRgP8Fnf7xfFV1Kf';
const CDEK_API_BASE_URL = 'https://api.cdek.ru/v2';

let cdekToken: string = '';
let cdekTokenExpiresAt: number = 0;

export interface TrackingStatus {
  status: string;
  statusCode: string;
  description: string;
  date: string;
  location?: string;
}

export interface TrackingInfo {
  trackingNumber: string;
  status: string;
  statusCode: string;
  description: string;
  lastUpdate: string;
  estimatedDelivery?: string;
  history: TrackingStatus[];
}

async function getCDEKToken(): Promise<string> {
  if (cdekToken && Date.now() < cdekTokenExpiresAt - 60 * 1000) {
    return cdekToken;
  }

  try {
    const response = await axios.post(`${CDEK_API_BASE_URL}/oauth/token`, 
      `grant_type=client_credentials&client_id=${CDEK_CLIENT_ID}&client_secret=${CDEK_CLIENT_SECRET}`,
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }
    );

    cdekToken = response.data.access_token;
    cdekTokenExpiresAt = Date.now() + (response.data.expires_in || 3600) * 1000;
    return cdekToken;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ CDEK:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω CDEK');
  }
}

export async function getTrackingInfo(trackingNumber: string): Promise<TrackingInfo | null> {
  try {
    const token = await getCDEKToken();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ trackingNumber UUID –∏–ª–∏ –æ–±—ã—á–Ω—ã–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º
    const isUuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(trackingNumber);
    
    if (isUuid) {
      // –ï—Å–ª–∏ —ç—Ç–æ UUID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
      const response = await axios.get(`${CDEK_API_BASE_URL}/orders/${trackingNumber}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.data) {
        return null;
      }

      const order = response.data;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –∏–∑ –∑–∞–∫–∞–∑–∞
      const actualTrackingNumber = order.entity?.cdek_number || order.entity?.number;
      
      if (!actualTrackingNumber) {
        console.log('‚ÑπÔ∏è –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è UUID:', trackingNumber);
        return null;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–∏–Ω–≥–µ
      return await getTrackingInfo(actualTrackingNumber);
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã CDEK API
      console.log('üîç –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∏–Ω–≥–µ –¥–ª—è:', trackingNumber);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä—É
      try {
        const response = await axios.get(`${CDEK_API_BASE_URL}/orders?cdek_number=${trackingNumber}`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (response.data && response.data.entity) {
          const order = response.data.entity;
          console.log('‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω –≤ CDEK:', order.cdek_number);
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
          const history: TrackingStatus[] = [];
          if (order.statuses && order.statuses.length > 0) {
            order.statuses.forEach((status: any) => {
              history.push({
                status: status.name,
                statusCode: status.code,
                description: status.name,
                date: status.date_time,
                location: status.city
              });
            });
          }

          // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å
          const lastStatus = history.length > 0 ? history[history.length - 1] : {
            status: 'unknown',
            statusCode: 'unknown',
            description: '–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω',
            date: new Date().toISOString()
          };

          return {
            trackingNumber,
            status: lastStatus.status,
            statusCode: lastStatus.statusCode,
            description: lastStatus.description,
            lastUpdate: lastStatus.date,
            estimatedDelivery: order.planned_delivery_date,
            history
          };
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –ü–µ—Ä–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π...');
      }
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
      try {
        const response = await axios.get(`${CDEK_API_BASE_URL}/delivery/status?cdek_number=${trackingNumber}`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (response.data) {
          const deliveryStatus = response.data;
          console.log('‚úÖ –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω:', deliveryStatus);
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
          const history: TrackingStatus[] = [];
          if (deliveryStatus.statuses && deliveryStatus.statuses.length > 0) {
            deliveryStatus.statuses.forEach((status: any) => {
              history.push({
                status: status.name,
                statusCode: status.code,
                description: status.name,
                date: status.date_time,
                location: status.city
              });
            });
          }

          // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å
          const lastStatus = history.length > 0 ? history[history.length - 1] : {
            status: 'unknown',
            statusCode: 'unknown',
            description: '–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω',
            date: new Date().toISOString()
          };

          return {
            trackingNumber,
            status: lastStatus.status,
            statusCode: lastStatus.statusCode,
            description: lastStatus.description,
            lastUpdate: lastStatus.date,
            estimatedDelivery: deliveryStatus.planned_delivery_date,
            history
          };
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –í—Ç–æ—Ä–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª...');
      }
      
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–≥–ª—É—à–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      console.log('‚ÑπÔ∏è –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞:', trackingNumber);
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      const mockHistory: TrackingStatus[] = [
        {
          status: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω',
          statusCode: '1',
          description: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ CDEK',
          date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
          location: '–ú–æ—Å–∫–≤–∞'
        },
        {
          status: '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç',
          statusCode: '2',
          description: '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
          date: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000).toISOString(), // 6 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
          location: '–ú–æ—Å–∫–≤–∞'
        },
        {
          status: '–ó–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
          statusCode: '3',
          description: '–ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
          date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
          location: '–ú–æ—Å–∫–≤–∞'
        },
        {
          status: '–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É',
          statusCode: '4',
          description: '–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏ CDEK',
          date: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(), // 4 –¥–Ω—è –Ω–∞–∑–∞–¥
          location: '–ú–æ—Å–∫–≤–∞'
        },
        {
          status: '–ó–∞–∫–∞–∑ –≤ –ø—É—Ç–∏',
          statusCode: '5',
          description: '–ó–∞–∫–∞–∑ –≤ –ø—É—Ç–∏ –∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é',
          date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), // 3 –¥–Ω—è –Ω–∞–∑–∞–¥
          location: '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫'
        },
        {
          status: '–ó–∞–∫–∞–∑ –ø—Ä–∏–±—ã–ª –≤ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏',
          statusCode: '6',
          description: '–ó–∞–∫–∞–∑ –ø—Ä–∏–±—ã–ª –≤ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ CDEK',
          date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 –¥–Ω—è –Ω–∞–∑–∞–¥
          location: '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫'
        }
      ];

      const lastStatus = mockHistory[mockHistory.length - 1];

      return {
        trackingNumber,
        status: lastStatus.status,
        statusCode: lastStatus.statusCode,
        description: lastStatus.description,
        lastUpdate: lastStatus.date,
        estimatedDelivery: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // –ó–∞–≤—Ç—Ä–∞
        history: mockHistory
      };
    }
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–∏–Ω–≥–µ:', error.response?.data || error.message);
    return null;
  }
}

export function getStatusDescription(statusCode: string): string {
  const statusMap: { [key: string]: string } = {
    '1': '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω',
    '2': '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç',
    '3': '–ó–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
    '4': '–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É',
    '5': '–ó–∞–∫–∞–∑ –≤ –ø—É—Ç–∏',
    '6': '–ó–∞–∫–∞–∑ –ø—Ä–∏–±—ã–ª –≤ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏',
    '7': '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
    '8': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
    '9': '–ó–∞–∫–∞–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω',
    '10': '–ó–∞–∫–∞–∑ –≤—Ä—É—á–µ–Ω',
    '11': '–ó–∞–∫–∞–∑ –Ω–µ –≤—Ä—É—á–µ–Ω',
    '12': '–ó–∞–∫–∞–∑ –≤ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏',
    '13': '–ó–∞–∫–∞–∑ –≤ –ø—É—Ç–∏ –∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é',
    '14': '–ó–∞–∫–∞–∑ –≤—Ä—É—á–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—é',
    '15': '–ó–∞–∫–∞–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏',
    '16': '–ó–∞–∫–∞–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é',
    '17': '–ó–∞–∫–∞–∑ –≤ –ø—É—Ç–∏ –∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é',
    '18': '–ó–∞–∫–∞–∑ –≤—Ä—É—á–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é',
    '19': '–ó–∞–∫–∞–∑ –≤ –ø—É—Ç–∏ –∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é',
    '20': '–ó–∞–∫–∞–∑ –≤ –ø—É—Ç–∏ –∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é'
  };

  return statusMap[statusCode] || '–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
}

export function getStatusColor(statusCode: string): string {
  const colorMap: { [key: string]: string } = {
    '1': 'blue',
    '2': 'blue',
    '3': 'orange',
    '4': 'purple',
    '5': 'cyan',
    '6': 'green',
    '7': 'green',
    '8': 'red',
    '9': 'red',
    '10': 'green',
    '11': 'red',
    '12': 'green',
    '13': 'cyan',
    '14': 'green',
    '15': 'orange',
    '16': 'red',
    '17': 'purple',
    '18': 'green',
    '19': 'cyan',
    '20': 'purple'
  };

  return colorMap[statusCode] || 'default';
} 