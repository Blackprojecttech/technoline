import { Request, Response } from 'express';
import DeliveryMethod, { IDeliveryMethod } from '../models/DeliveryMethod';
import DeliveryZone from '../models/DeliveryZone';
import { getDeliveryZoneByCoords, CKAD_POLYGON } from '../utils/geoZones';

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
export const getActiveDeliveryMethods = async (req: Request, res: Response): Promise<void> => {
  try {
    const deliveryMethods = await DeliveryMethod.find({ isActive: true })
      .sort({ order: 1, name: 1 });
    const allZones = await DeliveryZone.find();

    const methodsWithZones = deliveryMethods.map(method => {
      let zonePrices: Record<string, number> | undefined = undefined;
      if (method.costType === 'zone' && method.useZones && Array.isArray(method.zoneKeys)) {
        zonePrices = {};
        for (const key of method.zoneKeys) {
          const zone = allZones.find(z => z.key === key);
          if (zone) (zonePrices as Record<string, number>)[key] = zone.price;
        }
      }
      return {
        ...method.toObject(),
        ...(zonePrices ? { zonePrices } : {})
      };
    });

    res.json({ deliveryMethods: methodsWithZones });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏' });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
export const getAllDeliveryMethods = async (req: Request, res: Response): Promise<void> => {
  try {
    const deliveryMethods = await DeliveryMethod.find()
      .sort({ order: 1, name: 1 });
    res.json({ deliveryMethods }); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏' });
  }
};

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
export const createDeliveryMethod = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('üîê Create delivery method request body:', req.body);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!req.body.name || !req.body.description) {
      res.status(400).json({ 
        message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'
      });
      return;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const createData = { ...req.body };
    const timeFields = [
      'orderTimeFrom', 'orderTimeTo', 'deliveryTodayTimeFrom', 'deliveryTodayTimeTo',
      'deliveryTomorrowTimeFrom', 'deliveryTomorrowTimeTo', 'orderTimeForToday', 'orderTimeForTomorrow'
    ];
    
    timeFields.forEach(field => {
      if (createData[field] !== undefined) {
        createData[field] = convertTimeFormat(createData[field]);
      }
    });
    
    console.log('üîß Converted create data:', createData);
    console.log('üîç Custom intervals in create data:', {
      useFlexibleIntervals: createData.useFlexibleIntervals,
      customInterval1: createData.customInterval1,
      customInterval2: createData.customInterval2
    });
    
    const deliveryMethod = new DeliveryMethod(createData);
    await deliveryMethod.save();
    
    console.log('‚úÖ Delivery method created successfully:', deliveryMethod);
    res.status(201).json(deliveryMethod);
  } catch (error: any) {
    console.error('‚ùå Error creating delivery method:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    if (error.name === 'ValidationError') {
      const validationErrors = Object.values(error.errors).map((err: any) => err.message);
      res.status(400).json({ 
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
        errors: validationErrors
      });
    } else {
      res.status(400).json({ 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
        error: error.message 
      });
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ISO –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM
const convertTimeFormat = (timeValue: any): string | null => {
  if (!timeValue) return null;
  
  // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Ñ–æ—Ä–º–∞—Ç HH:MM, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (typeof timeValue === 'string' && /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/.test(timeValue)) {
    return timeValue;
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ ISO —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ HH:MM
  if (typeof timeValue === 'string' && timeValue.includes('T')) {
    try {
      const date = new Date(timeValue);
      const hours = date.getHours().toString().padStart(2, '0');
      const minutes = date.getMinutes().toString().padStart(2, '0');
      return `${hours}:${minutes}`;
    } catch (error) {
      console.error('Error converting time format:', error);
      return null;
    }
  }
  
  return null;
};

// –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
export const updateDeliveryMethod = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('üîê Update delivery method request:', {
      id: req.params.id,
      body: req.body
    });
    
    const { id } = req.params;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const updateData = { ...req.body };
    const timeFields = [
      'orderTimeFrom', 'orderTimeTo', 'deliveryTodayTimeFrom', 'deliveryTodayTimeTo',
      'deliveryTomorrowTimeFrom', 'deliveryTomorrowTimeTo', 'orderTimeForToday', 'orderTimeForTomorrow'
    ];
    
    timeFields.forEach(field => {
      if (updateData[field] !== undefined) {
        updateData[field] = convertTimeFormat(updateData[field]);
      }
    });
    
    console.log('üîß Converted update data:', updateData);
    console.log('üîç Custom intervals in update data:', {
      useFlexibleIntervals: updateData.useFlexibleIntervals,
      customInterval1: updateData.customInterval1,
      customInterval2: updateData.customInterval2
    });
    
    const deliveryMethod = await DeliveryMethod.findByIdAndUpdate(
      id,
      updateData,
      { new: true, runValidators: true }
    );
    
    if (!deliveryMethod) {
      console.log('‚ùå Delivery method not found:', id);
      res.status(404).json({ message: '–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }
    
    console.log('‚úÖ Delivery method updated successfully:', deliveryMethod);
    res.json({ deliveryMethod });
  } catch (error: any) {
    console.error('‚ùå Error updating delivery method:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    if (error.name === 'ValidationError') {
      const validationErrors = Object.values(error.errors).map((err: any) => err.message);
      res.status(400).json({ 
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
        errors: validationErrors
      });
    } else if (error.name === 'CastError') {
      res.status(400).json({ 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'
      });
    } else {
      res.status(400).json({ 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
        error: error.message 
      });
    }
  }
};

// –£–¥–∞–ª–∏—Ç—å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
export const deleteDeliveryMethod = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const deliveryMethod = await DeliveryMethod.findByIdAndDelete(id);
    
    if (!deliveryMethod) {
      res.status(404).json({ message: '–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }
    
    res.json({ message: '–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏' });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ ID
export const getDeliveryMethodById = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const deliveryMethod = await DeliveryMethod.findById(id);
    
    if (!deliveryMethod) {
      res.status(404).json({ message: '–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }
    
    res.json(deliveryMethod);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏' });
  }
}; 

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ (—É–¥–∞–ª—è–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞, –æ–∫–æ–Ω—á–∞–Ω–∏—è, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
function normalizeZoneString(str: string): string {
  return str
    .toLowerCase()
    .replace(/\b(–≥(–æ—Ä–æ–¥)?|–æ–±–ª(–∞—Å—Ç—å)?|—Ä–ø|–ø–≥—Ç|–ø–æ—Å(–µ–ª–æ–∫)?|–¥–µ—Ä(–µ–≤–Ω—è)?|—Å–µ–ª–æ|—Ä–∞–π–æ–Ω|\.|,)/g, ' ')
    .replace(/–∏–π\b|—ã–π\b|–∞—è\b|–æ–µ\b|–∏–π\b|–∏–π\b|–∏–π\b|–∏–π\b/g, '')
    .replace(/\s+/g, ' ')
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
function translitToLatin(str: string): string {
  const map: Record<string, string> = {
    –∞: 'a', –±: 'b', –≤: 'v', –≥: 'g', –¥: 'd', –µ: 'e', —ë: 'e', –∂: 'zh', –∑: 'z', –∏: 'i', –π: 'y', –∫: 'k', –ª: 'l', –º: 'm', –Ω: 'n', –æ: 'o', –ø: 'p', —Ä: 'r', —Å: 's', —Ç: 't', —É: 'u', —Ñ: 'f', —Ö: 'h', —Ü: 'ts', —á: 'ch', —à: 'sh', —â: 'sch', —ä: '', —ã: 'y', —å: '', —ç: 'e', —é: 'yu', —è: 'ya'
  };
  return str.split('').map(c => map[c] || map[c.toLowerCase()] || c).join('');
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –ª–∞—Ç–∏–Ω–∏—Ü—ã –≤ –∫–∏—Ä–∏–ª–ª–∏—Ü—É (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
function translitToCyrillic(str: string): string {
  const map: Record<string, string> = {
    a: '–∞', b: '–±', v: '–≤', g: '–≥', d: '–¥', e: '–µ', z: '–∑', i: '–∏', y: '–π', k: '–∫', l: '–ª', m: '–º', n: '–Ω', o: '–æ', p: '–ø', r: '—Ä', s: '—Å', t: '—Ç', u: '—É', f: '—Ñ', h: '—Ö', c: '—Ü'
  };
  return str.split('').map(c => map[c] || map[c.toLowerCase()] || c).join('');
}

function normalizeZoneStringAll(str: string): string[] {
  const norm = normalizeZoneString(str);
  return [
    norm,
    translitToLatin(norm),
    translitToCyrillic(norm)
  ];
}

// –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∞–¥—Ä–µ—Å—É/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
export const calculateDeliveryCost = async (req: Request, res: Response): Promise<void> => {
  let zoneKey: string | null = null; // –û–±—ä—è–≤–ª—è–µ–º zoneKey –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
  try {
    const axios = require('axios');
    const { address, lat, lng, deliveryMethod, city, region, region_code } = req.body;
    if (!address || lat === undefined || lng === undefined) {
      res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã' });
      return;
    }

    // --- –§–ò–õ–¨–¢–† –î–õ–Ø –°–î–≠–ö ---
    if (deliveryMethod && typeof deliveryMethod === 'string' && deliveryMethod.toLowerCase().includes('cdek')) {
      let usedCity = city;
      let usedRegion = region;
      let usedRegionCode = region_code;
      let cityCode, fiasGuid;
      // –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω ‚Äî –∏—â–µ–º —á–µ—Ä–µ–∑ CDEK API
      if (!usedCity || !(usedRegion || usedRegionCode)) {
        // –ó–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É backend-–ø—Ä–æ–∫—Å–∏ /api/cdek/cities
        const params: Record<string, any> = { country_codes: 'RU', size: 10 };
        if (usedCity) params.city = usedCity;
        else if (address) params.city = address.split(',').map((s: any) => s.trim()).pop();
        if (usedRegionCode) params.region_code = usedRegionCode;
        if (usedRegion) params.region = usedRegion;
        const cdekResp = await axios.get(`${process.env.BACKEND_URL || 'http://localhost:5002'}/api/cdek/cities`, { params });
        const cities = cdekResp.data && Array.isArray(cdekResp.data) ? cdekResp.data : cdekResp.data?.cities || [];
        if (cities.length === 1) {
          usedCity = cities[0].city;
          usedRegion = cities[0].region;
          usedRegionCode = cities[0].region_code;
          cityCode = cities[0].code;
          fiasGuid = cities[0].fias_guid;
        } else {
          res.status(400).json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –∏ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –°–î–≠–ö', found: cities });
          return;
        }
      }
      // –§–æ—Ä–º–∏—Ä—É–µ–º address –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      let addressStr = usedCity;
      if (usedRegion) addressStr = `${usedCity}, ${usedRegion}`;
      else if (usedRegionCode) addressStr = `${usedCity}, ${usedRegionCode}`;
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤ CDEK API –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ä–æ–∫–æ–≤/—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      res.json({ deliveryMethods: [], zone: null, zoneKey: null, city: usedCity, region: usedRegion, region_code: usedRegionCode, city_code: cityCode, fias_guid: fiasGuid, address: addressStr });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    let coords: [number, number] = [parseFloat(lng), parseFloat(lat)];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –ú–ö–ê–î/–¶–ö–ê–î
    const inMkad = require('../utils/geoZones').isPointInPolygon(coords, require('../utils/geoZones').MKAD_POLYGON);
    const inCkad = require('../utils/geoZones').isPointInPolygon(coords, require('../utils/geoZones').CKAD_POLYGON);
    const zone = getDeliveryZoneByCoords(coords);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    const deliveryMethods = await DeliveryMethod.find({ isActive: true }).sort({ order: 1, name: 1 });
    const allZones = await DeliveryZone.find();

    // --- –î–û–ë–ê–í–õ–ï–ù–û: —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –°–î–≠–ö –∏ –≤–æ–∑–≤—Ä–∞—Ç –ü–í–ó ---
    let cdekPVZList: Array<{ code: string; name: string; address: string; work_time: string }> = [];
    let orderValue = req.body.orderValue ? Number(req.body.orderValue) : 0;

    const result = deliveryMethods.map(method => {
      let available = true;
      let reason = '';
      if (method.addressValidationType === 'moscow_mkad') {
        if (zone !== 'mkad') {
          available = false;
          reason = '–î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î';
        }
      } else if (method.addressValidationType === 'moscow_region') {
        if (zone !== 'ckad') {
          available = false;
          reason = '–î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –ú–ö–ê–î –∏ –¶–ö–ê–î';
        }
      }
      // --- –î–û–ë–ê–í–õ–ï–ù–û: zonePrices –¥–ª—è –∑–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ ---
      let zonePrices: Record<string, number> | undefined = undefined;
      if (method.costType === 'zone' && method.useZones && Array.isArray(method.zoneKeys)) {
        zonePrices = {};
        for (const key of method.zoneKeys) {
          const zone = allZones.find(z => z.key === key);
          if (zone) (zonePrices as Record<string, number>)[key] = zone.price;
        }
      }
      // --- –î–û–ë–ê–í–õ–ï–ù–û: —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –°–î–≠–ö ---
      let cdekCost: number | null = null;
      const m = method as any;
      if ((m.type === 'cdek' || (m.name && m.name.toLowerCase().includes('—Å–¥—ç–∫')))) {
        if (method.costType === 'percentage' && orderValue > 0 && method.costPercentage) {
          cdekCost = Math.round(orderValue * (method.costPercentage / 100));
        } else if (method.costType === 'fixed' && method.fixedCost) {
          cdekCost = method.fixedCost;
        } else if (method.costType === 'fixed_plus_percentage' && method.fixedCost !== undefined && method.costPercentage && orderValue > 0) {
          const fixedPart = method.fixedCost;
          const percentagePart = Math.round(orderValue * (method.costPercentage / 100));
          cdekCost = fixedPart + percentagePart;
        } else if (method.costType === 'zone' && zonePrices && zoneKey && zonePrices[zoneKey] !== undefined) {
          cdekCost = zonePrices[zoneKey];
        }
      }
      return {
        ...method.toObject(),
        available,
        unavailableReason: available ? undefined : reason,
        ...(zonePrices ? { zonePrices } : {}),
        ...(cdekCost !== null ? { cdekCost } : {})
      };
    });

    // --- –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–µ–Ω–∏–µ –ü–í–ó –°–î–≠–ö —á–µ—Ä–µ–∑ API (—Ç–æ–ª—å–∫–æ –¥–ª—è zone === 'region') ---
    if (coords && coords.length === 2 && zone === 'region') {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ Dadata
      let city = req.body.city;
      let region = req.body.region;
      let addressForPVZ = address;
      let lat = coords[1];
      let lon = coords[0];
      try {
        if (!city || !region) {
          const dadataResp = await require('axios').post(
            'https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address',
            { query: address, count: 1 },
            {
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': `Token ${process.env.DADATA_API_KEY || 'ecb97bfa1e55c60cd6b89567e51fee54a8747af3'}`
              }
            }
          );
          const suggestions = dadataResp.data.suggestions;
          if (suggestions && suggestions.length > 0) {
            const data = suggestions[0].data;
            city = data.city || data.settlement_with_type || data.settlement || data.city_with_type || city;
            region = data.region_with_type || region;
            addressForPVZ = suggestions[0].value;
            lat = parseFloat(data.geo_lat) || lat;
            lon = parseFloat(data.geo_lon) || lon;
          }
        }
      } catch (e) {
        // ignore
      }
      // –ü–æ–ª—É—á–∞–µ–º –ü–í–ó —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
      try {
        const { getPVZListFromCDEK, filterPVZByRadius } = require('../services/cdekService');
        let allPVZ = await getPVZListFromCDEK({ city, region, address: addressForPVZ });
        // –§–∏–ª—å—Ç—Ä—É–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –ü–í–ó –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (10 –∫–º, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî 50 –∫–º)
        let nearestPVZ = filterPVZByRadius({ lat, lon }, allPVZ, 10);
        if (!nearestPVZ || nearestPVZ.length === 0) {
          nearestPVZ = filterPVZByRadius({ lat, lon }, allPVZ, 50);
        }
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ü–í–ó –ø–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–ú–æ—Å–∫–≤–∞ -> —ç—Ç–æ—Ç –ü–í–ó, —Ç–∞—Ä–∏—Ñ 136, —Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥)
        const axios = require('axios');
        const CDEK_API_BASE_URL = 'https://api.cdek.ru/v2';
        const token = await require('../services/cdekService').getCDEKToken();
        const fromCity = '–ú–æ—Å–∫–≤–∞';
        const getDistance = require('../utils/geoZones').getDistance;
        const cdekPVZList = await Promise.all(nearestPVZ.map(async (pvz: any) => {
          let deliveryDate = null;
          let respData = null;
          try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ API –°–î–≠–ö (tariff_code 136, from –ú–æ—Å–∫–≤–∞, to pvz)
            console.log(`[CDEK][DEBUG] –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ü–í–ó ${pvz.code}, city_code: ${pvz.location.city_code}`);
            const resp = await axios.post(
              `${CDEK_API_BASE_URL}/calculator/tariff`,
              {
                type: 1, // —Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥
                tariff_code: 136,
                from_location: { 
                  code: 44, // –ö–æ–¥ –ú–æ—Å–∫–≤—ã
                  city: fromCity 
                },
                to_location: { 
                  code: pvz.location.city_code,
                  city: pvz.location.city
                },
                packages: [{ 
                  weight: 1000, // 1 –∫–≥ –≤ –≥—Ä–∞–º–º–∞—Ö
                  length: 20, 
                  width: 20, 
                  height: 10 
                }]
              },
              { headers: { Authorization: `Bearer ${token}` } }
            );
            respData = resp.data;
            console.log(`[CDEK][DEBUG] –û—Ç–≤–µ—Ç API –¥–ª—è –ü–í–ó ${pvz.code}:`, respData);
            if (resp.data && resp.data.period_min) {
              // –ü–ª—é—Å—É–µ–º 2 –¥–Ω—è –∫ period_min
              const days = Number(resp.data.period_min) + 2;
              const today = new Date();
              today.setDate(today.getDate() + days);
              deliveryDate = today.toISOString().split('T')[0];
              console.log(`[CDEK][DEBUG] –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ü–í–ó ${pvz.code}: ${deliveryDate} (${days} –¥–Ω–µ–π)`);
            } else {
              console.log(`[CDEK][DEBUG] –ù–µ—Ç period_min –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è –ü–í–ó ${pvz.code}`);
              deliveryDate = null; // –ù–µ—Ç period_min ‚Äî –Ω–µ—Ç –¥–∞—Ç—ã
            }
          } catch (e) {
            console.log(`[CDEK][DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ü–í–ó ${pvz.code}:`, (e as Error).message || e);
            deliveryDate = null;
          }
          // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          console.log('[CDEK][DEBUG] PVZ:', {
            code: pvz.code,
            city_code: pvz.location.city_code,
            deliveryDate,
            respData
          });
          // –î–æ–±–∞–≤–ª—è–µ–º distance (–≤ –º–µ—Ç—Ä–∞—Ö) –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
          let distance = null;
          if (pvz.location && typeof pvz.location.latitude === 'number' && typeof pvz.location.longitude === 'number') {
            distance = Math.round(getDistance(lat, lon, pvz.location.latitude, pvz.location.longitude) * 1000); // –≤ –º–µ—Ç—Ä–∞—Ö
          }
          return {
            code: pvz.code,
            name: pvz.name,
            address: pvz.location.address,
            work_time: pvz.work_time,
            deliveryDate,
            distance
          };
        }));
        cdekPVZList.sort((a, b) => (a.deliveryDate || '').localeCompare(b.deliveryDate || ''));
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ –ü–í–ó —Å –¥–∞—Ç–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
        res.json({ deliveryMethods: result, zone, zoneKey, cdekPVZList, cdekDeliveryDates: cdekPVZList.map(p => p.deliveryDate).filter(Boolean) });
        return;
      } catch (e) {
        res.json({ deliveryMethods: result, zone, zoneKey, cdekPVZList: [] });
        return;
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–æ–Ω—ã
    const allZonesForResult = await DeliveryZone.find();

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–¥—Ä–µ—Å –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
    const normalizedAddress = normalizeZoneString(address).replace(/[.,]/g, ' ');
    const addressWords = normalizedAddress.split(' ').filter(Boolean);
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
    const addressWordsAll = addressWords.flatMap(w => normalizeZoneStringAll(w));

    // --- –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ zoneKey –≤—ã—à–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤–µ–∑–¥–µ ---
    let foundZone = null;
    let debugCompare = [];
    for (const z of allZonesForResult) {
      const zoneNameWords = normalizeZoneString(z.name).split(' ');
      const zoneKeyWords = normalizeZoneString(z.key).split(' ');
      const zoneWordsAll = [...zoneNameWords, ...zoneKeyWords].flatMap(w => normalizeZoneStringAll(w));
      debugCompare.push({
        zone: z.key,
        zoneWordsAll,
        addressWordsAll
      });
      if (
        addressWordsAll.some(word => zoneWordsAll.includes(word))
      ) {
        foundZone = z;
        break;
      }
    }
    if (foundZone) {
      zoneKey = foundZone.key;
    }

    if (deliveryMethod && typeof deliveryMethod === 'string' && deliveryMethod.toLowerCase().includes('cdek')) {
      res.json({ deliveryMethods: result, zone, zoneKey });
      return;
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('=== DEBUG ZONE DETECTION ===');
    console.log('–ê–¥—Ä–µ—Å:', address);
    console.log('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:', normalizedAddress);
    console.log('addressWordsAll:', addressWordsAll);
    console.log('zoneKey:', zoneKey);
    console.log('–ù–∞–π–¥–µ–Ω–Ω–∞—è –∑–æ–Ω–∞:', foundZone);
    console.log('–í—Å–µ –∫–ª—é—á–∏ –∑–æ–Ω:', allZonesForResult.map(z => ({ key: z.key, name: z.name, price: z.price })));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    result.forEach((method, index) => {
      console.log(`=== DEBUG METHOD ${index + 1}: ${method.name} ===`);
      console.log('costType:', method.costType);
      console.log('useZones:', method.useZones);
      console.log('zoneKeys:', method.zoneKeys);
      console.log('zonePrices:', method.zonePrices);
      if (method.zonePrices && zoneKey) {
        console.log(`zonePrices[${zoneKey}]:`, method.zonePrices[zoneKey]);
      }
      console.log('fixedCost:', method.fixedCost);
    });
    console.log('=== END DEBUG ===');

    res.json({ deliveryMethods: result, zone, zoneKey, cdekPVZList });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏' });
  }
}; 