const mongoose = require('mongoose');

// –°—Ö–µ–º–∞ –∑–∞–∫–∞–∑–∞
const orderSchema = new mongoose.Schema({
  orderNumber: String,
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  items: [{
    productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product' },
    quantity: Number,
    price: Number
  }],
  total: Number,
  status: { type: String, default: 'pending' },
  paymentMethod: String,
  deliveryMethod: { type: mongoose.Schema.Types.ObjectId, ref: 'DeliveryMethod' },
  deliveryDate: String,
  deliveryTime: String,
  deliveryAddress: String,
  notes: String,
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

const Order = mongoose.model('Order', orderSchema);

mongoose.connect('mongodb://localhost:27017/technoline')
  .then(async () => {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      const orders = await Order.find({}).populate('userId', 'email firstName lastName');
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);
      
      if (orders.length === 0) {
        console.log('‚ùå –ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      } else {
        orders.forEach((order, index) => {
          console.log(`${index + 1}. –ó–∞–∫–∞–∑ #${order.orderNumber}`);
          console.log(`   ID: ${order._id}`);
          console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${order.userId ? order.userId.email : '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
          console.log(`   –°—Ç–∞—Ç—É—Å: ${order.status}`);
          console.log(`   –°—É–º–º–∞: ${order.total} ‚ÇΩ`);
          console.log(`   –î–∞—Ç–∞: ${order.createdAt}`);
          console.log('---');
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
    process.exit();
  })
  .catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    process.exit(1);
  }); 