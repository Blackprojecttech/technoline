const mongoose = require('mongoose');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect('mongodb://localhost:27017/technoline-store', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// –°—Ö–µ–º–∞ —Ç–æ–≤–∞—Ä–∞
const productSchema = new mongoose.Schema({
  name: String,
  slug: String,
  description: String,
  price: Number,
  costPrice: Number,
  currency: String,
  sku: String,
  categoryId: {
    _id: String,
    name: String,
    slug: String
  },
  images: [String],
  mainImage: String,
  isActive: Boolean,
  isFeatured: Boolean,
  inStock: Boolean,
  isAvailable: Boolean,
  stockQuantity: Number,
  tags: [String],
  specifications: [Object],
  createdAt: Date,
  updatedAt: Date
});

const Product = mongoose.model('Product', productSchema);

async function updateFeaturedProducts() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞–∫ featured...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const products = await Product.find({});
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞ –∫–∞–∫ featured
    const productsToUpdate = products.slice(0, 3);
    
    for (const product of productsToUpdate) {
      await Product.findByIdAndUpdate(product._id, { isFeatured: true });
      console.log(`‚úÖ –¢–æ–≤–∞—Ä "${product.name}" –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ featured`);
    }
    
    console.log('üéâ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
  } finally {
    mongoose.connection.close();
  }
}

updateFeaturedProducts(); 