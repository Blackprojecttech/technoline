import { useState, useEffect } from 'react';

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ VAPID –∫–ª—é—á–∞
function urlBase64ToUint8Array(base64String: string): Uint8Array {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding)
    .replace(/-/g, '+')
    .replace(/_/g, '/');

  const rawData = window.atob(base64);
  const outputArray = new Uint8Array(rawData.length);

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function getNotificationPermission(): NotificationPermission {
  if (typeof window === 'undefined' || !('Notification' in window)) {
    console.log('üîç getNotificationPermission: Notification API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º default');
    return 'default';
  }
  const permission = Notification.permission;
  console.log('üîç getNotificationPermission: —Ç–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ', permission);
  return permission;
}

export interface PushNotificationState {
  isSupported: boolean;
  permission: NotificationPermission;
  isSubscribed: boolean;
  subscription: PushSubscription | null;
}

export function usePushNotifications() {
  const [state, setState] = useState<PushNotificationState>({
    isSupported: false,
    permission: 'default',
    isSubscribed: false,
    subscription: null,
  });

  const [isLoading, setIsLoading] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  useEffect(() => {
    const checkSupport = async () => {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      const hasServiceWorker = 'serviceWorker' in navigator;
      const hasPushManager = 'PushManager' in window;
      const hasNotification = 'Notification' in window;
             // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º HTTP
       const isDevelopment = process.env.NODE_ENV !== 'production';
       const isLocalNetwork = location.hostname.startsWith('192.168.') ||
                              location.hostname.startsWith('10.') ||
                              location.hostname.startsWith('172.') ||
                              location.hostname === 'localhost';
       
       const isSecureContext = window.isSecureContext || 
                               location.protocol === 'https:' || 
                               (isDevelopment && isLocalNetwork);
      
             console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞:', {
         hasServiceWorker,
         hasPushManager,
         hasNotification,
         isSecureContext,
         isDevelopment,
         isLocalNetwork,
         protocol: location.protocol,
         hostname: location.hostname,
         userAgent: navigator.userAgent,
         standalone: (window.navigator as any).standalone,
         isIOS: /iPad|iPhone|iPod/.test(navigator.userAgent),
         displayMode: window.matchMedia('(display-mode: standalone)').matches ? 'standalone' : 'browser'
       });

             // –î–ª—è iOS Safari PWA –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
       const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
       const isStandalone = (window.navigator as any).standalone === true || 
                           window.matchMedia('(display-mode: standalone)').matches;
       
       let isSupported = hasServiceWorker && hasPushManager && hasNotification && isSecureContext;
       
               // –ù–∞ iOS push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ PWA —Ä–µ–∂–∏–º–µ (–∫—Ä–æ–º–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        if (isIOS && !isDevelopment) {
          isSupported = isSupported && isStandalone;
        }
        
        if (isIOS) {
          console.log('üì± iOS Safari –ø—Ä–æ–≤–µ—Ä–∫–∞:', {
            isIOS,
            isStandalone,
            isDevelopment,
            standalone: (window.navigator as any).standalone,
            displayMode: window.matchMedia('(display-mode: standalone)').matches
          });
        }

      if (isSupported) {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Service Worker
        try {
          console.log('üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Service Worker...');
          const registration = await navigator.serviceWorker.register('/sw.js');
          console.log('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
          const subscription = await registration.pushManager.getSubscription();
          console.log('üì° –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:', subscription);
          
          setState({
            isSupported: true,
            permission: getNotificationPermission(),
            isSubscribed: !!subscription,
            subscription,
          });

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ PWA —Ä–µ–∂–∏–º–µ
          console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ PWA —Ä–µ–∂–∏–º–∞:', {
            isStandalone,
            standalone: (window.navigator as any).standalone,
            displayMode: window.matchMedia('(display-mode: standalone)').matches,
            permission: getNotificationPermission(),
            hasNotification: 'Notification' in window
          });
          
          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–ª—è PWA
          const shouldRequestPermission = getNotificationPermission() === 'default' && 'Notification' in window;
          
          if (shouldRequestPermission) {
            const requestDelay = isStandalone ? 1000 : 3000; // PWA –±—ã—Å—Ç—Ä–µ–µ, –æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –º–µ–¥–ª–µ–Ω–Ω–µ–µ
            console.log(`üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (${isStandalone ? 'PWA' : '–±—Ä–∞—É–∑–µ—Ä'}) —á–µ—Ä–µ–∑ ${requestDelay}ms`);
              
              // –ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –±—Ä–∞—É–∑–µ—Ä–∞
              setTimeout(async () => {
                try {
                  if (!('Notification' in window)) {
                    console.log('‚ùå Notification API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                    return;
                  }
                  
                  const permission = await Notification.requestPermission();
                  console.log('üì± –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', permission);
                  
                  setState(prev => ({ ...prev, permission }));
                  
                  if (permission === 'granted' && !subscription) {
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    const newSubscription = await registration.pushManager.subscribe({
                      userVisibleOnly: true,
                      applicationServerKey: urlBase64ToUint8Array(
                        'BCQmdw7UtjDaFV260LXlR3JuVxtojy_L2J8epI5ouclHmUSN1KC85FyuJtIY34RqhmPmn-SQh27jhh1PwKlZ-T8'
                      ),
                    });

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                    await fetch(`${process.env.NEXT_PUBLIC_API_URL}/notifications/subscribe`, {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`,
                      },
                      body: JSON.stringify({
                        subscription: newSubscription,
                        userAgent: navigator.userAgent,
                      }),
                    });

                    console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
                    
                    setState(prev => ({
                      ...prev,
                      isSubscribed: true,
                      subscription: newSubscription,
                    }));
                  }
                } catch (error) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:', error);
                }
              }, requestDelay);
          }
          
          // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –¥–∞–Ω–æ, –Ω–æ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          if (getNotificationPermission() === 'granted' && !subscription) {
              console.log('üîî –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è');
              
              setTimeout(async () => {
                try {
                  const newSubscription = await registration.pushManager.subscribe({
                    userVisibleOnly: true,
                    applicationServerKey: urlBase64ToUint8Array(
                      'BCQmdw7UtjDaFV260LXlR3JuVxtojy_L2J8epI5ouclHmUSN1KC85FyuJtIY34RqhmPmn-SQh27jhh1PwKlZ-T8'
                    ),
                  });

                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                  await fetch(`${process.env.NEXT_PUBLIC_API_URL}/notifications/subscribe`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                      'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    },
                    body: JSON.stringify({
                      subscription: newSubscription,
                      userAgent: navigator.userAgent,
                    }),
                  });

                  console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
                  
                  setState(prev => ({
                    ...prev,
                    isSubscribed: true,
                    subscription: newSubscription,
                  }));
                } catch (error) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:', error);
                }
            }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ 0.5 —Å–µ–∫—É–Ω–¥—ã
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
          setState({
            isSupported: false,
            permission: getNotificationPermission(),
            isSubscribed: false,
            subscription: null,
          });
        }
      } else {
        console.log('‚ùå Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:', {
          hasServiceWorker,
          hasPushManager,
          hasNotification,
          isSecureContext
        });
        setState({
          isSupported: false,
          permission: getNotificationPermission(),
          isSubscribed: false,
          subscription: null,
        });
      }
    };

    checkSupport();
  }, []);

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const requestPermission = async (): Promise<boolean> => {
    if (!state.isSupported) {
      alert('Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      return false;
    }

    if (!('Notification' in window)) {
      alert('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      return false;
    }

    setIsLoading(true);
    try {
      const permission = await Notification.requestPermission();
      
      setState(prev => ({
        ...prev,
        permission,
      }));

      if (permission === 'granted') {
        await subscribe();
        return true;
      } else {
        alert('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
        return false;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const subscribe = async (): Promise<boolean> => {
    if (!state.isSupported || state.permission !== 'granted') {
      return false;
    }

    if (!('Notification' in window)) {
      return false;
    }

    setIsLoading(true);
    try {
      const registration = await navigator.serviceWorker.ready;
      
              // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VAPID –∫–ª—é—á–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–ª—é—á–∏)
        const subscription = await registration.pushManager.subscribe({
          userVisibleOnly: true,
          applicationServerKey: urlBase64ToUint8Array(
            // –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π VAPID –∫–ª—é—á, –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ
            'BCQmdw7UtjDaFV260LXlR3JuVxtojy_L2J8epI5ouclHmUSN1KC85FyuJtIY34RqhmPmn-SQh27jhh1PwKlZ-T8'
          ),
        });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'https://technoline-api.loca.lt/api'}/notifications/subscribe`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
        },
        body: JSON.stringify({
          subscription,
          userAgent: navigator.userAgent,
        }),
      });

      setState(prev => ({
        ...prev,
        isSubscribed: true,
        subscription,
      }));

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const unsubscribe = async (): Promise<boolean> => {
    if (!state.subscription) {
      return false;
    }

    setIsLoading(true);
    try {
      await state.subscription.unsubscribe();

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –æ—Ç–ø–∏—Å–∫–µ
      await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'https://technoline-api.loca.lt/api'}/notifications/unsubscribe`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
        },
        body: JSON.stringify({
          endpoint: state.subscription.endpoint,
        }),
      });

      setState(prev => ({
        ...prev,
        isSubscribed: false,
        subscription: null,
      }));

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  return {
    ...state,
    isLoading,
    requestPermission,
    subscribe,
    unsubscribe,
  };
} 