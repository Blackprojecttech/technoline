'use client';

import { useState, useEffect } from 'react';

export default function PWAUpdatePrompt() {
  const [showUpdatePrompt, setShowUpdatePrompt] = useState(false);
  const [waitingWorker, setWaitingWorker] = useState<ServiceWorker | null>(null);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∞–π—Ç –∫–∞–∫ PWA –≤–∏–¥–∂–µ—Ç
    const isPWAWidget = () => {
      const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
      const isIOSStandalone = (window.navigator as any).standalone === true;
      return isStandalone || isIOSStandalone;
    };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º PWA –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–∂–µ—Ç–µ Safari
    if (!isPWAWidget()) {
      return;
    }

    if ('serviceWorker' in navigator) {
      const handleServiceWorkerUpdate = (registration: ServiceWorkerRegistration) => {
        const worker = registration.waiting;
        if (worker) {
          setWaitingWorker(worker);
          setShowUpdatePrompt(true);
        }
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Service Worker
      navigator.serviceWorker.ready.then(registration => {
        // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;
          if (newWorker) {
            newWorker.addEventListener('statechange', () => {
              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                handleServiceWorkerUpdate(registration);
              }
            });
          }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–∂–∏–¥–∞—é—â–∏–π worker
        if (registration.waiting) {
          handleServiceWorkerUpdate(registration);
        }
      });

      // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Service Worker
      navigator.serviceWorker.addEventListener('message', (event) => {
        if (event.data && event.data.type === 'SW_UPDATED') {
          setShowUpdatePrompt(true);
        }
      });
    }
  }, []);

  const handleUpdate = () => {
    if (waitingWorker) {
      waitingWorker.postMessage({ type: 'SKIP_WAITING' });
      setShowUpdatePrompt(false);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
      setTimeout(() => {
        window.location.reload();
      }, 500);
    }
  };

  const handleDismiss = () => {
    setShowUpdatePrompt(false);
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    sessionStorage.setItem('pwa-update-dismissed', 'true');
  };

  if (!showUpdatePrompt || sessionStorage.getItem('pwa-update-dismissed')) {
    return null;
  }

  return (
    <div className="fixed top-4 left-4 right-4 z-50 max-w-md mx-auto">
      <div className="bg-green-50 border border-green-200 rounded-lg shadow-lg p-4">
        <div className="flex items-start gap-3">
          {/* –ò–∫–æ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
          <div className="flex-shrink-0">
            <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
              <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
            </div>
          </div>

          {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
          <div className="flex-1 min-w-0">
            <h3 className="text-sm font-semibold text-green-900 mb-1">
              üéâ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!
            </h3>
            <p className="text-xs text-green-700 mb-3">
              –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ. –û–±–Ω–æ–≤–∏—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —É–ª—É—á—à–µ–Ω–∏–π.
            </p>

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div className="flex gap-2">
              <button
                onClick={handleUpdate}
                className="flex-1 bg-green-600 hover:bg-green-700 text-white text-xs font-medium py-2 px-3 rounded-md transition-colors duration-200"
              >
                üöÄ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å
              </button>
              <button
                onClick={handleDismiss}
                className="flex-shrink-0 bg-gray-100 hover:bg-gray-200 text-gray-700 text-xs font-medium py-2 px-3 rounded-md transition-colors duration-200"
              >
                –ü–æ–∑–∂–µ
              </button>
            </div>
          </div>
        </div>

        {/* –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ */}
        <div className="mt-3 pt-3 border-t border-green-100">
          <div className="flex items-center gap-4 text-xs text-green-600">
            <span className="flex items-center gap-1">
              ‚ö° –ë—ã—Å—Ç—Ä–µ–µ –∑–∞–≥—Ä—É–∑–∫–∞
            </span>
            <span className="flex items-center gap-1">
              üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
            </span>
            <span className="flex items-center gap-1">
              ‚ú® –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            </span>
          </div>
        </div>
      </div>
    </div>
  );
} 