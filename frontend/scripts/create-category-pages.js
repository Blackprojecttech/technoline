const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function createCategoryPage(slug, name) {
  const pageContent = `import { Metadata } from 'next';
import CategoryPage from '@/components/CategoryPage';

export const metadata: Metadata = {
  title: '${name} - Techno-line.store',
  description: '${name} - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º –≤ Techno-line.store',
};

export default function ${name.replace(/[^a-zA-Z0-9]/g, '')}Page() {
  return <CategoryPage slug="${slug}" />;
}
`;

  const pageDir = path.join(__dirname, '..', 'app', 'catalog', slug);
  const pagePath = path.join(pageDir, 'page.tsx');

  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!fs.existsSync(pageDir)) {
    fs.mkdirSync(pageDir, { recursive: true });
  }

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
  fs.writeFileSync(pagePath, pageContent);
  console.log(`‚úÖ Created page for: ${name} (${slug})`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ API
async function fetchCategories() {
  try {
    const response = await fetch('http://localhost:5002/api/categories');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error('‚ùå Error fetching categories:', error);
    return [];
  }
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function createPagesForCategories(categories) {
  categories.forEach(category => {
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    createCategoryPage(category.slug, category.name);
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (category.children && category.children.length > 0) {
      createPagesForCategories(category.children);
    }
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ Starting category pages creation...');
  
  const categories = await fetchCategories();
  
  if (categories.length === 0) {
    console.log('‚ùå No categories found');
    return;
  }
  
  console.log(`üì¶ Found ${categories.length} root categories`);
  
  createPagesForCategories(categories);
  
  console.log('‚úÖ All category pages created successfully!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(console.error); 