import React, { useState, useCallback } from 'react';
import { useQuery } from 'react-query';
import { useNavigate } from 'react-router-dom';
import { 
  Table, 
  Card, 
  Typography, 
  Button, 
  Tag, 
  Select, 
  Space, 
  Modal, 
  Form, 
  Input,
  message,
  Row,
  Col,
  Statistic,
  Progress,
  Tooltip,
  Divider,
  InputNumber,
  DatePicker,
  TimePicker,
  Upload,
  Image,
  Calendar
} from 'antd';
import { 
  EyeOutlined, 
  EditOutlined, 
  DeleteOutlined, 
  PlusOutlined, 
  SearchOutlined, 
  ExclamationCircleOutlined, 
  CheckCircleOutlined, 
  ClockCircleOutlined, 
  ShoppingCartOutlined, 
  DollarOutlined, 
  UserOutlined,
  PhoneOutlined,
  HomeOutlined,
  TruckOutlined,
  CloseOutlined
} from '@ant-design/icons';
import { useOrderStats } from '../hooks/useOrderStats';
import './Orders.css';
import { CSSTransition } from 'react-transition-group';
import dayjs from 'dayjs';
import { io, Socket } from 'socket.io-client';
import { useEffect, useRef } from 'react';

const { Title } = Typography;
const { Option } = Select;
const { TextArea } = Input;

interface Order {
  _id: string;
  orderNumber: string;
  userId: {
    _id: string;
    firstName: string;
    lastName: string;
    email: string;
  };
  items: Array<{
    productId: string;
    name: string;
    price: number;
    quantity: number;
    image: string;
    sku: string;
  }>;
  subtotal: number;
  shipping: number;
  total: number;
  status: string;
  paymentStatus: string;
  paymentMethod: string;
  deliveryMethod?: {
    _id: string;
    name: string;
    type: string;
    price: number;
  };
  deliveryDate?: string; // 'today', 'tomorrow', 'day3' (—Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)
  shippingAddress: {
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    address: string;
    city: string;
    state: string;
    zipCode: string;
    country: string;
  };
  trackingNumber?: string;
  estimatedDelivery?: string;
  notes?: string;
  createdAt: string;
  updatedAt: string;
  cdekPvzAddress?: string; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ü–í–ó –°–î–≠–ö
  cdekDeliveryDate?: string; // –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –°–î–≠–ö
  deliveryInterval?: string; // –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏
  callRequest?: boolean; // –ó–∞–ø—Ä–æ—Å –∑–≤–æ–Ω–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  callStatus?: 'requested' | 'completed' | 'not_completed'; // –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
}

interface DeliveryMethod {
  _id: string;
  name: string;
  type: string;
  costType: 'fixed' | 'percentage' | 'zone';
  fixedCost?: number;
  costPercentage?: number;
  isActive: boolean;
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  earlyOrderIntervals?: string[];
  lateOrderIntervals?: string[];
  orderTransitionTime?: string;
  useFlexibleIntervals?: boolean;
  intervalType?: 'standard' | 'flexible' | 'cdek';
  customInterval1?: string;
  customInterval2?: string;
}

interface Product {
  _id: string;
  name: string;
  price: number;
  sku: string;
  mainImage: string;
  stockQuantity: number;
}

interface OrdersResponse {
  orders: Order[];
  page: number;
  pages: number;
  total: number;
}

async function fetchOrders(page: number = 1, status?: string, limit: number = 20): Promise<OrdersResponse> {
  const token = localStorage.getItem('admin_token');
  if (!token) throw new Error('No auth token');
  
  let url = `${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/orders?page=${page}&limit=${limit}`;
  if (status) url += `&status=${status}`;
  
  const response = await fetch(url, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (!response.ok) throw new Error('Failed to fetch orders');
  return response.json();
}

async function fetchDeliveryMethods(): Promise<DeliveryMethod[]> {
  const token = localStorage.getItem('admin_token');
  if (!token) throw new Error('No auth token');
  
  const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/delivery`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (!response.ok) throw new Error('Failed to fetch delivery methods');
  const data = await response.json();
  return data.deliveryMethods || [];
}

async function fetchProducts(): Promise<Product[]> {
  const token = localStorage.getItem('admin_token');
  if (!token) throw new Error('No auth token');
  
  const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/products`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (!response.ok) throw new Error('Failed to fetch products');
  const data = await response.json();
  return data.products || [];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
function formatDeliveryDate(dateStr: string | undefined): string {
  if (!dateStr) return '';
  
  // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
  if (/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) {
    const [year, month, day] = dateStr.split('-');
    const dateObj = new Date(Number(year), Number(month) - 1, Number(day));
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const tomorrow = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
    const deliveryDate = new Date(Number(year), Number(month) - 1, Number(day));
    
    if (deliveryDate.getTime() === today.getTime()) {
      return `–°–µ–≥–æ–¥–Ω—è, ${dateObj.toLocaleDateString('ru-RU', { month: 'long', day: 'numeric' })}`;
    } else if (deliveryDate.getTime() === tomorrow.getTime()) {
      return `–ó–∞–≤—Ç—Ä–∞, ${dateObj.toLocaleDateString('ru-RU', { month: 'long', day: 'numeric' })}`;
    } else {
      return dateObj.toLocaleDateString('ru-RU', { month: 'long', day: 'numeric' });
    }
  }
  
  // –ï—Å–ª–∏ today/tomorrow/day3 ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É
  const now = new Date();
  if (dateStr === 'today') {
    return `–°–µ–≥–æ–¥–Ω—è, ${now.toLocaleDateString('ru-RU', { month: 'long', day: 'numeric' })}`;
  }
  if (dateStr === 'tomorrow') {
    const tomorrow = new Date(now);
    tomorrow.setDate(now.getDate() + 1);
    return `–ó–∞–≤—Ç—Ä–∞, ${tomorrow.toLocaleDateString('ru-RU', { month: 'long', day: 'numeric' })}`;
  }
  if (dateStr === 'day3') {
    const day3 = new Date(now);
    day3.setDate(now.getDate() + 2);
    return `–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞, ${day3.toLocaleDateString('ru-RU', { month: 'long', day: 'numeric' })}`;
  }
  return dateStr;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
function getDeliveryDateTime(order: Order): string {
  if (!order?.deliveryDate) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  
  const dateText = formatDeliveryDate(order.deliveryDate);
  
  if (order?.deliveryInterval) {
    return `${dateText} –≤ ${order.deliveryInterval}`;
  } else {
    return dateText;
  }
}

function normalizeDeliveryDate(dateStr: string | undefined): string | undefined {
  if (!dateStr) return undefined;
  const now = new Date();
  if (dateStr === 'today') {
    return now.toISOString().slice(0, 10);
  }
  if (dateStr === 'tomorrow') {
    const tomorrow = new Date(now);
    tomorrow.setDate(now.getDate() + 1);
    return tomorrow.toISOString().slice(0, 10);
  }
  if (dateStr === 'day3') {
    const day3 = new Date(now);
    day3.setDate(now.getDate() + 2);
    return day3.toISOString().slice(0, 10);
  }
  return dateStr;
}

const Orders: React.FC = React.memo(() => {
  const navigate = useNavigate();
  const [selectedStatus, setSelectedStatus] = useState<string>('');
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(20);
  const [isUpdateModalVisible, setIsUpdateModalVisible] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [form] = Form.useForm();
  const { data: orderStats } = useOrderStats();
  const [availableTimeIntervals, setAvailableTimeIntervals] = useState<string[]>([]);
  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);
  const [isBulkStatusModalVisible, setIsBulkStatusModalVisible] = useState(false);
  const [isBulkDeleteModalVisible, setIsBulkDeleteModalVisible] = useState(false);
  const [bulkStatus, setBulkStatus] = useState<string>('');
  const [isBulkLoading, setIsBulkLoading] = useState(false);
  const [isCallConfirmationModalVisible, setIsCallConfirmationModalVisible] = useState(false);
  const [orderForCallConfirmation, setOrderForCallConfirmation] = useState<Order | null>(null);
  // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ callStatuses, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º callStatus –∏–∑ –∑–∞–∫–∞–∑–∞

  // Socket.IO –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
  const socketRef = useRef<Socket | null>(null);
  const [ordersData, setOrdersData] = useState<Order[]>([]);
  
  useEffect(() => {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO
    const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:5002/api';
    const socketUrl = apiUrl.replace('/api', '');
    
    console.log('üîå Admin connecting to Socket.IO:', socketUrl);
    
    const socket = io(socketUrl, {
      transports: ['websocket', 'polling']
    });

    socketRef.current = socket;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    socket.on('connect', () => {
      console.log('üîå Admin Socket.IO connected:', socket.id);
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ–±—â–µ–π –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–∫–∞–∑–æ–≤
      socket.emit('joinOrderRoom', 'general');
      console.log('üîå Admin joined general room');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', () => {
      console.log('üîå Admin Socket.IO disconnected');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    socket.on('connect_error', (error: Error) => {
      console.error('üîå Admin Socket.IO connection error:', error);
    });

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
    socket.on('order-updated', (data: { orderId: string; type: string; callRequest?: boolean; callStatus?: string }) => {
      console.log('üì¶ Admin received order update via Socket.IO:', data);
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–∫–µ
      if (data.type === 'call-request' || data.type === 'call-status') {
        setOrdersData(prevOrders => 
          prevOrders.map(order => 
            order._id === data.orderId 
              ? { 
                  ...order, 
                  callRequest: data.callRequest !== undefined ? data.callRequest : order.callRequest,
                  callStatus: data.callStatus !== undefined ? (data.callStatus as 'requested' | 'completed' | 'not_completed') : order.callStatus
                }
              : order
          )
        );
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
        refetch();
      }
    });

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (socketRef.current) {
        socketRef.current.disconnect();
        socketRef.current = null;
      }
    };
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  const { data: deliveryMethods = [] } = useQuery<DeliveryMethod[]>({
    queryKey: ['deliveryMethods'],
    queryFn: fetchDeliveryMethods,
    enabled: !!localStorage.getItem('admin_token'),
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    cacheTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
    refetchOnWindowFocus: false,
    refetchOnMount: false,
  });

  const { data: products = [] } = useQuery<Product[]>({
    queryKey: ['products'],
    queryFn: fetchProducts,
    enabled: !!localStorage.getItem('admin_token'),
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    cacheTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
    refetchOnWindowFocus: false,
    refetchOnMount: false,
  });

  const { data, isLoading, error, refetch } = useQuery<OrdersResponse>({
    queryKey: ['adminOrders', currentPage, selectedStatus, pageSize],
    queryFn: () => fetchOrders(currentPage, selectedStatus, pageSize),
    retry: 1,
    retryDelay: 1000,
    enabled: !!localStorage.getItem('admin_token'),
    staleTime: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥
    refetchOnWindowFocus: false,
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (data?.orders) {
      setOrdersData(data.orders);
    }
  }, [data?.orders]);

  const getStatusColor = useCallback((status: string) => {
    switch (status) {
      case 'pending': return 'orange';
      case 'confirmed': return 'blue';
      case 'processing': return 'purple';
      case 'shipped': return 'indigo';
      case 'delivered': return 'green';
      case 'cancelled': return 'red';
      default: return 'default';
    }
  }, []);

  const getStatusText = useCallback((status: string) => {
    switch (status) {
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
      case 'confirmed': return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω';
      case 'processing': return '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ';
      case 'shipped': return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω';
      case 'delivered': return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω';
      default: return status;
    }
  }, []);

  const getPaymentMethodText = useCallback((method: string) => {
    switch (method) {
      case 'card': return '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞';
      case 'cash': return '–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏';
      case 'bank_transfer': return '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥';
      default: return method;
    }
  }, []);

  const getDeliveryDateText = useCallback((date: string | undefined, deliveryMethod?: any) => {
    if (!date) return '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    
    // –î–ª—è –°–î–≠–ö –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏
    if (deliveryMethod?.name && deliveryMethod.name.toLowerCase().includes('—Å–¥—ç–∫')) {
      return '–°–î–≠–ö';
    }
    
    switch (date) {
      case 'today': return '–°–µ–≥–æ–¥–Ω—è';
      case 'tomorrow': return '–ó–∞–≤—Ç—Ä–∞';
      case 'day3': return '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞';
      default: return date;
    }
  }, []);



  const handleStatusChange = useCallback((value: string) => {
    setSelectedStatus(value);
    setCurrentPage(1);
  }, []);

  const handlePageSizeChange = useCallback((current: number, size: number) => {
    setPageSize(size);
    setCurrentPage(1);
  }, []);

  const handleUpdateOrder = useCallback(async (values: any) => {
    if (!selectedOrder) return;

    try {
      const token = localStorage.getItem('admin_token');
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const updateData = {
        status: values.status,
        paymentStatus: values.paymentStatus,
        paymentMethod: values.paymentMethod,
        deliveryMethod: values.deliveryMethod,
        deliveryDate: values.deliveryDate ? values.deliveryDate.format('YYYY-MM-DD') : undefined,
        trackingNumber: values.trackingNumber,
        estimatedDelivery: values.estimatedDelivery,
        notes: values.notes,
        shipping: values.shipping,
        deliveryInterval: values.deliveryInterval, // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏
        cdekPvzAddress: values.cdekPvzAddress, // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –ü–í–ó –°–î–≠–ö
        // –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        firstName: values.firstName,
        lastName: values.lastName,
        email: values.email,
        phone: values.phone,
        address: values.address,
        city: values.city,
        state: values.state,
        zipCode: values.zipCode,
        country: values.country,
        // –¢–æ–≤–∞—Ä—ã
        items: values.items
      };

      console.log('üì§ Sending order update:', {
        orderId: selectedOrder._id,
        updateData: updateData,
        shippingValue: values.shipping,
        shippingType: typeof values.shipping
      });

      const response = await fetch(
        `${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/orders/${selectedOrder._id}`,
        {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(updateData)
        }
      );

      console.log('üì• Response status:', response.status);

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Order updated successfully:', result);
        message.success('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
        closeModal();
        refetch();
      } else {
        const errorData = await response.json();
        console.error('‚ùå Error updating order:', errorData);
        message.error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
      }
    } catch (error) {
      console.error('‚ùå Network error:', error);
      message.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  }, [selectedOrder, refetch]);

  const showUpdateModal = React.useCallback((order: Order) => {
    setSelectedOrder(order);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    let intervals: string[] = [];
    if (order.deliveryMethod?._id) {
      const selectedMethod = deliveryMethods.find(m => m._id === order.deliveryMethod?._id);
      if (selectedMethod) {
        const methodName = selectedMethod.name.toLowerCase();
        
        if (methodName.includes('—Å–¥—ç–∫') || methodName.includes('cdek')) {
          // –î–ª—è –°–î–≠–ö –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
          intervals = [];
        } else if (methodName.includes('—Å—Ä–æ—á–Ω–∞—è') || methodName.includes('—Å–∞–º–æ–≤—ã–≤–æ–∑')) {
          // –î–ª—è —Å—Ä–æ—á–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
          if (selectedMethod.customInterval1) {
            intervals.push(selectedMethod.customInterval1);
          }
          if (selectedMethod.customInterval2) {
            intervals.push(selectedMethod.customInterval2);
          }
          // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
          if (intervals.length === 0) {
            intervals = ['10:00-12:00', '12:00-14:00', '14:00-16:00', '16:00-18:00', '18:00-19:00'];
          }
        } else {
          // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
          if (selectedMethod.useFlexibleIntervals) {
            if (selectedMethod.earlyOrderIntervals && selectedMethod.earlyOrderIntervals.length > 0) {
              intervals = [...intervals, ...selectedMethod.earlyOrderIntervals];
            }
            if (selectedMethod.lateOrderIntervals && selectedMethod.lateOrderIntervals.length > 0) {
              intervals = [...intervals, ...selectedMethod.lateOrderIntervals];
            }
          } else {
            if (selectedMethod.customInterval1) {
              intervals.push(selectedMethod.customInterval1);
            }
            if (selectedMethod.customInterval2) {
              intervals.push(selectedMethod.customInterval2);
            }
          }
          
          if (intervals.length === 0) {
            intervals = ['13:00-17:00', '17:00-21:00'];
          }
        }
      }
    }
    setAvailableTimeIntervals(intervals);
    
    form.setFieldsValue({
      status: order.status,
      paymentStatus: order.paymentStatus,
      paymentMethod: order.paymentMethod,
      deliveryMethod: order.deliveryMethod?._id,
      deliveryDate: order.deliveryDate ? dayjs(normalizeDeliveryDate(order.deliveryDate)) : null,
      trackingNumber: order.trackingNumber || '',
      estimatedDelivery: order.estimatedDelivery ? new Date(order.estimatedDelivery).toISOString().split('T')[0] : 
                       (order.cdekDeliveryDate ? new Date(order.cdekDeliveryDate).toISOString().split('T')[0] : ''),
      notes: order.notes || '',
      shipping: order.shipping || 0,
      deliveryInterval: order.deliveryInterval || '',
      callRequest: order.callRequest || false,
      cdekPvzAddress: order.cdekPvzAddress || '',
      // –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      firstName: order.shippingAddress.firstName,
      lastName: order.shippingAddress.lastName,
      email: order.shippingAddress.email,
      phone: order.shippingAddress.phone,
      address: order.shippingAddress.address,
      city: order.shippingAddress.city,
      state: order.shippingAddress.state,
      zipCode: order.shippingAddress.zipCode,
      country: order.shippingAddress.country,
      // –¢–æ–≤–∞—Ä—ã
      items: order.items
    });
    setIsUpdateModalVisible(true);
  }, [deliveryMethods]);



  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã (–¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—É–º–º)
  const forceUpdate = useCallback(() => {
    form.validateFields().then(() => {
      // –§–æ—Ä–º–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    });
  }, [form]);

  const calculateTotal = useCallback((items: any[]) => {
    return items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  }, []);

  const closeModal = useCallback(() => {
    setIsUpdateModalVisible(false);
    setSelectedOrder(null);
    form.resetFields();
  }, [form]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
  const showCallConfirmationModal = useCallback((order: Order) => {
    setOrderForCallConfirmation(order);
    setIsCallConfirmationModalVisible(true);
  }, []);

  const handleCallConfirmation = useCallback(async (called: boolean) => {
    if (!orderForCallConfirmation) return;
    
    try {
      const token = localStorage.getItem('admin_token');
      const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/orders/${orderForCallConfirmation._id}/call-status`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ called })
      });
      
      if (response.ok) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
        refetch();
        message.success(called ? '–ó–≤–æ–Ω–æ–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π' : '–ó–≤–æ–Ω–æ–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π');
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞');
      }
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsCallConfirmationModalVisible(false);
      setOrderForCallConfirmation(null);
    }
  }, [orderForCallConfirmation]);

  const closeCallConfirmationModal = useCallback(() => {
    setIsCallConfirmationModalVisible(false);
    setOrderForCallConfirmation(null);
  }, []);

  // –ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
  const handleBulkStatusChange = async () => {
    setIsBulkLoading(true);
    try {
      const token = localStorage.getItem('admin_token');
      const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/orders/bulk-update-status`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ orderIds: selectedRowKeys, status: bulkStatus })
      });
      if (response.ok) {
        message.success('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω');
        setSelectedRowKeys([]);
        setIsBulkStatusModalVisible(false);
        refetch();
      } else {
        const errorData = await response.json();
        message.error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
      }
    } catch (e) {
      message.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsBulkLoading(false);
    }
  };

  // –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
  const handleBulkDelete = async () => {
    setIsBulkLoading(true);
    try {
      const token = localStorage.getItem('admin_token');
      const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5002/api'}/orders/bulk-delete`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ orderIds: selectedRowKeys })
      });
      if (response.ok) {
        message.success('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã');
        setSelectedRowKeys([]);
        setIsBulkDeleteModalVisible(false);
        refetch();
      } else {
        const errorData = await response.json();
        message.error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤');
      }
    } catch (e) {
      message.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsBulkLoading(false);
    }
  };

  // rowSelection –¥–ª—è Table
  const rowSelection = {
    selectedRowKeys,
    onChange: (newSelectedRowKeys: React.Key[]) => setSelectedRowKeys(newSelectedRowKeys),
    preserveSelectedRowKeys: false,
  };

  const columns = React.useMemo(() => [
    {
      title: '–ó–∞–∫–∞–∑',
      key: 'order',
      render: (_: any, record: Order) => (
        <div className="space-y-1">
          <div className="font-mono font-semibold text-blue-600">
            {record.orderNumber}
          </div>
          <div className="text-xs text-gray-500">
            {new Date(record.createdAt).toLocaleDateString('ru-RU')} {new Date(record.createdAt).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
          </div>
        </div>
      )
    },
    {
      title: '–ö–ª–∏–µ–Ω—Ç',
      key: 'customer',
      render: (_: any, record: Order) => (
        <Tooltip title={record.userId.email}>
          <div className="cursor-pointer">
            <div className="font-medium flex items-center gap-1">
              <UserOutlined className="text-gray-400" />
              {record.userId.firstName} {record.userId.lastName}
            </div>
            <div className="text-xs text-gray-500 truncate max-w-[120px]">
              {record.userId.email}
            </div>
          </div>
        </Tooltip>
      )
    },
    {
      title: '–¢–æ–≤–∞—Ä—ã',
      key: 'items',
      render: (_: any, record: Order) => (
        <Tooltip title={record.items.map(item => item.name).join(', ')}>
          <div className="cursor-pointer">
            <div className="flex items-center gap-1">
              <ShoppingCartOutlined className="text-gray-400" />
              <span className="font-medium">{record.items.length}</span>
              <span className="text-xs text-gray-500">—à—Ç.</span>
            </div>
            <div className="text-xs text-gray-500 truncate max-w-[100px]">
              {record.items.slice(0, 1).map(item => item.name).join(', ')}
              {record.items.length > 1 && '...'}
            </div>
          </div>
        </Tooltip>
      )
    },
    {
      title: '–°—É–º–º–∞',
      dataIndex: 'total',
      key: 'total',
      render: (total: number, record: Order) => (
        <div>
          <div className="font-semibold text-green-600 flex items-center gap-1">
            <DollarOutlined />
            {total.toLocaleString()} ‚ÇΩ
          </div>
          <div className="text-xs text-gray-500">
            {record.paymentStatus === 'paid' ? '–û–ø–ª–∞—á–µ–Ω' : '–ù–µ –æ–ø–ª–∞—á–µ–Ω'}
          </div>
        </div>
      )
    },
    {
      title: '–°—Ç–∞—Ç—É—Å',
      dataIndex: 'status',
      key: 'status',
      render: (status: string) => {
        const statusConfig = {
          pending: { color: 'orange', icon: <ExclamationCircleOutlined /> },
          confirmed: { color: 'blue', icon: <CheckCircleOutlined /> },
          processing: { color: 'purple', icon: <ClockCircleOutlined /> },
          shipped: { color: 'indigo', icon: <ClockCircleOutlined /> },
          delivered: { color: 'green', icon: <CheckCircleOutlined /> },
          cancelled: { color: 'red', icon: <ExclamationCircleOutlined /> }
        };
        const config = statusConfig[status as keyof typeof statusConfig] || { color: 'default', icon: null };
        
        return (
          <Tag 
            color={config.color} 
            className={`status-tag ${status === 'pending' ? 'animate-pulse' : ''}`}
            style={{ animation: status === 'pending' ? 'pulse 2s infinite' : 'none' }}
          >
            <div className="flex items-center gap-1">
              {config.icon}
              <span className="text-xs font-medium leading-tight">{getStatusText(status)}</span>
            </div>
          </Tag>
        );
      }
    },
    {
      title: '–î–æ—Å—Ç–∞–≤–∫–∞',
      key: 'delivery',
      render: (_: any, record: Order) => (
        <div className="space-y-1">
          <div className="text-xs font-medium">
            {record.deliveryMethod?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
          </div>
          <div className="text-xs text-gray-500">
            {getDeliveryDateTime(record)}
          </div>
        </div>
      )
    },
    {
      title: '–ó–≤–æ–Ω–æ–∫',
      key: 'callRequest',
      render: (_: any, record: Order) => (
        <div className="flex items-center justify-center">
          {record.callRequest ? (
            record.callStatus === 'completed' ? (
              <Tag color="green" icon={<CheckCircleOutlined />} className="flex items-center gap-1">
                <span className="text-xs">–ó–≤–æ–Ω–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω</span>
              </Tag>
            ) : (
              <Tooltip title="–ö–ª–∏–∫–Ω–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–≤–æ–Ω–æ–∫ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π">
                <Button
                  type="text"
                  icon={<PhoneOutlined />}
                  className="phone-call-button"
                  onClick={() => showCallConfirmationModal(record)}
                />
              </Tooltip>
            )
          ) : (
            <span className="text-gray-400 text-xs">‚Äî</span>
          )}
        </div>
      )
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      render: (_: any, record: Order) => (
        <Space size="small">
          <Tooltip title="–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞">
            <Button 
              type="primary" 
              size="small" 
              icon={<EyeOutlined />}
              onClick={() => navigate(`/orders/${record._id}`)}
              className="hover:scale-105 transition-transform"
            />
          </Tooltip>
          <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑">
            <Button 
              size="small" 
              icon={<EditOutlined />}
              onClick={() => showUpdateModal(record)}
              className="hover:scale-105 transition-transform"
            />
          </Tooltip>
        </Space>
      )
    }
  ], [navigate, showUpdateModal, getStatusText, getDeliveryDateText, showCallConfirmationModal]);

  if (isLoading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</div>;
  if (error) return <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤</div>;

  // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –Ω–µ—Ç –≤ orderStats
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const todayOrders = data?.orders?.filter(order => {
    const created = new Date(order.createdAt);
    created.setHours(0, 0, 0, 0);
    return created.getTime() === today.getTime();
  }).length || 0;

  // –ù–æ–≤—ã–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π layout –∏ —Å—Ç–∏–ª–∏
  return (
    <>
      <div className="orders-page-responsive" style={{ 
        width: '100%', 
        maxWidth: 1400, 
        margin: '0 auto', 
        padding: '0', 
        background: 'none',
        paddingBottom: '20px' // –û—Ç—Å—Ç—É–ø –¥–ª—è –ø–∞–Ω–µ–ª–∏ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={{ marginBottom: 24 }}>
        <Title level={2} style={{ margin: 0, color: '#667eea', fontWeight: 700, letterSpacing: 0.5 }}>–ó–∞–∫–∞–∑—ã</Title>
        <div style={{ color: '#6b7280', fontSize: 16, marginTop: 4 }}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤</div>
      </div>

      {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –±–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
      <div style={{ display: 'flex', flexWrap: 'wrap', gap: 16, marginBottom: 32 }}>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(102,126,234,0.08)', border: 'none', background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)' }}>
          <Statistic title={<span style={{ color: '#667eea', fontWeight: 500 }}>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</span>} value={orderStats?.total || 0} prefix={<ShoppingCartOutlined />} />
        </Card>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(102,126,234,0.08)', border: 'none', background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)' }}>
          <Statistic title={<span style={{ color: '#10b981', fontWeight: 500 }}>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</span>} value={orderStats?.processing || 0} prefix={<ClockCircleOutlined />} />
        </Card>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(102,126,234,0.08)', border: 'none', background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)' }}>
          <Statistic title={<span style={{ color: '#ef4444', fontWeight: 500 }}>–û—Ç–º–µ–Ω–µ–Ω–æ</span>} value={orderStats?.cancelled || 0} prefix={<ExclamationCircleOutlined />} />
        </Card>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(102,126,234,0.08)', border: 'none', background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)' }}>
          <Statistic title={<span style={{ color: '#52c41a', fontWeight: 500 }}>–ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è</span>} value={todayOrders} prefix={<PlusOutlined />} />
        </Card>
      </div>

      {/* –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div style={{ display: 'flex', flexWrap: 'wrap', gap: 16, marginBottom: 32 }}>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(16,185,129,0.08)', border: 'none', background: 'linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%)' }}>
          <Statistic 
            title={<span style={{ color: '#10b981', fontWeight: 500 }}>–ü—Ä–∏–±—ã–ª—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è</span>} 
            value={orderStats?.todayProfit || 0} 
            prefix={<DollarOutlined />}
            suffix="‚ÇΩ"
            valueStyle={{ color: '#10b981' }}
          />
        </Card>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(59,130,246,0.08)', border: 'none', background: 'linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%)' }}>
          <Statistic 
            title={<span style={{ color: '#3b82f6', fontWeight: 500 }}>–û–±–æ—Ä–æ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è</span>} 
            value={orderStats?.todayRevenue || 0} 
            prefix={<DollarOutlined />}
            suffix="‚ÇΩ"
            valueStyle={{ color: '#3b82f6' }}
          />
        </Card>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(16,185,129,0.08)', border: 'none', background: 'linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%)' }}>
          <Statistic 
            title={<span style={{ color: '#10b981', fontWeight: 500 }}>–ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü</span>} 
            value={orderStats?.monthProfit || 0} 
            prefix={<DollarOutlined />}
            suffix="‚ÇΩ"
            valueStyle={{ color: '#10b981' }}
          />
        </Card>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(59,130,246,0.08)', border: 'none', background: 'linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%)' }}>
          <Statistic 
            title={<span style={{ color: '#3b82f6', fontWeight: 500 }}>–û–±–æ—Ä–æ—Ç –∑–∞ –º–µ—Å—è—Ü</span>} 
            value={orderStats?.monthRevenue || 0} 
            prefix={<DollarOutlined />}
            suffix="‚ÇΩ"
            valueStyle={{ color: '#3b82f6' }}
          />
        </Card>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ –∫–Ω–æ–ø–∫–∞ */}
      <div className="orders-header-bar" style={{
        display: 'flex', flexWrap: 'wrap', alignItems: 'center', justifyContent: 'space-between',
        gap: 16, marginBottom: 24, padding: '0 0 16px 0', borderBottom: '1px solid #e5e7eb',
        background: 'none'
      }}>
        <div style={{ display: 'flex', flexWrap: 'wrap', gap: 12, alignItems: 'center', justifyContent: 'flex-start', flex: 2 }}>
          <Select
            value={selectedStatus}
            onChange={handleStatusChange}
            placeholder="–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"
            style={{ minWidth: 160 }}
            allowClear
            size="middle"
          >
            <Option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</Option>
            <Option value="pending">–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</Option>
            <Option value="confirmed">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</Option>
            <Option value="processing">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</Option>
            <Option value="shipped">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω</Option>
            <Option value="delivered">–î–æ—Å—Ç–∞–≤–ª–µ–Ω</Option>
            <Option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</Option>
          </Select>
          <Select
            value={pageSize}
            onChange={(value) => {
              setPageSize(value);
              setCurrentPage(1);
            }}
            style={{ minWidth: 120 }}
            size="middle"
          >
            <Option value={10}>10 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</Option>
            <Option value={20}>20 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</Option>
            <Option value={50}>50 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</Option>
            <Option value={100}>100 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</Option>
            <Option value={200}>200 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</Option>
          </Select>
          <Button icon={<SearchOutlined />} onClick={() => refetch()} size="middle" type="default" style={{ borderRadius: 8, boxShadow: '0 2px 8px rgba(102,126,234,0.08)' }}>–ü–æ–∏—Å–∫</Button>
        </div>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', flex: 1, minWidth: 180 }}>
          <Button type="primary" icon={<PlusOutlined />} size="large" style={{ borderRadius: 10, background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)', border: 'none', fontWeight: 600, boxShadow: '0 2px 8px rgba(16,185,129,0.15)' }}>
            –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
          </Button>
        </div>
      </div>

      {/* –ü–∞–Ω–µ–ª—å –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π - –Ω–∞–¥ –∑–∞–∫–∞–∑–∞–º–∏ */}
      <CSSTransition
        in={selectedRowKeys.length > 0}
        timeout={200}
        classNames="bulk-panel"
        unmountOnExit
      >
        <div className="bulk-actions-panel" style={{
          background: 'rgba(255, 255, 255, 0.98)',
          borderRadius: 12,
          boxShadow: '0 4px 20px rgba(102,126,234,0.15)',
          border: '1px solid rgba(102,126,234,0.1)',
          padding: '16px 24px',
          marginBottom: 16,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          gap: 16,
          minHeight: 60,
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
            <span style={{ fontWeight: 600, color: '#667eea', fontSize: 16 }}>–í—ã–±—Ä–∞–Ω–æ: {selectedRowKeys.length}</span>
            <span style={{ color: '#6b7280', fontSize: 14 }}>–∑–∞–∫–∞–∑(–æ–≤)</span>
          </div>
          <div style={{ display: 'flex', gap: 12, flexWrap: 'wrap' }}>
            <Button 
              type="primary" 
              onClick={() => setIsBulkStatusModalVisible(true)} 
              disabled={isBulkLoading} 
              style={{ borderRadius: 8, fontWeight: 600, minWidth: 140 }}
              icon={<EditOutlined />}
            >
              –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            </Button>
            <Button 
              danger 
              onClick={() => setIsBulkDeleteModalVisible(true)} 
              disabled={isBulkLoading} 
              style={{ borderRadius: 8, fontWeight: 600, minWidth: 100 }}
              icon={<DeleteOutlined />}
            >
              –£–¥–∞–ª–∏—Ç—å
            </Button>
            <Button 
              onClick={() => setSelectedRowKeys([])} 
              style={{ borderRadius: 8, minWidth: 100 }}
              icon={<CloseOutlined />}
            >
              –°–±—Ä–æ—Å–∏—Ç—å
            </Button>
          </div>
        </div>
      </CSSTransition>

      {/* –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ */}
      <div style={{ background: 'rgba(255,255,255,0.98)', borderRadius: 16, boxShadow: '0 4px 24px rgba(102,126,234,0.08)', padding: 16, overflowX: 'auto' }}>
        <div style={{ marginBottom: 16, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <div style={{ color: '#6b7280', fontSize: 14 }}>
            –ü–æ–∫–∞–∑–∞–Ω–æ {((currentPage - 1) * pageSize) + 1}-{Math.min(currentPage * pageSize, data?.total || 0)} –∏–∑ {data?.total || 0} –∑–∞–∫–∞–∑–æ–≤
            {selectedRowKeys.length > 0 && (
              <span style={{ marginLeft: 12, color: '#667eea', fontWeight: 600 }}>
                ‚Ä¢ –í—ã–±—Ä–∞–Ω–æ: {selectedRowKeys.length}
              </span>
            )}
          </div>
          <div style={{ color: '#6b7280', fontSize: 14 }}>
            –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {pageSize}
          </div>
        </div>
        <Table
          className="orders-table"
          dataSource={ordersData.length > 0 ? ordersData : (data?.orders || [])}
          loading={isLoading}
          rowKey="_id"
          rowSelection={rowSelection}
          pagination={{
            current: currentPage,
            total: data?.total,
            pageSize: pageSize,
            onChange: setCurrentPage,
            showSizeChanger: true,
            onShowSizeChange: handlePageSizeChange,
            style: { marginTop: 24 }
          }}
          scroll={{ x: 'max-content' }}
          bordered={false}
          style={{ minWidth: 900 }}
          columns={columns}
        />
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <Modal
        title="–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"
        open={isBulkStatusModalVisible}
        onOk={handleBulkStatusChange}
        onCancel={() => setIsBulkStatusModalVisible(false)}
        confirmLoading={isBulkLoading}
      >
        <Select
          value={bulkStatus}
          onChange={setBulkStatus}
          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å"
          style={{ width: '100%' }}
        >
          <Option value="pending">–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</Option>
          <Option value="confirmed">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</Option>
          <Option value="processing">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</Option>
          <Option value="shipped">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω</Option>
          <Option value="delivered">–î–æ—Å—Ç–∞–≤–ª–µ–Ω</Option>
          <Option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</Option>
        </Select>
      </Modal>

      <Modal
        title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"
        open={isBulkDeleteModalVisible}
        onOk={handleBulkDelete}
        onCancel={() => setIsBulkDeleteModalVisible(false)}
        confirmLoading={isBulkLoading}
        okText="–£–¥–∞–ª–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
        okButtonProps={{ danger: true }}
      >
        <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b>{selectedRowKeys.length}</b> –∑–∞–∫–∞–∑(–æ–≤)? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.</p>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞ */}
      <Modal
        title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞"
        open={isCallConfirmationModalVisible}
        onCancel={closeCallConfirmationModal}
        onOk={() => handleCallConfirmation(true)}
        okText="–î–∞"
        cancelText="–ù–µ—Ç"
        confirmLoading={isBulkLoading}
      >
        <div>
          <p>–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –∑–≤–æ–Ω–æ–∫. –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —ç—Ç–æ—Ç –∑–≤–æ–Ω–æ–∫ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π?</p>
          {orderForCallConfirmation && (
            <p style={{ marginTop: 8, fontWeight: 600, color: '#667eea' }}>
              <strong>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {orderForCallConfirmation.shippingAddress.phone}</strong>
            </p>
          )}
        </div>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ */}
      <Modal
        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑"
        open={isUpdateModalVisible}
        onCancel={closeModal}
        footer={null}
        width={800}
        className="order-edit-modal"
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleUpdateOrder}
          className="order-edit-form"
        >
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="status"
                label="–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å' }]}
              >
                <Select>
                  <Option value="pending">–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</Option>
                  <Option value="confirmed">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</Option>
                  <Option value="processing">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</Option>
                  <Option value="shipped">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω</Option>
                  <Option value="delivered">–î–æ—Å—Ç–∞–≤–ª–µ–Ω</Option>
                  <Option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="paymentStatus"
                label="–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã' }]}
              >
                <Select>
                  <Option value="pending">–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã</Option>
                  <Option value="paid">–û–ø–ª–∞—á–µ–Ω</Option>
                  <Option value="failed">–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</Option>
                  <Option value="refunded">–í–æ–∑–≤—Ä–∞—Ç</Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="paymentMethod"
                label="–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã' }]}
              >
                <Select>
                  <Option value="card">–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</Option>
                  <Option value="cash">–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏</Option>
                  <Option value="bank_transfer">–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥</Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="deliveryMethod"
                label="–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"
              >
                <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏">
                  {deliveryMethods.map(method => (
                    <Option key={method._id} value={method._id}>
                      {method.name}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="deliveryDate"
                label="–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"
              >
                <DatePicker style={{ width: '100%' }} />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="deliveryInterval"
                label="–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏"
              >
                <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª">
                  {availableTimeIntervals.map(interval => (
                    <Option key={interval} value={interval}>
                      {interval}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="trackingNumber"
                label="–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä"
              >
                <Input placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="estimatedDelivery"
                label="–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"
              >
                <Input type="date" />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="shipping"
                label="–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏"
              >
                <InputNumber
                  style={{ width: '100%' }}
                  placeholder="0"
                  min={0}
                  formatter={(value: number | string | undefined) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  parser={(value: string | undefined) => value ? value.replace(/\$\s?|(,*)/g, '') : ''}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="cdekPvzAddress"
                label="–ê–¥—Ä–µ—Å –ü–í–ó"
              >
                <Input 
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –°–î–≠–ö" 
                  style={{ color: '#667eea', fontWeight: 500 }} 
                />
              </Form.Item>
            </Col>
          </Row>

          <Divider orientation="left">–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</Divider>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="firstName"
                label="–ò–º—è"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è' }]}
              >
                <Input />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="lastName"
                label="–§–∞–º–∏–ª–∏—è"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é' }]}
              >
                <Input />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="email"
                label="Email"
                rules={[
                  { required: true, message: '–í–≤–µ–¥–∏—Ç–µ email' },
                  { type: 'email', message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' }
                ]}
              >
                <Input />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="phone"
                label="–¢–µ–ª–µ—Ñ–æ–Ω"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω' }]}
              >
                <Input />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="address"
            label="–ê–¥—Ä–µ—Å"
            rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å' }]}
          >
            <Input.TextArea rows={2} />
          </Form.Item>

          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                name="city"
                label="–ì–æ—Ä–æ–¥"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥' }]}
              >
                <Input />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="state"
                label="–û–±–ª–∞—Å—Ç—å"
              >
                <Input />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="zipCode"
                label="–ò–Ω–¥–µ–∫—Å"
              >
                <Input />
              </Form.Item>
            </Col>
          </Row>

          <Divider orientation="left">–¢–æ–≤–∞—Ä—ã</Divider>

          <Form.List name="items">
            {(fields, { add, remove }) => (
              <>
                {fields.map(({ key, name, ...restField }) => (
                  <div key={key} style={{ marginBottom: 16, padding: 16, border: '1px solid #e5e7eb', borderRadius: 8 }}>
                    <Row gutter={16}>
                      <Col span={8}>
                        <Form.Item
                          {...restField}
                          name={[name, 'name']}
                          label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                          rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' }]}
                        >
                          <Input />
                        </Form.Item>
                      </Col>
                      <Col span={4}>
                        <Form.Item
                          {...restField}
                          name={[name, 'price']}
                          label="–¶–µ–Ω–∞"
                          rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É' }]}
                        >
                          <InputNumber
                            style={{ width: '100%' }}
                            min={0}
                            formatter={(value: number | string | undefined) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                            parser={(value: string | undefined) => value ? value.replace(/\$\s?|(,*)/g, '') : ''}
                          />
                        </Form.Item>
                      </Col>
                      <Col span={4}>
                        <Form.Item
                          {...restField}
                          name={[name, 'quantity']}
                          label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                          rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' }]}
                        >
                          <InputNumber
                            style={{ width: '100%' }}
                            min={1}
                          />
                        </Form.Item>
                      </Col>
                      <Col span={4}>
                        <Form.Item
                          {...restField}
                          name={[name, 'sku']}
                          label="SKU"
                        >
                          <Input />
                        </Form.Item>
                      </Col>
                      <Col span={4}>
                        <Form.Item label="–°—É–º–º–∞">
                          <div className="item-total">
                            {(() => {
                              const price = form.getFieldValue(['items', name, 'price']) || 0;
                              const quantity = form.getFieldValue(['items', name, 'quantity']) || 0;
                              return `${(price * quantity).toLocaleString()} ‚ÇΩ`;
                            })()}
                          </div>
                        </Form.Item>
                      </Col>
                    </Row>
                    <Button
                      type="text"
                      danger
                      icon={<DeleteOutlined />}
                      onClick={() => remove(name)}
                      className="delete-item-btn"
                    >
                      –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
                    </Button>
                  </div>
                ))}
                <Form.Item>
                  <Button type="dashed" onClick={() => add()} block icon={<PlusOutlined />}>
                    –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                  </Button>
                </Form.Item>
              </>
            )}
          </Form.List>

          <Form.Item
            name="notes"
            label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
          >
            <Input.TextArea rows={3} placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ" />
          </Form.Item>

          <div style={{ textAlign: 'right', marginTop: 24 }}>
            <Button onClick={closeModal} style={{ marginRight: 8 }}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button type="primary" htmlType="submit">
              –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
            </Button>
          </div>
        </Form>
      </Modal>
      </div>
    </>
  );
});

export default Orders; 