import React, { useState, useCallback } from 'react';
import { useQuery, useQueryClient } from 'react-query';
import { useNavigate } from 'react-router-dom';
import { 
  Table, 
  Card, 
  Typography, 
  Button, 
  Tag, 
  Select, 
  Space, 
  Modal, 
  Form, 
  Input,
  message,
  Row,
  Col,
  Statistic,
  Progress,
  Tooltip,
  Divider,
  InputNumber,
  DatePicker,
  TimePicker,
  Upload,
  Image,
  Calendar,
  AutoComplete
} from 'antd';
import { 
  EyeOutlined, 
  EditOutlined, 
  DeleteOutlined, 
  PlusOutlined, 
  SearchOutlined, 
  ExclamationCircleOutlined, 
  CheckCircleOutlined, 
  ClockCircleOutlined, 
  ShoppingCartOutlined, 
  DollarOutlined, 
  UserOutlined,
  PhoneOutlined,
  HomeOutlined,
  TruckOutlined,
  CloseOutlined,
  SyncOutlined,
  PhoneTwoTone,
  HistoryOutlined,
  InboxOutlined
} from '@ant-design/icons';
import { useOrderStats } from '../hooks/useOrderStats';
import CustomerCell from '../components/CustomerCell';
import SearchInput from '../components/SearchInput';
import './Orders.css';
import { CSSTransition } from 'react-transition-group';
import dayjs from 'dayjs';
import { io, Socket } from 'socket.io-client';
import { useEffect, useRef } from 'react';
import debounce from 'lodash.debounce';

const { Title } = Typography;
const { Option } = Select;
const { TextArea } = Input;

interface Order {
  _id: string;
  orderNumber: string;
  userId?: string;
  deliveredOrdersCount?: number;
  user?: {
    _id: string;
    firstName: string;
    lastName: string;
    email: string;
    phone?: string;
    isPartiallyRegistered?: boolean;
  };
  items: Array<{
    productId?: string; // ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    name: string;
    price: number;
    costPrice?: number; // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞
    quantity: number;
    image: string;
    sku: string;
  }>;
  subtotal: number;
  shipping: number;
  total: number;
  status: 'pending' | 'confirmed' | 'processing' | 'shipped' | 'delivered' | 'cancelled' | 'with_courier';
  paymentStatus: string;
  paymentMethod: string;
  deliveryMethod?: {
    _id: string;
    name: string;
    type: string;
    price: number;
  };
  deliveryDate?: string; // 'today', 'tomorrow', 'day3' (—Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)
  shippingAddress: {
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    address: string;
    city: string;
    state: string;
    zipCode: string;
    country: string;
  };
  trackingNumber?: string;
  estimatedDelivery?: string;
  notes?: string;
  createdAt: string;
  updatedAt: string;
  cdekPvzAddress?: string; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ü–í–ó –°–î–≠–ö
  cdekPvzCode?: string; // –ö–æ–¥ –ü–í–ó –°–î–≠–ö
  cdekDeliveryDate?: string; // –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –°–î–≠–ö
  deliveryInterval?: string; // –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏
  callRequest?: boolean; // –ó–∞–ø—Ä–æ—Å –∑–≤–æ–Ω–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  callStatus?: 'requested' | 'completed' | 'not_completed'; // –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
  callAttempts?: { date: string; status: string }[]; // –ò—Å—Ç–æ—Ä–∏—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–∑–≤–æ–Ω–∞
}

interface DeliveryMethod {
  _id: string;
  name: string;
  type: string;
  costType: 'fixed' | 'percentage' | 'zone' | 'fixed_plus_percentage';
  fixedCost?: number;
  costPercentage?: number;
  isActive: boolean;
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  earlyOrderIntervals?: string[];
  lateOrderIntervals?: string[];
  orderTransitionTime?: string;
  useFlexibleIntervals?: boolean;
  intervalType?: 'standard' | 'flexible' | 'cdek';
  customInterval1?: string;
  customInterval2?: string;
  allowedPaymentMethods?: string[]; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
}

interface Product {
  _id: string;
  name: string;
  price: number;
  costPrice?: number;
  sku: string;
  mainImage: string;
  stockQuantity: number;
}



interface OrdersResponse {
  orders: Order[];
  page: number;
  pages: number;
  total: number;
}

async function fetchOrders(page: number = 1, status?: string, limit: number = 20, deliveryFilter?: string, search?: string): Promise<OrdersResponse> {
  const token = localStorage.getItem('admin_token');
  if (!token) throw new Error('No auth token');
  
  let url = `${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/orders?page=${page}&limit=${limit}`;
  if (status) url += `&status=${status}`;
  if (deliveryFilter) url += `&deliveryFilter=${deliveryFilter}`;
  if (search) url += `&search=${search}`;
  
  const response = await fetch(url, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (!response.ok) throw new Error('Failed to fetch orders');
  return response.json();
}

async function fetchDeliveryMethods(): Promise<DeliveryMethod[]> {
  const token = localStorage.getItem('admin_token');
  if (!token) throw new Error('No auth token');
  
  const response = await fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/delivery`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (!response.ok) throw new Error('Failed to fetch delivery methods');
  const data = await response.json();
  return data.deliveryMethods || [];
}

async function fetchProducts(): Promise<Product[]> {
  const token = localStorage.getItem('admin_token');
  if (!token) throw new Error('No auth token');
  
  console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã...');
  
  const response = await fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/products`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  
  if (!response.ok) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', response.status, response.statusText);
    throw new Error('Failed to fetch products');
  }
  
  const data = await response.json();
  console.log('–ü–æ–ª—É—á–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã:', data.products?.length || 0);
  
  if (data.products && data.products.length > 0) {
    console.log('–ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä:', data.products[0]);
  }
  
  return data.products || [];
}

async function fetchCustomers(): Promise<any[]> {
  const token = localStorage.getItem('admin_token');
  if (!token) throw new Error('No auth token');
  
  const apiUrl = `${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/users`;
  console.log('üåê –ó–∞–ø—Ä–æ—Å –∫ API:', apiUrl);
  
  const response = await fetch(apiUrl, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  
  console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
  
  if (!response.ok) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API:', response.status, response.statusText);
    throw new Error('Failed to fetch customers');
  }
  
  const data = await response.json();
  console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤:', data);
  return data.users || [];
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
function formatDeliveryDate(dateStr: string | undefined): string {
  if (!dateStr) return '';
  
  // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
  if (/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) {
    const [year, month, day] = dateStr.split('-');
    const dateObj = new Date(Number(year), Number(month) - 1, Number(day));
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const tomorrow = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
    const deliveryDate = new Date(Number(year), Number(month) - 1, Number(day));
    
    if (deliveryDate.getTime() === today.getTime()) {
      return `–°–µ–≥–æ–¥–Ω—è, ${dateObj.toLocaleDateString('ru-RU', { month: 'long', day: 'numeric' })}`;
    } else if (deliveryDate.getTime() === tomorrow.getTime()) {
      return `–ó–∞–≤—Ç—Ä–∞, ${dateObj.toLocaleDateString('ru-RU', { month: 'long', day: 'numeric' })}`;
    } else {
      return dateObj.toLocaleDateString('ru-RU', { month: 'long', day: 'numeric' });
    }
  }
  
  // –ï—Å–ª–∏ today/tomorrow/day3 ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É
  const now = new Date();
  if (dateStr === 'today') {
    return `–°–µ–≥–æ–¥–Ω—è, ${now.toLocaleDateString('ru-RU', { month: 'long', day: 'numeric' })}`;
  }
  if (dateStr === 'tomorrow') {
    const tomorrow = new Date(now);
    tomorrow.setDate(now.getDate() + 1);
    return `–ó–∞–≤—Ç—Ä–∞, ${tomorrow.toLocaleDateString('ru-RU', { month: 'long', day: 'numeric' })}`;
  }
  if (dateStr === 'day3') {
    const day3 = new Date(now);
    day3.setDate(now.getDate() + 2);
    return `–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞, ${day3.toLocaleDateString('ru-RU', { month: 'long', day: 'numeric' })}`;
  }
  return dateStr;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
function getDeliveryDateTime(order: Order): string {
  // –î–ª—è –°–î–≠–ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏
  if (order?.cdekPvzAddress && order?.cdekDeliveryDate) {
    const cdekDate = new Date(order.cdekDeliveryDate);
    return cdekDate.toLocaleDateString('ru-RU');
  }
  
  // –î–ª—è –æ–±—ã—á–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
  if (!order?.deliveryDate) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  
  const dateText = formatDeliveryDate(order.deliveryDate);
  
  if (order?.deliveryInterval) {
    return `${dateText} –≤ ${order.deliveryInterval}`;
  } else {
    return dateText;
  }
}

function normalizeDeliveryDate(dateStr: string | undefined): string | undefined {
  if (!dateStr) return undefined;
  const now = new Date();
  if (dateStr === 'today') {
    return now.toISOString().slice(0, 10);
  }
  if (dateStr === 'tomorrow') {
    const tomorrow = new Date(now);
    tomorrow.setDate(now.getDate() + 1);
    return tomorrow.toISOString().slice(0, 10);
  }
  if (dateStr === 'day3') {
    const day3 = new Date(now);
    day3.setDate(now.getDate() + 2);
    return day3.toISOString().slice(0, 10);
  }
  return dateStr;
}

const Orders: React.FC = React.memo(() => {
  const queryClient = useQueryClient();
  
  // --- –•–£–ö–ò –î–õ–Ø –ê–î–ú–ò–ù–û–í (–î–û–õ–ñ–ù–´ –ë–´–¢–¨ –°–ê–ú–´–ï –ü–ï–†–í–´–ï!) ---
  const [admins, setAdmins] = useState<any[]>([]);
  useEffect(() => {
    const token = localStorage.getItem('admin_token');
    if (!token) return;
    fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/admin/users`, {
      headers: { 'Authorization': `Bearer ${token}` }
    })
      .then(res => res.json())
      .then(users => {
        setAdmins(Array.isArray(users) ? users.filter((u: any) => u.role === 'admin') : []);
      })
      .catch(() => setAdmins([]));
  }, []);

  const navigate = useNavigate();
  const [selectedStatus, setSelectedStatus] = useState<string>('');
  const [deliveryFilter, setDeliveryFilter] = useState<string>('');
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(20);
  const [searchText, setSearchText] = useState('');
  const [isUpdateModalVisible, setIsUpdateModalVisible] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [form] = Form.useForm();
  const { data: orderStats, refetch: refetchStats } = useOrderStats();
  const [availableTimeIntervals, setAvailableTimeIntervals] = useState<string[]>([]);
  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);
  const [isBulkStatusModalVisible, setIsBulkStatusModalVisible] = useState(false);
  const [isBulkDeleteModalVisible, setIsBulkDeleteModalVisible] = useState(false);
  const [bulkStatus, setBulkStatus] = useState<string>('');
  const [isBulkLoading, setIsBulkLoading] = useState(false);
  const [isCallConfirmationModalVisible, setIsCallConfirmationModalVisible] = useState(false);
  const [orderForCallConfirmation, setOrderForCallConfirmation] = useState<Order | null>(null);
  const [formKey, setFormKey] = useState(0); // –ö–ª—é—á –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [selectedProductForField, setSelectedProductForField] = useState<{fieldName: number, product: Product} | null>(null);
  const [cdekLoading, setCdekLoading] = useState(false);
  const [cdekTrackingLoading, setCdekTrackingLoading] = useState(false);
  const [checkAllTrackingLoading, setCheckAllTrackingLoading] = useState(false);
  const [cdekConfirmModalVisible, setCdekConfirmModalVisible] = useState(false);
  const [cdekOrderData, setCdekOrderData] = useState<any>(null);
  const [packageData, setPackageData] = useState({
    weight: 2000,
    length: 20,
    width: 20,
    height: 20
  });
  const [isCallAttemptModalVisible, setIsCallAttemptModalVisible] = useState(false);
  const [orderForCallAttempt, setOrderForCallAttempt] = useState<Order | null>(null);
  const [callAttempts, setCallAttempts] = useState<{ date: string; status: string }[]>([]);
  const [callAttemptLoading, setCallAttemptLoading] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const [sortField, setSortField] = useState<string>('');
  const [sortOrder, setSortOrder] = useState<'ascend' | 'descend'>('descend');

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
  const [isCreateOrderModalVisible, setIsCreateOrderModalVisible] = useState(false);
  const [createOrderForm] = Form.useForm();
  const [createOrderLoading, setCreateOrderLoading] = useState(false);
  const [customers, setCustomers] = useState<any[]>([]);
  const [customersLoading, setCustomersLoading] = useState(false);
  const [selectedCustomer, setSelectedCustomer] = useState<any>(null);
  const [createOrderFormKey, setCreateOrderFormKey] = useState(0);
  const [customerAddresses, setCustomerAddresses] = useState<any[]>([]);
  const [addressesLoading, setAddressesLoading] = useState(false);
  const [isAddressModalVisible, setIsAddressModalVisible] = useState(false);
  const [availablePaymentMethods, setAvailablePaymentMethods] = useState<string[]>([]);

  // --- –•–£–ö–ò –ò–°–¢–û–†–ò–ò –ó–ê–ö–ê–ó–û–í ---
  const [changelog, setChangelog] = useState<any[]>([]);
  const [historyModal, setHistoryModal] = useState<{open: boolean, orderId: string|null}>({open: false, orderId: null});
  const [historyLoading, setHistoryLoading] = useState(false);
  const [historyEntries, setHistoryEntries] = useState<any[]>([]);
  const [arrivalModal, setArrivalModal] = useState<{open: boolean, order: Order|null}>({open: false, order: null});
  const [arrivalForm] = Form.useForm();
  const [arrivalItems, setArrivalItems] = useState<any[]>([]);
  const [suppliers, setSuppliers] = useState<any[]>([]);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ API
  useEffect(() => {
    const loadSuppliers = async () => {
      try {
        const token = localStorage.getItem('admin_token');
        if (!token) return;
        
        const response = await fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/suppliers`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (response.ok) {
          const data = await response.json();
          const activeSuppliers = data.filter((supplier: any) => supplier.status === 'active');
          setSuppliers(activeSuppliers);
        }
      } catch (error) {
        console.error('Error loading suppliers:', error);
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤');
      }
    };

    loadSuppliers();
  }, []);
  
  useEffect(() => {
    fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/admin/changelog`)
      .then(res => res.json())
      .then(data => setChangelog(Array.isArray(data) ? data : []));
  }, []);
  // --- –ö–û–ù–ï–¶ –•–£–ö–û–í –ò–°–¢–û–†–ò–ò ---

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏ –≤ cdekOrderData –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ packageData
  useEffect(() => {
    if (cdekOrderData) {
      setCdekOrderData((prev: any) => ({
        ...prev,
        packages: [packageData]
      }));
    }
  }, [packageData]);

  // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ callStatuses, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º callStatus –∏–∑ –∑–∞–∫–∞–∑–∞

  // Socket.IO –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
  const socketRef = useRef<Socket | null>(null);
  const [ordersData, setOrdersData] = useState<Order[]>([]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }, []);
  
  useEffect(() => {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO
    const apiUrl = import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api';
    const socketUrl = apiUrl.replace('/api', '');
    
    console.log('üîå Admin connecting to Socket.IO:', socketUrl);
    
    const socket = io(socketUrl, {
      transports: ['websocket', 'polling']
    });

    socketRef.current = socket;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    socket.on('connect', () => {
      console.log('üîå Admin Socket.IO connected:', socket.id);
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ–±—â–µ–π –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–∫–∞–∑–æ–≤
      socket.emit('joinOrderRoom', 'general');
      console.log('üîå Admin joined general room');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', () => {
      console.log('üîå Admin Socket.IO disconnected');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    socket.on('connect_error', (error: Error) => {
      console.error('üîå Admin Socket.IO connection error:', error);
    });

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
    socket.on('order-updated', (data: { orderId: string; type: string; callRequest?: boolean; callStatus?: string }) => {
      console.log('üì¶ Admin received order update via Socket.IO:', data);
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–∫–µ
      if (data.type === 'call-request' || data.type === 'call-status') {
        setOrdersData(prevOrders => 
          prevOrders.map(order => 
            order._id === data.orderId 
              ? { 
                  ...order, 
                  callRequest: data.callRequest !== undefined ? data.callRequest : order.callRequest,
                  callStatus: data.callStatus !== undefined ? (data.callStatus as 'requested' | 'completed' | 'not_completed') : order.callStatus
                }
              : order
          )
        );
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        refetch();
        refetchStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      }
    });

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (socketRef.current) {
        socketRef.current.disconnect();
        socketRef.current = null;
      }
    };
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  const { data: deliveryMethods = [] } = useQuery<DeliveryMethod[]>({
    queryKey: ['deliveryMethods'],
    queryFn: fetchDeliveryMethods,
    enabled: !!localStorage.getItem('admin_token'),
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    cacheTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
    refetchOnWindowFocus: false,
    refetchOnMount: false,
  });

  const { data: products = [], isLoading: productsLoading } = useQuery<Product[]>({
    queryKey: ['products'],
    queryFn: fetchProducts,
    enabled: !!localStorage.getItem('admin_token'),
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    cacheTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
    refetchOnWindowFocus: false,
    refetchOnMount: false,
  });

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
  useEffect(() => {
    console.log('–¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', products.length);
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', productsLoading);
    if (products.length > 0) {
      console.log('–ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä:', products[0]);
    }
  }, [products, productsLoading]);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ useQuery –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const { data, isLoading, error, refetch } = useQuery(
    ['orders', currentPage, selectedStatus, pageSize, deliveryFilter, searchText],
    () => fetchOrders(currentPage, selectedStatus, pageSize, deliveryFilter, searchText),
    {
      keepPreviousData: true,
      retry: 1,
      retryDelay: 1000,
      enabled: !!localStorage.getItem('admin_token'),
      staleTime: 10 * 1000, // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
      refetchOnWindowFocus: true, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
      refetchInterval: 30 * 1000 // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }
  );

  // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  const [isFirstLoad, setIsFirstLoad] = useState(true);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const { data: newOrdersData } = useQuery<OrdersResponse>({
    queryKey: ['new-orders-check'],
    queryFn: () => fetchOrders(1, '', 1, 'new'),
    enabled: isFirstLoad && !!localStorage.getItem('admin_token'),
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    refetchOnWindowFocus: false,
  });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (isFirstLoad && newOrdersData) {
      setIsFirstLoad(false);
    }
  }, [newOrdersData, isFirstLoad]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (data?.orders) {
      setOrdersData(data.orders);
    }
  }, [data?.orders]);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
  useEffect(() => {
    if (selectedProductForField && form) {
      const { fieldName, product } = selectedProductForField;
      
      console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', product);
      console.log('–ò–Ω–¥–µ–∫—Å –ø–æ–ª—è –≤ useEffect:', fieldName);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
      const fieldsToSet = [
        {
          name: [`items.${fieldName}.name`],
          value: product.name
        },
        {
          name: [`items.${fieldName}.price`],
          value: product.price
        },
        {
          name: [`items.${fieldName}.sku`],
          value: product.sku
        },
        {
          name: [`items.${fieldName}.productId`],
          value: product._id
        },
        {
          name: [`items.${fieldName}.quantity`],
          value: 1
        },
        {
          name: [`items.${fieldName}.image`],
          value: product.mainImage
        }
      ];
      
      console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—è –≤ useEffect:', fieldsToSet);
      form.setFields(fieldsToSet);
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setSelectedProductForField(null);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      setFormKey(prev => prev + 1);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
      setTimeout(() => {
        console.log('–ü–æ–ª—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ useEffect:', {
          name: form.getFieldValue([`items.${fieldName}.name`]),
          price: form.getFieldValue([`items.${fieldName}.price`]),
          sku: form.getFieldValue([`items.${fieldName}.sku`]),
          quantity: form.getFieldValue([`items.${fieldName}.quantity`])
        });
      }, 100);
    }
  }, [selectedProductForField, form]);

  const getStatusColor = useCallback((status: string) => {
    switch (status) {
      case 'pending': return 'orange';
      case 'confirmed': return 'blue';
      case 'processing': return 'purple';
      case 'shipped': return 'indigo';
      case 'delivered': return 'green';
      case 'cancelled': return 'red';
      case 'with_courier': return 'cyan';
      default: return 'default';
    }
  }, []);

  const getStatusText = useCallback((status: string) => {
    switch (status) {
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
      case 'confirmed': return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω';
      case 'processing': return '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ';
      case 'shipped': return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω';
      case 'delivered': return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω';
      case 'with_courier': return '–ü–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É';
      default: return status;
    }
  }, []);

  const getPaymentMethodText = useCallback((method: string) => {
    switch (method) {
      case 'cash_on_delivery': return '–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏';
      case 'bank_card': return '–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π';
      case 'sberbank_transfer': return '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –ö–∞—Ä—Ç—É –°–±–µ—Ä–±–∞–Ω–∫–∞';
      case 'credit_purchase': return '–ö—É–ø–∏—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç';
      case 'usdt_payment': return '–û–ø–ª–∞—Ç–∞ USDT';
      default: return method;
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è paymentMethod –¥–ª—è —Ñ–æ—Ä–º—ã
  const getPaymentMethodValue = useCallback((method: string) => {
    console.log('üîç getPaymentMethodValue input:', method);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
    const validKeys = ['bank_card', 'cash_on_delivery', 'sberbank_transfer', 'credit_purchase', 'usdt_payment'];
    if (validKeys.includes(method)) {
      console.log('‚úÖ Valid key found:', method);
      return method;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–ª—é—á
    switch (method) {
      case '–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π': return 'bank_card';
      case '–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏': return 'cash_on_delivery';
      case '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –ö–∞—Ä—Ç—É –°–±–µ—Ä–±–∞–Ω–∫–∞': return 'sberbank_transfer';
      case '–ö—É–ø–∏—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç': return 'credit_purchase';
      case '–û–ø–ª–∞—Ç–∞ USDT': return 'usdt_payment';
      default: 
        console.log('‚ö†Ô∏è Unknown payment method:', method);
        return method;
    }
  }, []);

  const getDeliveryDateText = useCallback((date: string | undefined, deliveryMethod?: any) => {
    if (!date) return '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    
    // –î–ª—è –°–î–≠–ö –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏
    if (deliveryMethod?.name && deliveryMethod.name.toLowerCase().includes('—Å–¥—ç–∫')) {
      return '–°–î–≠–ö';
    }
    
    switch (date) {
      case 'today': return '–°–µ–≥–æ–¥–Ω—è';
      case 'tomorrow': return '–ó–∞–≤—Ç—Ä–∞';
      case 'day3': return '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞';
      default: return date;
    }
  }, []);



  const handleStatusChange = useCallback((value: string) => {
    setSelectedStatus(value);
    setCurrentPage(1);
  }, []);

  const handleDeliveryFilterChange = useCallback((filter: string) => {
    setDeliveryFilter(filter);
    setCurrentPage(1);
  }, []);

  const handleClearFilters = useCallback(() => {
    setSelectedStatus('');
    setDeliveryFilter('');
    setCurrentPage(1);
    setSearchText('');
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞
  const [inputValue, setInputValue] = useState('');

  // –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
  const debouncedSearch = useRef(
    debounce((value: string) => {
      setSearchText(value);
      setCurrentPage(1);
      refetch();
    }, 2000)
  ).current;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–≤–æ–¥–∞
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setInputValue(value); // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
    debouncedSearch(value); // –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
  };



  const handlePageSizeChange = useCallback((current: number, size: number) => {
    setPageSize(size);
    setCurrentPage(1);
  }, []);

  const handleUpdateOrder = useCallback(async (values: any) => {
    if (!selectedOrder) return;

    try {
      const token = localStorage.getItem('admin_token');
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const updateData = {
        status: values.status,
        paymentStatus: values.paymentStatus,
        paymentMethod: values.paymentMethod,
        deliveryMethod: values.deliveryMethod,
        deliveryDate: values.deliveryDate ? values.deliveryDate.format('YYYY-MM-DD') : undefined,
        trackingNumber: values.trackingNumber,
        estimatedDelivery: values.estimatedDelivery,
        notes: values.notes,
        shipping: values.shipping,
        deliveryInterval: values.deliveryInterval, // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏
        cdekPvzAddress: values.cdekPvzAddress, // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –ü–í–ó –°–î–≠–ö
        cdekPvzCode: values.cdekPvzCode, // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –ü–í–ó –°–î–≠–ö
        // –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        firstName: values.firstName,
        lastName: values.lastName,
        email: values.email,
        phone: values.phone,
        address: values.address,
        city: values.city,
        state: values.state,
        zipCode: values.zipCode,
        country: values.country,
        // –¢–æ–≤–∞—Ä—ã
        items: values.items
      };

      console.log('üì§ Sending order update:', {
        orderId: selectedOrder._id,
        updateData: updateData,
        deliveryDateDetails: {
          original: values.deliveryDate,
          formatted: values.deliveryDate ? values.deliveryDate.format('YYYY-MM-DD') : undefined,
          oldValue: selectedOrder.deliveryDate
        },
        shippingValue: values.shipping,
        shippingType: typeof values.shipping,
        trackingNumber: values.trackingNumber
      });

      const response = await fetch(
        `${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/orders/${selectedOrder._id}`,
        {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(updateData)
        }
      );

      console.log('üì• Response status:', response.status);

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Order updated successfully:', result);
        message.success('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º selectedOrder —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if (selectedOrder) {
          const updatedOrder = {
            ...selectedOrder,
            ...result
          };
                  console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º selectedOrder:', updatedOrder);
        console.log('üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞:', result.trackingNumber);
        console.log('üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ:', updatedOrder.trackingNumber);
        console.log('üì¶ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(result, null, 2));
          setSelectedOrder(updatedOrder);
        }
        
        closeModal();
        
        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—ç—à–∏ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        queryClient.invalidateQueries(['orders']);
        queryClient.invalidateQueries(['new-orders-check']);
        
        // –¢–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ–º refetch –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        refetch();
      } else {
        const errorData = await response.json();
        console.error('‚ùå Error updating order:', errorData);
        message.error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
      }
    } catch (error) {
      console.error('‚ùå Network error:', error);
      message.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  }, [selectedOrder, refetch]);

  const showUpdateModal = React.useCallback((order: Order) => {
    console.log('üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', order._id);
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
      deliveryMethod: order.deliveryMethod,
      deliveryMethodId: order.deliveryMethod?._id,
      deliveryDate: order.deliveryDate
    });
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—Ä–∞–Ω–µ–µ
    let intervals: string[] = [];
    if (order.deliveryMethod?._id) {
      const selectedMethod = deliveryMethods.find(m => m._id === order.deliveryMethod?._id);
      if (selectedMethod) {
        const methodName = selectedMethod.name.toLowerCase();
        
        if (methodName.includes('—Å–¥—ç–∫') || methodName.includes('cdek')) {
          intervals = [];
        } else if (methodName.includes('—Å—Ä–æ—á–Ω–∞—è') || methodName.includes('—Å–∞–º–æ–≤—ã–≤–æ–∑')) {
          if (selectedMethod.customInterval1) {
            intervals.push(selectedMethod.customInterval1);
          }
          if (selectedMethod.customInterval2) {
            intervals.push(selectedMethod.customInterval2);
          }
          if (intervals.length === 0) {
            intervals = ['10:00-12:00', '12:00-14:00', '14:00-16:00', '16:00-18:00', '18:00-19:00'];
          }
        } else {
          if (selectedMethod.useFlexibleIntervals) {
            if (selectedMethod.earlyOrderIntervals && selectedMethod.earlyOrderIntervals.length > 0) {
              intervals = [...intervals, ...selectedMethod.earlyOrderIntervals];
            }
            if (selectedMethod.lateOrderIntervals && selectedMethod.lateOrderIntervals.length > 0) {
              intervals = [...intervals, ...selectedMethod.lateOrderIntervals];
            }
          } else {
            if (selectedMethod.customInterval1) {
              intervals.push(selectedMethod.customInterval1);
            }
            if (selectedMethod.customInterval2) {
              intervals.push(selectedMethod.customInterval2);
            }
          }
          
          if (intervals.length === 0) {
            intervals = ['13:00-17:00', '17:00-21:00'];
          }
        }
      }
    }
    
    const formValues = {
      status: order.status,
      paymentStatus: order.paymentStatus,
      paymentMethod: getPaymentMethodValue(order.paymentMethod),
      deliveryMethod: order.deliveryMethod?._id,
      deliveryDate: order.deliveryDate ? dayjs(normalizeDeliveryDate(order.deliveryDate)) : null,
      trackingNumber: order.trackingNumber || '',
      estimatedDelivery: order.estimatedDelivery ? new Date(order.estimatedDelivery).toISOString().split('T')[0] : 
                       (order.cdekDeliveryDate ? new Date(order.cdekDeliveryDate).toISOString().split('T')[0] : ''),
      notes: order.notes || '',
      shipping: order.shipping || 0,
      deliveryInterval: order.deliveryInterval || '',
      callRequest: order.callRequest || false,
      cdekPvzAddress: order.cdekPvzAddress || '',
      cdekPvzCode: order.cdekPvzCode || '',
      // –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      firstName: order.shippingAddress.firstName,
      lastName: order.shippingAddress.lastName,
      email: order.shippingAddress.email,
      phone: order.shippingAddress.phone,
      address: order.shippingAddress.address,
      city: order.shippingAddress.city,
      state: order.shippingAddress.state,
      zipCode: order.shippingAddress.zipCode,
      country: order.shippingAddress.country,
      // –¢–æ–≤–∞—Ä—ã
      items: order.items
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    setSelectedOrder(order);
    setAvailableTimeIntervals(intervals);
    setIsUpdateModalVisible(true);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    setTimeout(() => {
      console.log('üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã:', formValues);
    console.log('üéØ –ó–Ω–∞—á–µ–Ω–∏–µ deliveryMethod –¥–ª—è —Ñ–æ—Ä–º—ã:', formValues.deliveryMethod);
    form.setFieldsValue(formValues);
    }, 50);
  }, [deliveryMethods, form, getPaymentMethodValue, normalizeDeliveryDate]);



  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã (–¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—É–º–º)
  const forceUpdate = useCallback(() => {
    form.validateFields().then(() => {
      // –§–æ—Ä–º–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    });
  }, [form]);

  const calculateTotal = useCallback((items: any[]) => {
    return items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  }, []);

  const closeModal = useCallback(() => {
    setIsUpdateModalVisible(false);
    setSelectedOrder(null);
    form.resetFields();
  }, [form]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
  const showCallConfirmationModal = useCallback((order: Order) => {
    console.log('üìû showCallConfirmationModal –≤—ã–∑–≤–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:', order._id);
    setOrderForCallConfirmation(order);
    setIsCallConfirmationModalVisible(true);
  }, []);

  const handleCallConfirmation = useCallback(async (called: boolean) => {
    if (!orderForCallConfirmation) return;
    
    try {
      const token = localStorage.getItem('admin_token');
      const response = await fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/orders/${orderForCallConfirmation._id}/call-status`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ called })
      });
      
      if (response.ok) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
        refetch();
        message.success(called ? '–ó–≤–æ–Ω–æ–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π' : '–ó–≤–æ–Ω–æ–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π');
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞');
      }
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsCallConfirmationModalVisible(false);
      setOrderForCallConfirmation(null);
    }
  }, [orderForCallConfirmation]);

  const closeCallConfirmationModal = useCallback(() => {
    console.log('üìû closeCallConfirmationModal –≤—ã–∑–≤–∞–Ω');
    setIsCallConfirmationModalVisible(false);
    setOrderForCallConfirmation(null);
  }, []);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–∑–≤–æ–Ω–∞
  const handleShowCallAttemptModal = useCallback((order: Order) => {
    console.log('üìû handleShowCallAttemptModal –≤—ã–∑–≤–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:', order._id);
    setOrderForCallAttempt(order);
    setCallAttempts(order.callAttempts || []);
    setIsCallAttemptModalVisible(true);
  }, []);

  const handleCloseCallAttemptModal = useCallback(() => {
    console.log('üìû handleCloseCallAttemptModal –≤—ã–∑–≤–∞–Ω');
    setIsCallAttemptModalVisible(false);
    setOrderForCallAttempt(null);
    setCallAttempts([]);
  }, []);

  const handleSort = useCallback((field: string) => {
    if (sortField === field) {
      setSortOrder(sortOrder === 'ascend' ? 'descend' : 'ascend');
    } else {
      setSortField(field);
      setSortOrder('descend');
    }
  }, [sortField, sortOrder]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const getSortedData = useCallback(() => {
    const orders = ordersData.length > 0 ? ordersData : (data?.orders || []);
    
    if (!sortField) return orders;
    
    return [...orders].sort((a, b) => {
      let aValue: any = a[sortField as keyof Order];
      let bValue: any = b[sortField as keyof Order];
      
      // –î–ª—è –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
      if (sortField === 'createdAt') {
        aValue = new Date(a.createdAt).getTime();
        bValue = new Date(b.createdAt).getTime();
      }
      
      // –î–ª—è –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
      if (sortField === 'deliveryDate') {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ getDeliveryDateTime
        const getDeliveryDate = (order: Order) => {
          // –î–ª—è –°–î–≠–ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏
          if (order?.cdekPvzAddress && order?.cdekDeliveryDate) {
            return new Date(order.cdekDeliveryDate).getTime();
          }
          
          // –î–ª—è –æ–±—ã—á–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
          if (order.deliveryDate) {
            const today = new Date();
            const tomorrow = new Date(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            const day3 = new Date(today);
            day3.setDate(day3.getDate() + 2);
            
            if (order.deliveryDate === 'today') {
              return today.getTime();
            } else if (order.deliveryDate === 'tomorrow') {
              return tomorrow.getTime();
            } else if (order.deliveryDate === 'day3') {
              return day3.getTime();
            }
          }
          // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          return Number.MAX_SAFE_INTEGER;
        };
        
        aValue = getDeliveryDate(a);
        bValue = getDeliveryDate(b);
      }
      
      // –î–ª—è –∑–≤–æ–Ω–∫–æ–≤
      if (sortField === 'callRequest') {
        aValue = a.callRequest ? 1 : 0;
        bValue = b.callRequest ? 1 : 0;
      }
      
      if (typeof aValue === 'number' && typeof bValue === 'number') {
        return sortOrder === 'ascend' ? aValue - bValue : bValue - aValue;
      }
      
      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return sortOrder === 'ascend' 
          ? aValue.localeCompare(bValue)
          : bValue.localeCompare(aValue);
      }
      
      return 0;
    });
  }, [ordersData, data?.orders, sortField, sortOrder]);

  const handleCallAttempt = useCallback(async (status: 'success' | 'failed') => {
    if (!orderForCallAttempt) return;
    
    setCallAttemptLoading(true);
    
    try {
      const token = localStorage.getItem('admin_token');
      const response = await fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/orders/${orderForCallAttempt._id}/call-attempt`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ 
          status,
          date: new Date().toISOString()
        })
      });
      
      if (response.ok) {
        message.success(status === 'success' ? '–ó–≤–æ–Ω–æ–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π' : '–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–∑–≤–æ–Ω–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–∞—è');
        refetch();
        handleCloseCallAttemptModal();
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞');
      }
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setCallAttemptLoading(false);
    }
  }, [orderForCallAttempt, refetch]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
  const showCreateOrderModal = useCallback(() => {
    setIsCreateOrderModalVisible(true);
    setCreateOrderFormKey(prev => prev + 1);
    createOrderForm.resetFields();
    setSelectedCustomer(null);
  }, [createOrderForm]);

  const closeCreateOrderModal = useCallback(() => {
    setIsCreateOrderModalVisible(false);
    setSelectedCustomer(null);
    createOrderForm.resetFields();
  }, [createOrderForm]);

  const loadCustomers = useCallback(async () => {
    setCustomersLoading(true);
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤...');
      const customersData = await fetchCustomers();
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã:', customersData);
      setCustomers(customersData);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤');
    } finally {
      setCustomersLoading(false);
    }
  }, []);

  const handleCreateOrder = useCallback(async (values: any) => {
    setCreateOrderLoading(true);
    try {
      const token = localStorage.getItem('admin_token');
      // –°–æ–±–∏—Ä–∞–µ–º shippingAddress –∏–∑ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
      const {
        firstName, lastName, email, phone, address, city, state, zipCode, country, ...rest
      } = values;
      const orderData = {
        ...rest,
        userId: selectedCustomer?._id || null,
        status: 'pending',
        paymentStatus: 'pending',
        items: values.items || [],
        subtotal: values.items?.reduce((sum: number, item: any) => sum + (item.price * item.quantity), 0) || 0,
        total: (values.items?.reduce((sum: number, item: any) => sum + (item.price * item.quantity), 0) || 0) + (values.shipping || 0),
        callRequest: false,
        shippingAddress: {
          firstName,
          lastName,
          email,
          phone,
          address,
          city,
          state,
          zipCode,
          country: country || '–†–æ—Å—Å–∏—è',
        }
      };

      const response = await fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/orders`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(orderData)
      });

      if (response.ok) {
        message.success('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
        closeCreateOrderModal();
        refetch();
      } else {
        const errorData = await response.json();
        message.error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
      }
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setCreateOrderLoading(false);
    }
  }, [selectedCustomer, refetch, closeCreateOrderModal]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
  const loadCustomerAddresses = useCallback(async (customerId: string) => {
    if (!customerId) return;
    
    setAddressesLoading(true);
    try {
      const token = localStorage.getItem('admin_token');
      const response = await fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/users/${customerId}/addresses`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        setCustomerAddresses(data.addresses || []);
        console.log('üìç –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞:', data.addresses);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤:', response.status);
        setCustomerAddresses([]);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥—Ä–µ—Å–æ–≤:', error);
      setCustomerAddresses([]);
    } finally {
      setAddressesLoading(false);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
  const handleSelectAddress = useCallback((address: any) => {
    createOrderForm.setFieldsValue({
      address: address.address || '',
      city: address.city || '',
      state: address.state || '',
      zipCode: address.zipCode || '',
      country: address.country || '–†–æ—Å—Å–∏—è', // <-- –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É
    });
    setIsAddressModalVisible(false);
    message.success('–ê–¥—Ä–µ—Å –≤—ã–±—Ä–∞–Ω');
  }, [createOrderForm]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  const calculateShippingCost = useCallback((deliveryMethodId: string, subtotal: number = 0) => {
    const method = deliveryMethods.find(m => m._id === deliveryMethodId);
    if (!method) return 0;

    console.log('üöö –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–∞:', method.name);
    console.log('üí∞ –¢–∏–ø —Å—Ç–æ–∏–º–æ—Å—Ç–∏:', method.costType);
    console.log('üì¶ –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤:', subtotal);

    switch (method.costType) {
      case 'fixed':
        const fixedCost = method.fixedCost || 0;
        console.log('üíµ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', fixedCost);
        return fixedCost;
      
      case 'percentage':
        const percentage = method.costPercentage || 0;
        const percentageCost = (subtotal * percentage) / 100;
        console.log('üìä –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', percentage, '% =', percentageCost);
        return percentageCost;
      
      case 'zone':
        // –î–ª—è –∑–æ–Ω–∞–ª—å–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        const zoneCost = method.fixedCost || 0;
        console.log('üó∫Ô∏è –ó–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', zoneCost);
        return zoneCost;
      
      default:
        console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0');
        return 0;
    }
  }, [deliveryMethods]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
  const handleDeliveryMethodChange = useCallback((deliveryMethodId: string) => {
    console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryMethodId);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É —Ç–æ–≤–∞—Ä–æ–≤
    const items = createOrderForm.getFieldValue('items') || [];
    const subtotal = items.reduce((sum: number, item: any) => {
      const price = item.price || 0;
      const quantity = item.quantity || 0;
      return sum + (price * quantity);
    }, 0);
    
    console.log('üì¶ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤:', subtotal);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
    const shippingCost = calculateShippingCost(deliveryMethodId, subtotal);
    console.log('üöö –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:', shippingCost);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    createOrderForm.setFieldsValue({
      shipping: shippingCost
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    const total = subtotal + shippingCost;
    console.log('üí∞ –û–±—â–∞—è —Å—É–º–º–∞:', total);
    
    const method = deliveryMethods.find(m => m._id === deliveryMethodId);
    setAvailablePaymentMethods(method?.allowedPaymentMethods || []);
  }, [createOrderForm, calculateShippingCost, deliveryMethods]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
  const updateShippingCost = useCallback(() => {
    const deliveryMethodId = createOrderForm.getFieldValue('deliveryMethod');
    if (!deliveryMethodId) return;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É —Ç–æ–≤–∞—Ä–æ–≤
    const items = createOrderForm.getFieldValue('items') || [];
    const subtotal = items.reduce((sum: number, item: any) => {
      const price = item.price || 0;
      const quantity = item.quantity || 0;
      return sum + (price * quantity);
    }, 0);
    
    console.log('üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏, —Å—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤:', subtotal);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
    const shippingCost = calculateShippingCost(deliveryMethodId, subtotal);
    console.log('üöö –ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:', shippingCost);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    createOrderForm.setFieldsValue({
      shipping: shippingCost
    });
    
  }, [createOrderForm, calculateShippingCost]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
  useEffect(() => {
    if (isCreateOrderModalVisible) {
      console.log('üöÄ –û—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤...');
      loadCustomers();
    }
  }, [isCreateOrderModalVisible, loadCustomers]);

  // –ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
  const handleBulkStatusChange = async () => {
    setIsBulkLoading(true);
    try {
      const token = localStorage.getItem('admin_token');
      const response = await fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/orders/bulk-update-status`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ orderIds: selectedRowKeys, status: bulkStatus })
      });
      if (response.ok) {
        message.success('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω');
        setSelectedRowKeys([]);
        setIsBulkStatusModalVisible(false);
        refetch();
        refetchStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      } else {
        const errorData = await response.json();
        message.error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
      }
    } catch (e) {
      message.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsBulkLoading(false);
    }
  };

  // –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
  const handleBulkDelete = async () => {
    setIsBulkLoading(true);
    try {
      const token = localStorage.getItem('admin_token');
      const response = await fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/orders/bulk-delete`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ orderIds: selectedRowKeys })
      });
      if (response.ok) {
        message.success('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã');
        setSelectedRowKeys([]);
        setIsBulkDeleteModalVisible(false);
        refetch();
        refetchStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      } else {
        const errorData = await response.json();
        message.error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤');
      }
    } catch (e) {
      message.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsBulkLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  const handleQuickStatusChange = async (orderId: string, newStatus: string) => {
    try {
      const token = localStorage.getItem('admin_token');
      const response = await fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/orders/${orderId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ status: newStatus })
      });

      if (response.ok) {
        message.success('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
        
        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—ç—à–∏ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        queryClient.invalidateQueries(['orders']);
        queryClient.invalidateQueries(['new-orders-check']);
        
        refetch();
        refetchStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
      }
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –°–î–≠–ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const handleCreateCdekOrder = async (orderId?: string) => {
    if (!orderId || !selectedOrder) return;

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const orderData = {
      sender: {
        name: '–†—É—Å–ª–∞–Ω –ó–µ–π–Ω–∞–ª–æ–≤',
        phones: [{ number: '89067101379' }]
      },
      recipient: {
        name: `${selectedOrder.shippingAddress.firstName} ${selectedOrder.shippingAddress.lastName}`,
        phones: [{ number: selectedOrder.shippingAddress.phone }],
        email: selectedOrder.shippingAddress.email
      },
      from_location: {
        address: '–ú–æ—Å–∫–≤–∞, –ú–∏—Ç–∏–Ω–æ, —É–ª. –ú–∏—Ç–∏–Ω—Å–∫–∞—è, –¥. 1',
        code: '44',
        fias_guid: 'c2deb16a-0330-4f05-821f-1d09c93331e6',
        postal_code: '125222'
      },
      to_location: {
        address: selectedOrder.cdekPvzAddress || selectedOrder.shippingAddress.address,
        code: '44',
        fias_guid: 'c2deb16a-0330-4f05-821f-1d09c93331e6',
        postal_code: selectedOrder.shippingAddress.zipCode || '125222'
      },
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –ü–í–ó –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ backend
      pvz_code: selectedOrder.cdekPvzCode || null,
      packages: [{
        weight: packageData.weight || 2000,
        length: packageData.length || 20,
        width: packageData.width || 20,
        height: packageData.height || 20
      }],
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –°–î–≠–ö
      cost: selectedOrder.total,
      currency: 'RUB',
      comment: `–ó–∞–∫–∞–∑ ${selectedOrder.orderNumber}`,
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –∞–¥—Ä–µ—Å
      tariff_code: 1
    };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    setCdekOrderData(orderData);
    setCdekConfirmModalVisible(true);
  };

  const handleConfirmCdekOrder = async () => {
    if (!selectedOrder?._id || !cdekOrderData) return;

    setCdekLoading(true);
    setCdekConfirmModalVisible(false);
    
    try {
      const token = localStorage.getItem('admin_token');
      
      console.log('üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –°–î–≠–ö:', cdekOrderData);
      console.log('üì¶ ID –∑–∞–∫–∞–∑–∞:', selectedOrder._id);
      
      const response = await fetch(
        `${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/orders/${selectedOrder._id}/create-cdek-order`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(cdekOrderData)
        }
      );

      console.log('üì¶ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ –°–î–≠–ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', result);
        message.success('–°–î–≠–ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —Å –Ω–æ–≤—ã–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º
        form.setFieldsValue({
          trackingNumber: result.trackingNumber
        });
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        refetch();
      } else {
        const errorData = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –°–î–≠–ö:', errorData);
        message.error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –°–î–≠–ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –°–î–≠–ö:', error);
      message.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –°–î–≠–ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    } finally {
      setCdekLoading(false);
    }
  };

  const handleGetCdekTracking = async (orderId?: string) => {
    if (!orderId) return;

    setCdekTrackingLoading(true);
    
    try {
      const token = localStorage.getItem('admin_token');
      const response = await fetch(
        `${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/orders/${orderId}/get-cdek-tracking`,
        {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );

      if (response.ok) {
        const result = await response.json();
        
        if (result.success) {
          message.success(`–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω: ${result.trackingNumber}`);
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —Å –Ω–∞—Å—Ç–æ—è—â–∏–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º
          form.setFieldsValue({
            trackingNumber: result.trackingNumber
          });
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
          refetch();
        } else {
          message.info(result.message || '–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      } else {
        const errorData = await response.json();
        message.error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞');
      }
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞');
    } finally {
      setCdekTrackingLoading(false);
    }
  };

  const handleCheckAllCdekTracking = async () => {
    setCheckAllTrackingLoading(true);
    
    try {
      const token = localStorage.getItem('admin_token');
      const response = await fetch(
        `${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/orders/check-cdek-tracking`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );

      if (response.ok) {
        const result = await response.json();
        message.success(result.message || '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          refetch();
        }, 10000);
      } else {
        const errorData = await response.json();
        message.error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏');
      }
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    } finally {
      setCheckAllTrackingLoading(false);
    }
  };

  // rowSelection –¥–ª—è Table
  const rowSelection = {
    selectedRowKeys,
    onChange: (newSelectedRowKeys: React.Key[]) => setSelectedRowKeys(newSelectedRowKeys),
    preserveSelectedRowKeys: false,
  };

  const columns = React.useMemo(() => [
    {
      title: '',
      key: 'history',
      width: 96,
      render: (_: any, record: Order) => (
        <Space size="small">
          <Tooltip title="–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–∫–∞–∑–∞">
            <Button
              icon={<HistoryOutlined />}
              size="small"
              onClick={e => { e.stopPropagation(); openHistoryModal(record._id); }}
            />
          </Tooltip>
          <Tooltip title="–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞">
            <Button
              icon={<InboxOutlined />}
              size="small"
              onClick={e => { e.stopPropagation(); handleCreateArrivalFromOrder(record); }}
              style={{ color: '#52c41a', borderColor: '#52c41a' }}
            />
          </Tooltip>
        </Space>
      )
    },
    {
      title: '–ó–∞–∫–∞–∑',
      key: 'order',
      sorter: true,
      sortOrder: sortField === 'createdAt' ? sortOrder : null,
      onHeaderCell: () => ({
        onClick: () => handleSort('createdAt'),
      }),
      render: (_: any, record: Order) => (
        <div className="space-y-1">
          <Tooltip title={`–ö–ª–∏–∫–Ω–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –∑–∞–∫–∞–∑–∞: ${record.orderNumber}`}>
            <div 
              style={{
                cursor: 'pointer',
                padding: '8px',
                borderRadius: '6px',
                transition: 'all 0.2s ease',
                border: '1px solid transparent'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.backgroundColor = '#eff6ff';
                e.currentTarget.style.borderColor = '#3b82f6';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.backgroundColor = 'transparent';
                e.currentTarget.style.borderColor = 'transparent';
              }}
              onClick={() => showUpdateModal(record)}
            >
              <div className="font-mono font-semibold" style={{ color: '#2563eb' }}>
                {record.orderNumber}
              </div>
            </div>
          </Tooltip>
          <div className="text-xs text-gray-500">
            {new Date(record.createdAt).toLocaleDateString('ru-RU')} {new Date(record.createdAt).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
          </div>
        </div>
      )
    },
    {
      title: '–ó–≤–æ–Ω–æ–∫',
      key: 'callRequest',
      sorter: true,
      sortOrder: sortField === 'callRequest' ? sortOrder : null,
      onHeaderCell: () => ({
        onClick: () => handleSort('callRequest'),
      }),
      render: (_: any, record: Order) => (
        <div className="flex items-center justify-center gap-2">
          {record.callRequest ? (
            record.callStatus === 'completed' ? (
              <Tag color="green" icon={<CheckCircleOutlined />} className="flex items-center gap-1">
                <span className="text-xs">–ó–≤–æ–Ω–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω</span>
              </Tag>
            ) : (
              <>
                <Tooltip title="–ö–ª–∏–∫–Ω–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–≤–æ–Ω–æ–∫ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π">
                  <Button
                    type="text"
                    icon={<PhoneOutlined />}
                    className="phone-call-button"
                    onClick={() => showCallConfirmationModal(record)}
                  />
                </Tooltip>
                <Tooltip title="–ù–µ –¥–æ–∑–≤–æ–Ω–∏–ª–∏—Å—å?">
                  <Button
                    type="text"
                    icon={<PhoneOutlined style={{ textDecoration: 'line-through', color: 'black' }} />}
                    className="phone-call-failed-button"
                    onClick={() => handleShowCallAttemptModal(record)}
                  />
                </Tooltip>
                {((record.callAttempts || []).some(a => a.status === 'failed')) && (
                  <Tag color="default" icon={<CloseOutlined />} className="ml-1">–ù–µ –¥–æ–∑–≤–æ–Ω–∏–ª–∏—Å—å</Tag>
                )}
              </>
            )
          ) : (
            <span className="text-gray-400 text-xs">‚Äî</span>
          )}
        </div>
      )
    },
    {
      title: '–ö–ª–∏–µ–Ω—Ç',
      key: 'customer',
      render: (_: any, record: Order) => (
        <CustomerCell 
          user={record.user} 
          userId={record.userId}
          deliveredOrdersCount={record.deliveredOrdersCount}
          shippingAddress={record.shippingAddress}
        />
      )
    },
    {
      title: '–ê—Ä—Ç–∏–∫—É–ª',
      key: 'sku',
      render: (_: any, record: Order) => (
        <div>
          {record.items.map((item, index) => {
            const article = item.sku ? item.sku.slice(-6) : 'N/A';
            return (
              <div key={index} style={{ borderBottom: index < record.items.length - 1 ? '2px solid #9ca3af' : 'none', paddingBottom: '8px', marginBottom: '8px' }}>
                <div className="text-xs text-gray-500 font-mono bg-gray-50 px-2 py-1 rounded">{article}</div>
              </div>
            );
          })}
        </div>
      )
    },
    {
      title: '–¢–æ–≤–∞—Ä—ã',
      key: 'items',
      render: (_: any, record: Order) => (
        <div>
          {record.items.map((item, index) => {
            return (
              <div key={index} style={{ borderBottom: index < record.items.length - 1 ? '2px solid #9ca3af' : 'none', paddingBottom: '8px', marginBottom: '8px' }}>
                <div className="text-xs text-gray-600">
                  <span>{item.name}</span>
                </div>
              </div>
            );
          })}
        </div>
      )
    },
    {
      title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      key: 'quantity',
      render: (_: any, record: Order) => (
        <div>
          {record.items.map((item, index) => {
            return (
              <div key={index} style={{ borderBottom: index < record.items.length - 1 ? '2px solid #9ca3af' : 'none', paddingBottom: '8px', marginBottom: '8px' }}>
                <div className="flex justify-center">
                  <Tag color="blue" className="text-xs font-medium">{item.quantity} —à—Ç</Tag>
                </div>
              </div>
            );
          })}
        </div>
      )
    },
    {
      title: '–¶–µ–Ω–∞',
      key: 'price',
      render: (_: any, record: Order) => (
        <div>
          {record.items.map((item, index) => {
            return (
              <div key={index} style={{ borderBottom: index < record.items.length - 1 ? '2px solid #9ca3af' : 'none', paddingBottom: '8px', marginBottom: '8px' }}>
                <div className="text-xs text-gray-600 text-right">
                  {item.price.toLocaleString()} ‚ÇΩ
                </div>
              </div>
            );
          })}
        </div>
      )
    },
    {
      title: '–ó–∞–∫—É–ø–∫–∞',
      key: 'purchase',
      render: (_: any, record: Order) => {
        const totalPurchase = record.items.reduce((sum, item) => {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≤ –∑–∞–∫–∞–∑–µ
          const purchasePrice = item.costPrice || item.price * 0.7; // fallback –Ω–∞ 70% –µ—Å–ª–∏ costPrice –Ω–µ —É–∫–∞–∑–∞–Ω
          return sum + (purchasePrice * item.quantity);
        }, 0);
        
        return (
          <div>
            <div className="font-semibold text-blue-600 flex items-center gap-1">
              <DollarOutlined />
              {totalPurchase.toLocaleString()} ‚ÇΩ
            </div>
          </div>
        );
      }
    },
    {
      title: '–ü—Ä–∏–±—ã–ª—å',
      key: 'profit',
      render: (_: any, record: Order) => {
        const totalProfit = record.items.reduce((sum, item) => {
          const purchasePrice = item.costPrice || 0;
          return sum + ((item.price - purchasePrice) * item.quantity);
        }, 0);
        return (
          <div>
            <div className="font-semibold text-green-600 flex items-center gap-1">
              <DollarOutlined />
              {totalProfit.toLocaleString()} ‚ÇΩ
            </div>
          </div>
        );
      }
    },
    {
      title: '–°—É–º–º–∞',
      dataIndex: 'total',
      key: 'total',
      sorter: true,
      sortOrder: sortField === 'total' ? sortOrder : null,
      onHeaderCell: () => ({
        onClick: () => handleSort('total'),
      }),
      render: (_: any, record: Order) => {
        const itemsTotal = record.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        return (
          <div>
            <div className="font-semibold text-green-600 flex items-center gap-1">
              <DollarOutlined />
              {itemsTotal.toLocaleString()} ‚ÇΩ
            </div>
            <div className="text-xs text-gray-500">
              {record.paymentStatus === 'paid' ? '–û–ø–ª–∞—á–µ–Ω' : '–ù–µ –æ–ø–ª–∞—á–µ–Ω'}
            </div>
          </div>
        );
      }
    },
    {
      title: '–°—Ç–∞—Ç—É—Å',
      dataIndex: 'status',
      key: 'status',
      render: (status: string, record: Order) => {
        const statusConfig = {
          pending: { color: 'orange', icon: <ExclamationCircleOutlined /> },
          confirmed: { color: 'blue', icon: <CheckCircleOutlined /> },
          processing: { color: 'purple', icon: <ClockCircleOutlined /> },
          shipped: { color: 'indigo', icon: <ClockCircleOutlined /> },
          delivered: { color: 'green', icon: <CheckCircleOutlined /> },
          cancelled: { color: 'red', icon: <ExclamationCircleOutlined /> },
          with_courier: { color: 'cyan', icon: <UserOutlined /> }
        };
        const config = statusConfig[status as keyof typeof statusConfig] || { color: 'default', icon: null };
        
        return (
          <Select
            value={status}
            onChange={(newStatus) => handleQuickStatusChange(record._id, newStatus)}
            style={{ minWidth: 140 }}
            size="small"
            dropdownStyle={{ zIndex: 1000 }}
            className="status-select"
          >
            <Option value="pending">
              <div className="flex items-center gap-2">
                <ExclamationCircleOutlined style={{ color: '#fa8c16' }} />
                <span>–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</span>
              </div>
            </Option>
            <Option value="confirmed">
              <div className="flex items-center gap-2">
                <CheckCircleOutlined style={{ color: '#1890ff' }} />
                <span>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</span>
              </div>
            </Option>
            <Option value="processing">
              <div className="flex items-center gap-2">
                <ClockCircleOutlined style={{ color: '#722ed1' }} />
                <span>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</span>
              </div>
            </Option>
            <Option value="shipped">
              <div className="flex items-center gap-2">
                <ClockCircleOutlined style={{ color: '#531dab' }} />
                <span>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω</span>
              </div>
            </Option>
            <Option value="delivered">
              <div className="flex items-center gap-2">
                <CheckCircleOutlined style={{ color: '#52c41a' }} />
                <span>–î–æ—Å—Ç–∞–≤–ª–µ–Ω</span>
              </div>
            </Option>
            <Option value="cancelled">
              <div className="flex items-center gap-2">
                <ExclamationCircleOutlined style={{ color: '#ff4d4f' }} />
                <span>–û—Ç–º–µ–Ω–µ–Ω</span>
              </div>
            </Option>
            <Option value="with_courier">
              <div className="flex items-center gap-2">
                <UserOutlined style={{ color: '#13c2c2' }} />
                <span>–ü–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É</span>
              </div>
            </Option>
          </Select>
        );
      }
    },
    {
      title: '–î–æ—Å—Ç–∞–≤–∫–∞',
      key: 'delivery',
      sorter: true,
      sortOrder: sortField === 'deliveryDate' ? sortOrder : null,
      onHeaderCell: () => ({
        onClick: () => handleSort('deliveryDate'),
      }),
      render: (_: any, record: Order) => (
        <div className="space-y-1">
          <div className="text-xs font-medium">
            {record.deliveryMethod?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
          </div>
          <div className="text-xs text-gray-500">
            {getDeliveryDateTime(record)}
          </div>
        </div>
      )
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      render: (_: any, record: Order) => (
        <Space size="small">
          <Tooltip title="–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞">
            <Button 
              type="primary" 
              size="small" 
              icon={<EyeOutlined />}
              onClick={() => navigate(`/admin/orders/${record._id}`)}
              className="hover:scale-105 transition-transform"
            />
          </Tooltip>
          <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑">
            <Button 
              size="small" 
              icon={<EditOutlined />}
              onClick={() => showUpdateModal(record)}
              className="hover:scale-105 transition-transform"
            />
          </Tooltip>
        </Space>
      )
    }
  ], [navigate, showUpdateModal, getStatusText, getDeliveryDateText, showCallConfirmationModal, handleQuickStatusChange, handleShowCallAttemptModal, handleCloseCallAttemptModal, handleCallAttempt, sortField, sortOrder, handleSort]);

  if (isLoading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</div>;
  if (error) return <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {(error as Error).message}</div>;

  // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –Ω–µ—Ç –≤ orderStats
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const todayOrders = data?.orders?.filter(order => {
    const created = new Date(order.createdAt);
    created.setHours(0, 0, 0, 0);
    return created.getTime() === today.getTime();
  }).length || 0;

  // === –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ –° –°–ï–†–í–ï–†–ê ===
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ orderStats –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º –≤ –±–∞–∑–µ
  const todayRevenue = orderStats?.todayRevenue || 0;
  const todayProfit = orderStats?.todayProfit || 0;
  const monthRevenue = orderStats?.monthRevenue || 0;
  const monthProfit = orderStats?.monthProfit || 0;
  // === –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ===

  const openHistoryModal = (orderId: string) => {
    setHistoryModal({open: true, orderId});
    setHistoryLoading(true);
    fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/admin/changelog`)
      .then(res => res.json())
      .then(data => {
        const entries = (Array.isArray(data) ? data : []).filter(e => String(e.details?.order_id) === String(orderId));
        setHistoryEntries(entries);
        setHistoryLoading(false);
      });
  };
  const closeHistoryModal = () => setHistoryModal({open: false, orderId: null});



  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
  const handleCreateArrivalFromOrder = (order: Order) => {
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const items = order.items.map((item, index) => ({
      id: `arrival_item_${index}`,
      name: item.name,
      quantity: item.quantity,
      price: item.price || 0,
      costPrice: item.costPrice || (item.price ? Math.round(item.price * 0.7) : 0), // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 70% –æ—Ç —Ü–µ–Ω—ã –∫–∞–∫ –∑–∞–∫—É–ø–æ—á–Ω—É—é
      serialNumbers: [''],
      supplierId: '',
      supplierName: '',
      isAccessory: false // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
    }));
    
    setArrivalItems(items);
    setArrivalModal({open: true, order});
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ
    arrivalForm.setFieldsValue({
      notes: `–ü—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞–∫–∞–∑—É #${order.orderNumber}`
    });
  };

  const closeArrivalModal = () => {
    setArrivalModal({open: false, order: null});
    setArrivalItems([]);
    arrivalForm.resetFields();
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
  const createArrivalFromOrder = async (formValues: any, items: any[]) => {
    try {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
      const itemsBySupplier = new Map();
      
      items.forEach(item => {
        const supplierId = item.supplierId;
        if (!itemsBySupplier.has(supplierId)) {
          itemsBySupplier.set(supplierId, []);
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏—Ö–æ–¥–∞
        const arrivalItem = {
          productId: item.id || `product_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,
          productName: item.name,
          quantity: item.isAccessory ? item.quantity : item.serialNumbers.filter((sn: string) => sn.trim()).length,
          serialNumbers: item.isAccessory ? [] : item.serialNumbers.filter((sn: string) => sn.trim()),
          barcode: item.barcode || undefined,
          price: item.price,
          costPrice: item.costPrice,
          isAccessory: item.isAccessory,
          isService: false
        };
        
        itemsBySupplier.get(supplierId).push(arrivalItem);
      });

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–∏—Ö–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
      const token = localStorage.getItem('admin_token');
      
      for (const [supplierId, supplierItems] of itemsBySupplier.entries()) {
        const supplier = suppliers.find(s => s._id === supplierId);
        if (!supplier) continue;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const totalQuantity = supplierItems.reduce((sum: number, item: { quantity: number }) => sum + item.quantity, 0);
        const totalValue = supplierItems.reduce((sum: number, item: { price: number; quantity: number }) => sum + (item.price * item.quantity), 0);

        const arrivalData = {
          date: new Date().toISOString(),
          supplierId: supplierId,
          supplierName: supplier.name,
          notes: formValues.notes || '',
          items: supplierItems,
          totalQuantity,
          totalValue
        };

        const response = await fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/arrivals`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(arrivalData)
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞');
        }
      }

      message.success('–ü—Ä–∏—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      console.error('Error creating arrival:', error);
      message.error(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
  const translateStatus = (status: string): string => {
    const statusTranslations: Record<string, string> = {
      'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
      'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
      'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
      'with_courier': '–£ –∫—É—Ä—å–µ—Ä–∞'
    };
    return statusTranslations[status] || status;
  };

  // –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const FIELD_LABELS: Record<string, string> = {
    'estimatedDelivery': '–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
    'shippingAddress.firstName': '–ò–º—è',
    'shippingAddress.lastName': '–§–∞–º–∏–ª–∏—è',
    'shippingAddress.email': 'Email',
    'shippingAddress.phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
    'shippingAddress.address': '–ê–¥—Ä–µ—Å',
    'shippingAddress.city': '–ì–æ—Ä–æ–¥',
    'shippingAddress.state': '–û–±–ª–∞—Å—Ç—å',
    'shippingAddress.zipCode': '–ò–Ω–¥–µ–∫—Å',
    'status': '–°—Ç–∞—Ç—É—Å',
    'paymentStatus': '–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã',
    'paymentMethod': '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
    'deliveryMethod': '–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏',
    'deliveryDate': '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
    'trackingNumber': '–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä',
    'notes': '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è',
    'shipping': '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏',
    'deliveryInterval': '–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏',
    'cdekPvzAddress': '–ê–¥—Ä–µ—Å –ü–í–ó',
    'cdekPvzCode': '–ö–æ–¥ –ü–í–ó',
    'items': '–¢–æ–≤–∞—Ä—ã',
  };

  // –ù–æ–≤—ã–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π layout –∏ —Å—Ç–∏–ª–∏
  return (
    <>
      <div className="orders-page-responsive" style={{ 
        width: '100%', 
        maxWidth: 1400, 
        margin: '0 auto', 
        padding: '0', 
        background: 'none',
        paddingBottom: '20px' // –û—Ç—Å—Ç—É–ø –¥–ª—è –ø–∞–Ω–µ–ª–∏ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={{ marginBottom: 24 }}>
        <Title level={2} style={{ margin: 0, color: '#667eea', fontWeight: 700, letterSpacing: 0.5 }}>–ó–∞–∫–∞–∑—ã</Title>
        <div style={{ color: '#6b7280', fontSize: 16, marginTop: 4 }}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤</div>
      </div>

      {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –±–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
      <div style={{ display: 'flex', flexWrap: 'wrap', gap: 16, marginBottom: 32 }}>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(102,126,234,0.08)', border: 'none', background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)' }}>
          <Statistic title={<span style={{ color: '#667eea', fontWeight: 500 }}>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</span>} value={orderStats?.total || 0} prefix={<ShoppingCartOutlined />} />
        </Card>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(102,126,234,0.08)', border: 'none', background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)' }}>
          <Statistic title={<span style={{ color: '#10b981', fontWeight: 500 }}>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</span>} value={orderStats?.processing || 0} prefix={<ClockCircleOutlined />} />
        </Card>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(102,126,234,0.08)', border: 'none', background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)' }}>
          <Statistic title={<span style={{ color: '#ef4444', fontWeight: 500 }}>–û—Ç–º–µ–Ω–µ–Ω–æ</span>} value={orderStats?.cancelled || 0} prefix={<ExclamationCircleOutlined />} />
        </Card>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(102,126,234,0.08)', border: 'none', background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)' }}>
          <Statistic title={<span style={{ color: '#52c41a', fontWeight: 500 }}>–ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è</span>} value={todayOrders} prefix={<PlusOutlined />} />
        </Card>
      </div>

      {/* –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div style={{ display: 'flex', flexWrap: 'wrap', gap: 16, marginBottom: 32 }}>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(16,185,129,0.08)', border: 'none', background: 'linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%)' }}>
          <Statistic 
            title={<span style={{ color: '#10b981', fontWeight: 500 }}>–ü—Ä–∏–±—ã–ª—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è</span>} 
            value={todayProfit} 
            prefix={<DollarOutlined />}
            suffix="‚ÇΩ"
            valueStyle={{ color: '#10b981' }}
          />
        </Card>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(59,130,246,0.08)', border: 'none', background: 'linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%)' }}>
          <Statistic 
            title={<span style={{ color: '#3b82f6', fontWeight: 500 }}>–û–±–æ—Ä–æ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è</span>} 
            value={todayRevenue} 
            prefix={<DollarOutlined />}
            suffix="‚ÇΩ"
            valueStyle={{ color: '#3b82f6' }}
          />
        </Card>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(16,185,129,0.08)', border: 'none', background: 'linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%)' }}>
          <Statistic 
            title={<span style={{ color: '#10b981', fontWeight: 500 }}>–ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü</span>} 
            value={monthProfit} 
            prefix={<DollarOutlined />}
            suffix="‚ÇΩ"
            valueStyle={{ color: '#10b981' }}
          />
        </Card>
        <Card style={{ flex: 1, minWidth: 160, borderRadius: 12, boxShadow: '0 2px 8px rgba(59,130,246,0.08)', border: 'none', background: 'linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%)' }}>
          <Statistic 
            title={<span style={{ color: '#3b82f6', fontWeight: 500 }}>–û–±–æ—Ä–æ—Ç –∑–∞ –º–µ—Å—è—Ü</span>} 
            value={monthRevenue} 
            prefix={<DollarOutlined />}
            suffix="‚ÇΩ"
            valueStyle={{ color: '#3b82f6' }}
          />
        </Card>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ –∫–Ω–æ–ø–∫–∞ */}
      <div className="orders-header-bar" style={{
        display: 'flex', flexWrap: 'wrap', alignItems: 'center', justifyContent: 'space-between',
        gap: 16, marginBottom: 24, padding: '0 0 16px 0', borderBottom: '1px solid #e5e7eb',
        background: 'none'
      }}>
        <div style={{ display: 'flex', flexWrap: 'wrap', gap: 12, alignItems: 'center', justifyContent: 'flex-start', flex: 2 }}>
          {/* –ü–æ–∏—Å–∫ */}
          <SearchInput
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞, —Ç–µ–ª–µ—Ñ–æ–Ω—É, email, QR –∫–æ–¥—É..."
            onSearch={(value) => {
              setSearchText(value);
              setCurrentPage(1);
              refetch();
            }}
            style={{ width: 400 }}
          />

          {/* –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ */}
          <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>
            <Button 
              type={deliveryFilter === '' ? 'primary' : 'default'}
              onClick={() => handleDeliveryFilterChange('')}
              size="middle"
              style={{ 
                borderRadius: 8, 
                fontWeight: 600,
                background: deliveryFilter === '' ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' : undefined,
                border: deliveryFilter === '' ? 'none' : undefined,
                color: deliveryFilter === '' ? 'white' : undefined
              }}
            >
              –í—Å–µ
            </Button>
            <Button 
              type={deliveryFilter === 'pickup_today' ? 'primary' : 'default'}
              onClick={() => handleDeliveryFilterChange('pickup_today')}
              size="middle"
              style={{ 
                borderRadius: 8, 
                fontWeight: 600,
                background: deliveryFilter === 'pickup_today' ? 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)' : undefined,
                border: deliveryFilter === 'pickup_today' ? 'none' : undefined,
                color: deliveryFilter === 'pickup_today' ? 'white' : undefined
              }}
            >
              –°–∞–º–æ–≤—ã–≤–æ–∑—ã —Å–µ–≥–æ–¥–Ω—è
            </Button>
            <Button 
              type={deliveryFilter === 'delivery_today' ? 'primary' : 'default'}
              onClick={() => handleDeliveryFilterChange('delivery_today')}
              size="middle"
              style={{ 
                borderRadius: 8, 
                fontWeight: 600,
                background: deliveryFilter === 'delivery_today' ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)' : undefined,
                border: deliveryFilter === 'delivery_today' ? 'none' : undefined,
                color: deliveryFilter === 'delivery_today' ? 'white' : undefined
              }}
            >
              –î–æ—Å—Ç–∞–≤–∫–∏ —Å–µ–≥–æ–¥–Ω—è
            </Button>
            <Button 
              type={deliveryFilter === 'delivery_tomorrow' ? 'primary' : 'default'}
              onClick={() => handleDeliveryFilterChange('delivery_tomorrow')}
              size="middle"
              style={{ 
                borderRadius: 8, 
                fontWeight: 600,
                background: deliveryFilter === 'delivery_tomorrow' ? 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)' : undefined,
                border: deliveryFilter === 'delivery_tomorrow' ? 'none' : undefined,
                color: deliveryFilter === 'delivery_tomorrow' ? 'white' : undefined
              }}
            >
              –î–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤—Ç—Ä–∞
            </Button>
            <Button 
              type={deliveryFilter === 'new' ? 'primary' : 'default'}
              onClick={() => handleDeliveryFilterChange('new')}
              size="middle"
              style={{ 
                borderRadius: 8, 
                fontWeight: 600,
                background: deliveryFilter === 'new' ? 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)' : undefined,
                border: deliveryFilter === 'new' ? 'none' : undefined,
                color: deliveryFilter === 'new' ? 'white' : undefined
              }}
            >
              –ù–æ–≤—ã–µ
            </Button>
            <Button 
              type={deliveryFilter === 'with_courier' ? 'primary' : 'default'}
              onClick={() => handleDeliveryFilterChange('with_courier')}
              size="middle"
              style={{ 
                borderRadius: 8, 
                fontWeight: 600,
                background: deliveryFilter === 'with_courier' ? 'linear-gradient(135deg, #06b6d4 0%, #0891b2 100%)' : undefined,
                border: deliveryFilter === 'with_courier' ? 'none' : undefined,
                color: deliveryFilter === 'with_courier' ? 'white' : undefined
              }}
            >
              –£ –∫—É—Ä—å–µ—Ä–∞
            </Button>
          </div>

          <Select
            value={selectedStatus}
            onChange={handleStatusChange}
            placeholder="–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"
            style={{ minWidth: 160 }}
            allowClear
            size="middle"
          >
            <Option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</Option>
            <Option value="pending">–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</Option>
            <Option value="confirmed">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</Option>
            <Option value="processing">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</Option>
            <Option value="shipped">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω</Option>
            <Option value="delivered">–î–æ—Å—Ç–∞–≤–ª–µ–Ω</Option>
            <Option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</Option>
            <Option value="with_courier">–ü–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É</Option>
          </Select>

          <Select
            value={pageSize}
            onChange={(value) => {
              setPageSize(value);
              setCurrentPage(1);
            }}
            style={{ minWidth: 120 }}
            size="middle"
          >
            <Option value={10}>10 –∑–∞–∫–∞–∑–æ–≤</Option>
            <Option value={20}>20 –∑–∞–∫–∞–∑–æ–≤</Option>
            <Option value={50}>50 –∑–∞–∫–∞–∑–æ–≤</Option>
            <Option value={100}>100 –∑–∞–∫–∞–∑–æ–≤</Option>
          </Select>
        </div>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', flex: 1, minWidth: 180 }}>
          <Button 
            type="primary" 
            icon={<PlusOutlined />} 
            size="large" 
            onClick={showCreateOrderModal}
            style={{ borderRadius: 10, background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)', border: 'none', fontWeight: 600, boxShadow: '0 2px 8px rgba(16,185,129,0.15)' }}
          >
            –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
          </Button>
        </div>
      </div>

      {/* –ü–∞–Ω–µ–ª—å –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π - –Ω–∞–¥ –∑–∞–∫–∞–∑–∞–º–∏ */}
      <CSSTransition
        in={selectedRowKeys.length > 0}
        timeout={200}
        classNames="bulk-panel"
        unmountOnExit
      >
        <div className="bulk-actions-panel" style={{
          background: 'rgba(255, 255, 255, 0.98)',
          borderRadius: 12,
          boxShadow: '0 4px 20px rgba(102,126,234,0.15)',
          border: '1px solid rgba(102,126,234,0.1)',
          padding: '16px 24px',
          marginBottom: 16,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          gap: 16,
          minHeight: 60,
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
            <span style={{ fontWeight: 600, color: '#667eea', fontSize: 16 }}>–í—ã–±—Ä–∞–Ω–æ: {selectedRowKeys.length}</span>
            <span style={{ color: '#6b7280', fontSize: 14 }}>–∑–∞–∫–∞–∑(–æ–≤)</span>
          </div>
          <div style={{ display: 'flex', gap: 12, flexWrap: 'wrap' }}>
            <Button 
              type="primary" 
              onClick={() => setIsBulkStatusModalVisible(true)} 
              disabled={isBulkLoading} 
              style={{ borderRadius: 8, fontWeight: 600, minWidth: 140 }}
              icon={<EditOutlined />}
            >
              –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            </Button>
            <Button 
              danger 
              onClick={() => setIsBulkDeleteModalVisible(true)} 
              disabled={isBulkLoading} 
              style={{ borderRadius: 8, fontWeight: 600, minWidth: 100 }}
              icon={<DeleteOutlined />}
            >
              –£–¥–∞–ª–∏—Ç—å
            </Button>
            <Button 
              onClick={() => setSelectedRowKeys([])} 
              style={{ borderRadius: 8, minWidth: 100 }}
              icon={<CloseOutlined />}
            >
              –°–±—Ä–æ—Å–∏—Ç—å
            </Button>
          </div>
        </div>
      </CSSTransition>

      {/* –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ */}
      <div style={{ background: 'rgba(255,255,255,0.98)', borderRadius: 16, boxShadow: '0 4px 24px rgba(102,126,234,0.08)', padding: 16, overflowX: 'auto' }}>
        <div style={{ marginBottom: 16, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <div style={{ color: '#6b7280', fontSize: 14 }}>
            –ü–æ–∫–∞–∑–∞–Ω–æ {((currentPage - 1) * pageSize) + 1}-{Math.min(currentPage * pageSize, data?.total || 0)} –∏–∑ {data?.total || 0} –∑–∞–∫–∞–∑–æ–≤
            {selectedRowKeys.length > 0 && (
              <span style={{ marginLeft: 12, color: '#667eea', fontWeight: 600 }}>
                ‚Ä¢ –í—ã–±—Ä–∞–Ω–æ: {selectedRowKeys.length}
              </span>
            )}
          </div>
          <div style={{ color: '#6b7280', fontSize: 14 }}>
            –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {pageSize}
          </div>
        </div>
        <Table
          className="orders-table"
          dataSource={getSortedData()}
          loading={isLoading}
          rowKey="_id"
          rowSelection={rowSelection}
          pagination={{
            current: currentPage,
            total: data?.total,
            pageSize: pageSize,
            onChange: setCurrentPage,
            showSizeChanger: true,
            onShowSizeChange: handlePageSizeChange,
            style: { marginTop: 24 }
          }}
          scroll={{ x: 'max-content' }}
          bordered={false}
          style={{ minWidth: 900 }}
          columns={columns}
        />
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <Modal
        title="–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"
        open={isBulkStatusModalVisible}
        onOk={handleBulkStatusChange}
        onCancel={() => setIsBulkStatusModalVisible(false)}
        confirmLoading={isBulkLoading}
      >
        <Select
          value={bulkStatus}
          onChange={setBulkStatus}
          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å"
          style={{ width: '100%' }}
        >
          <Option value="pending">–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</Option>
          <Option value="confirmed">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</Option>
          <Option value="processing">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</Option>
          <Option value="shipped">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω</Option>
          <Option value="delivered">–î–æ—Å—Ç–∞–≤–ª–µ–Ω</Option>
          <Option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</Option>
          <Option value="with_courier">–ü–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É</Option>
        </Select>
      </Modal>

      <Modal
        title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"
        open={isBulkDeleteModalVisible}
        onOk={handleBulkDelete}
        onCancel={() => setIsBulkDeleteModalVisible(false)}
        confirmLoading={isBulkLoading}
        okText="–£–¥–∞–ª–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
        okButtonProps={{ danger: true }}
      >
        <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b>{selectedRowKeys.length}</b> –∑–∞–∫–∞–∑(–æ–≤)? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.</p>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞ */}
      <Modal
        title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞"
        open={isCallConfirmationModalVisible}
        onCancel={(e) => {
          console.log('üìû –ú–æ–¥–∞–ª–∫–∞ –∑–≤–æ–Ω–∫–∞ - onCancel –≤—ã–∑–≤–∞–Ω');
          console.log('üìû onCancel - –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞:', new Date().toISOString());
          // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
          if (e) {
            e.preventDefault();
            e.stopPropagation();
          }
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞
          if (isCallConfirmationModalVisible) {
            closeCallConfirmationModal();
          }
        }}
        onOk={() => handleCallConfirmation(true)}
        okText="–î–∞"
        cancelText="–ù–µ—Ç"
        confirmLoading={isBulkLoading}
        maskClosable={false}
        keyboard={false}
      >
        <div>
          <p>–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –∑–≤–æ–Ω–æ–∫. –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —ç—Ç–æ—Ç –∑–≤–æ–Ω–æ–∫ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π?</p>
          {orderForCallConfirmation && (
            <p style={{ marginTop: 8, fontWeight: 600, color: '#667eea' }}>
              <strong>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {orderForCallConfirmation.shippingAddress.phone}</strong>
            </p>
          )}
        </div>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ */}
      <Modal
        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑"
        open={isUpdateModalVisible}
        onCancel={closeModal}
        footer={null}
        width={800}
        className="order-edit-modal"
        destroyOnClose={false}
        maskClosable={false}
        keyboard={false}
      >
        <Form
          key={formKey}
          form={form}
          layout="vertical"
          onFinish={handleUpdateOrder}
          className="order-edit-form"
        >
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="status"
                label="–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å' }]}
              >
                <Select>
                  <Option value="pending">–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</Option>
                  <Option value="confirmed">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</Option>
                  <Option value="processing">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</Option>
                  <Option value="shipped">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω</Option>
                  <Option value="delivered">–î–æ—Å—Ç–∞–≤–ª–µ–Ω</Option>
                  <Option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</Option>
                  <Option value="with_courier">–ü–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É</Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="paymentStatus"
                label="–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã' }]}
              >
                <Select>
                  <Option value="pending">–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã</Option>
                  <Option value="paid">–û–ø–ª–∞—á–µ–Ω</Option>
                  <Option value="failed">–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</Option>
                  <Option value="refunded">–í–æ–∑–≤—Ä–∞—Ç</Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>



          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="paymentMethod"
                label="–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã' }]}
              >
                <Select>
                  <Option value="bank_card">–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</Option>
                  <Option value="cash_on_delivery">–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏</Option>
                  <Option value="sberbank_transfer">–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥</Option>
                  <Option value="credit_purchase">–ü–æ–∫—É–ø–∫–∞ –≤ –∫—Ä–µ–¥–∏—Ç</Option>
                  <Option value="usdt_payment">–û–ø–ª–∞—Ç–∞ USDT</Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="deliveryMethod"
                label="–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"
              >
                <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏">
                  {deliveryMethods.map(method => (
                    <Option key={method._id} value={method._id}>
                      {method.name}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="deliveryDate"
                label="–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"
              >
                <DatePicker style={{ width: '100%' }} />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="deliveryInterval"
                label="–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏"
              >
                <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª">
                  {availableTimeIntervals.map(interval => (
                    <Option key={interval} value={interval}>
                      {interval}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="trackingNumber"
                label="–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä"
              >
                <Input 
                  id="trackingNumber"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä" 
                  style={{ width: '100%' }}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="estimatedDelivery"
                label="–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"
              >
                <Input id="estimatedDelivery" type="date" />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Button 
                type="primary" 
                icon={<TruckOutlined />}
                onClick={() => handleCreateCdekOrder(selectedOrder?._id)}
                loading={cdekLoading}
                style={{ width: '100%' }}
              >
                –°–æ–∑–¥–∞—Ç—å –°–î–≠–ö
              </Button>
            </Col>
            <Col span={12}>
              <Button 
                type="default" 
                icon={<SearchOutlined />}
                onClick={() => handleGetCdekTracking(selectedOrder?._id)}
                loading={cdekTrackingLoading}
                style={{ width: '100%' }}
              >
                –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä
              </Button>
            </Col>
          </Row>
          
          <Row gutter={16} style={{ marginTop: '8px' }}>
            <Col span={24}>
              <Button 
                type="dashed" 
                icon={<SyncOutlined />}
                onClick={handleCheckAllCdekTracking}
                loading={checkAllTrackingLoading}
                style={{ width: '100%' }}
              >
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –°–î–≠–ö
              </Button>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="shipping"
                label="–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏"
              >
                <InputNumber
                  style={{ width: '100%' }}
                  placeholder="0"
                  min={0}
                  formatter={(value: number | string | undefined) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  parser={(value: string | undefined) => value ? value.replace(/\$\s?|(,*)/g, '') : ''}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="cdekPvzAddress"
                label="–ê–¥—Ä–µ—Å –ü–í–ó"
              >
                <Input 
                  id="cdekPvzAddress"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –°–î–≠–ö" 
                  style={{ color: '#667eea', fontWeight: 500 }} 
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="cdekPvzCode"
                label="–ö–æ–¥ –ü–í–ó –°–î–≠–ö"
              >
                <Input 
                  id="cdekPvzCode"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ü–í–ó (–Ω–∞–ø—Ä–∏–º–µ—Ä: RVD3)" 
                  style={{ color: '#1890ff', fontWeight: 500 }} 
                />
              </Form.Item>
            </Col>
          </Row>

          {/* –ö–ù–û–ü–ö–ê –û–¢–ü–†–ê–í–ö–ò –ö–£–†–¨–ï–†–£ */}
          <Form.Item>
            <Button 
              type="primary"
              style={{ width: '100%', marginBottom: 16 }}
              onClick={async () => {
                try {
                  const values = form.getFieldsValue();
                  const fields: string[] = [];

                  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                  let messageText = `üöö <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó –î–õ–Ø –ö–£–†–¨–ï–†–ê</b> üöö\n\n`;
                  
                  // –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
                  if (selectedOrder?.orderNumber) {
                    messageText += `üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>${selectedOrder.orderNumber}</code>\n\n`;
                  }
                  
                  // –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                  messageText += `üë§ <b>–ö–õ–ò–ï–ù–¢:</b>\n`;
                  if (values.firstName || values.lastName) {
                    messageText += `   –ò–º—è: ${[values.firstName, values.lastName].filter(Boolean).join(' ')}\n`;
                  }
                  if (values.phone) {
                    messageText += `   üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>${values.phone}</code>\n`;
                  }
                  messageText += `\n`;
                  
                  // –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
                  if (values.address || values.city || values.state || values.zipCode || values.country) {
                    const addressParts = [values.address, values.city, values.state, values.zipCode, values.country].filter(Boolean).join(', ');
                    if (addressParts) {
                      messageText += `üìç <b>–ê–î–†–ï–° –î–û–°–¢–ê–í–ö–ò:</b>\n   ${addressParts}\n\n`;
                    }
                  }
                  
                  // –ü–í–ó –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  if (values.cdekPvzAddress || values.cdekPvzCode) {
                    messageText += `üè™ <b>–ü–í–ó:</b>\n`;
                    if (values.cdekPvzAddress) {
                      messageText += `   –ê–¥—Ä–µ—Å: ${values.cdekPvzAddress}\n`;
                    }
                    if (values.cdekPvzCode) {
                      messageText += `   –ö–æ–¥: <code>${values.cdekPvzCode}</code>\n`;
                    }
                    messageText += `\n`;
                  }
                  
                  // –¢–æ–≤–∞—Ä—ã
                  if (values.items && values.items.length > 0) {
                    messageText += `üì¶ <b>–¢–û–í–ê–†–´:</b>\n`;
                    values.items.forEach((item: any, idx: number) => {
                      const itemTotal = Number(item.price) * Number(item.quantity);
                      messageText += `   ${idx + 1}. ${item.name}\n`;
                      messageText += `      ${item.quantity} —à—Ç. √ó ${item.price}‚ÇΩ = ${itemTotal}‚ÇΩ\n`;
                    });
                    messageText += `\n`;
                  }
                  
                  // –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
                  if (values.deliveryDate) {
                    let deliveryText = '';
                    
                    if (values.deliveryDate === 'today') {
                      deliveryText = '–°–µ–≥–æ–¥–Ω—è';
                    } else if (values.deliveryDate === 'tomorrow') {
                      deliveryText = '–ó–∞–≤—Ç—Ä–∞';
                    } else if (values.deliveryDate === 'day3') {
                      deliveryText = '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞';
                                         } else {
                       // –ï—Å–ª–∏ —ç—Ç–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
                       try {
                         const date = new Date(values.deliveryDate);
                         const options: Intl.DateTimeFormatOptions = { 
                           day: 'numeric', 
                           month: 'long', 
                           year: 'numeric'
                         };
                         deliveryText = date.toLocaleDateString('ru-RU', options);
                       } catch (e) {
                         deliveryText = values.deliveryDate;
                       }
                     }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (values.deliveryInterval) {
                      deliveryText += ` (${values.deliveryInterval})`;
                    }
                    
                    messageText += `üìÖ <b>–í–†–ï–ú–Ø –î–û–°–¢–ê–í–ö–ò:</b> ${deliveryText}\n\n`;
                  }
                  
                  // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                  if (values.notes) {
                    messageText += `üí¨ <b>–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô:</b>\n   ${values.notes}\n\n`;
                  }
                  
                  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
                  let total = 0;
                  if (values.items && values.items.length > 0) {
                    total = values.items.reduce((sum: number, item: any) => sum + (Number(item.price) * Number(item.quantity)), 0);
                  }
                  
                  messageText += `üí∞ <b>–ò–¢–û–ì–û:</b>\n`;
                  if (values.shipping) {
                    messageText += `   –¢–æ–≤–∞—Ä—ã: ${total.toLocaleString()}‚ÇΩ\n`;
                    messageText += `   –î–æ—Å—Ç–∞–≤–∫–∞: ${Number(values.shipping).toLocaleString()}‚ÇΩ\n`;
                    total += Number(values.shipping);
                  }
                  messageText += `   <b>–ö –û–ü–õ–ê–¢–ï: ${total.toLocaleString()}‚ÇΩ</b>`;
                  const telegramToken = '7838214378:AAGhAoArjQMTarjD7Gg5t7Y7z7tJrCBjdMU';
                  const url = `https://api.telegram.org/bot${telegramToken}/sendMessage`;
                  
                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
                  const channelChatId = '-1002834214294'; // ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤
                  const personalChatId = '5591980101'; // chat_id –∫—É—Ä—å–µ—Ä–∞
                  
                  let channelSuccess = false;
                  let personalSuccess = false;
                  
                  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
                  try {
                    const channelRes = await fetch(url, {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({
                        chat_id: channelChatId,
                        text: messageText,
                        parse_mode: 'HTML'
                      })
                    });
                    const channelData = await channelRes.json();
                    console.log('–û—Ç–≤–µ—Ç Telegram (–∫–∞–Ω–∞–ª):', channelData);
                    channelSuccess = channelData.ok;
                  } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:', e);
                  }
                  
                  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
                  try {
                    const personalRes = await fetch(url, {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({
                        chat_id: personalChatId,
                        text: messageText,
                        parse_mode: 'HTML'
                      })
                    });
                    const personalData = await personalRes.json();
                    console.log('–û—Ç–≤–µ—Ç Telegram (–ª–∏—á–Ω—ã–π —á–∞—Ç):', personalData);
                    personalSuccess = personalData.ok;
                  } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç:', e);
                  }
                  
                  if (channelSuccess || personalSuccess) {
                    message.success('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫—É—Ä—å–µ—Ä—É!');
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É"
                    if (selectedOrder?._id) {
                      try {
                        console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ with_courier:', selectedOrder._id);
                        const token = localStorage.getItem('admin_token');
                        const response = await fetch(`${import.meta.env.VITE_API_URL || 'https://technoline-api.loca.lt/api'}/orders/${selectedOrder._id}`, {
                          method: 'PUT',
                          headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                          },
                          body: JSON.stringify({ status: 'with_courier' })
                        });
                        
                        console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
                        
                        if (response.ok) {
                          const result = await response.json();
                          console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', result);
                          message.success('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ü–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É"');
                          refetch(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                          refetchStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        } else {
                          const errorData = await response.json().catch(() => ({}));
                          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', response.status, errorData);
                          message.warning(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫—É—Ä—å–µ—Ä—É, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (${response.status})`);
                        }
                      } catch (statusError) {
                        console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', statusError);
                        message.warning('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫—É—Ä—å–µ—Ä—É, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞');
                      }
                    }
                  } else {
                    const errorMessage = [];
                    if (!channelSuccess) errorMessage.push('–∫–∞–Ω–∞–ª');
                    if (!personalSuccess) errorMessage.push('–ª–∏—á–Ω—ã–π —á–∞—Ç');
                    message.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${errorMessage.join(', ')}`);
                  }
                } catch (e) {
                  message.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
                }
              }}
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫—É—Ä—å–µ—Ä—É
            </Button>
          </Form.Item>

          <Divider orientation="left">–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</Divider>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="firstName"
                label="–ò–º—è"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è' }]}
              >
                <Input id="firstName" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="lastName"
                label="–§–∞–º–∏–ª–∏—è"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é' }]}
              >
                <Input id="lastName" />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="email"
                label="Email"
                rules={[
                  { required: true, message: '–í–≤–µ–¥–∏—Ç–µ email' },
                  { type: 'email', message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' }
                ]}
              >
                <Input id="email" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="phone"
                label="–¢–µ–ª–µ—Ñ–æ–Ω"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω' }]}
              >
                <Input id="phone" />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="address"
            label="–ê–¥—Ä–µ—Å"
            rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å' }]}
          >
            <Input.TextArea id="address" rows={2} />
          </Form.Item>

          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                name="city"
                label="–ì–æ—Ä–æ–¥"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥' }]}
              >
                <Input id="city" />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="state"
                label="–û–±–ª–∞—Å—Ç—å"
              >
                <Input id="state" />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="zipCode"
                label="–ò–Ω–¥–µ–∫—Å"
              >
                <Input id="zipCode" />
              </Form.Item>
            </Col>
          </Row>

          <Divider orientation="left">–¢–æ–≤–∞—Ä—ã</Divider>

          <Form.List name="items">
            {(fields, { add, remove }) => (
              <>
                {fields.map(({ key, name, ...restField }) => (
                  <div key={key} style={{ marginBottom: 16, padding: 16, border: '1px solid #e5e7eb', borderRadius: 8 }}>
                    <Row gutter={16}>
                      <Col span={8}>
                        <Form.Item
                          {...restField}
                          name={[name, 'name']}
                          label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                          rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' }]}
                        >
                          <AutoComplete
                            key={`autocomplete-${name}-${formKey}`}
                            placeholder={productsLoading ? "–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤..." : "–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"}
                            options={products.map(product => ({
                                value: product.name,
                                label: (
                                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                                    <img 
                                      src={product.mainImage} 
                                      alt={product.name}
                                      style={{ width: '24px', height: '24px', objectFit: 'cover', borderRadius: '4px' }}
                                      onError={(e) => {
                                        e.currentTarget.style.display = 'none';
                                      }}
                                    />
                                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', flex: 1 }}>
                                      <span>{product.name}</span>
                                      <span style={{ color: '#666', fontSize: '12px' }}>
                                        {product.price.toLocaleString()} ‚ÇΩ
                                      </span>
                                    </div>
                                  </div>
                                ),
                                product: product
                              }))}
                            onSelect={(value, option) => {
                              const selectedProduct = option.product as Product;
                              if (selectedProduct) {
                                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ items
                                const items = form.getFieldValue('items') || [];
                                items[name] = {
                                  ...(items[name] || {}),
                                  name: selectedProduct.name,
                                  price: selectedProduct.price,
                                  costPrice: selectedProduct.costPrice || 0,
                                  sku: selectedProduct.sku,
                                  productId: selectedProduct._id,
                                  quantity: 1,
                                  image: selectedProduct.mainImage,
                                };
                                form.setFieldsValue({ items });
                                setFormKey(prev => prev + 1);
                              }
                            }}
                            filterOption={(inputValue, option) => {
                              if (!option?.value) return false;
                              return option.value.toLowerCase().includes(inputValue.toLowerCase());
                            }}
                            onSearch={(value) => {
                              // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é, –æ—á–∏—â–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è
                              if (!value) {
                                form.setFields([
                                  {
                                    name: [`items.${name}.price`],
                                    value: undefined
                                  },
                                  {
                                    name: [`items.${name}.costPrice`],
                                    value: undefined
                                  },
                                  {
                                    name: [`items.${name}.sku`],
                                    value: undefined
                                  },
                                  {
                                    name: [`items.${name}.productId`],
                                    value: undefined
                                  },
                                  {
                                    name: [`items.${name}.image`],
                                    value: undefined
                                  }
                                ]);
                              }
                            }}
                            showSearch
                            allowClear
                          />
                        </Form.Item>
                      </Col>
                      <Col span={4}>
                        <Form.Item
                          {...restField}
                          name={[name, 'price']}
                          label="–¶–µ–Ω–∞"
                          rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É' }]}
                        >
                          <InputNumber
                            key={`price-${name}-${formKey}`}
                            style={{ width: '100%' }}
                            min={0}
                            formatter={(value: number | string | undefined) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                            parser={(value: string | undefined) => value ? value.replace(/\$\s?|(,*)/g, '') : ''}
                            onChange={(value) => {
                              // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—É–º–º—ã
                              setTimeout(() => {
                                setFormKey(prev => prev + 1);
                              }, 100);
                            }}
                          />
                        </Form.Item>
                      </Col>
                      <Col span={4}>
                        <Form.Item
                          {...restField}
                          name={[name, 'quantity']}
                          label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                          rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' }]}
                        >
                          <InputNumber
                            key={`quantity-${name}-${formKey}`}
                            style={{ width: '100%' }}
                            min={1}
                            onChange={(value) => {
                              // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—É–º–º—ã
                              setTimeout(() => {
                                setFormKey(prev => prev + 1);
                              }, 100);
                            }}
                          />
                        </Form.Item>
                      </Col>
                      <Col span={3}>
                        <Form.Item
                          {...restField}
                          name={[name, 'sku']}
                          label="SKU"
                        >
                          <Input 
                            id={`sku-${name}`}
                            key={`sku-${name}-${formKey}`}
                            onChange={(e) => {
                              // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                              setTimeout(() => {
                                setFormKey(prev => prev + 1);
                              }, 100);
                            }}
                          />
                        </Form.Item>
                      </Col>
                      <Col span={3}>
                        <Form.Item
                          {...restField}
                          name={[name, 'costPrice']}
                          label="–ó–∞–∫—É–ø–∫–∞"
                        >
                          <InputNumber
                            key={`costPrice-${name}-${formKey}`}
                            style={{ width: '100%' }}
                            min={0}
                            placeholder="0"
                            formatter={(value: number | string | undefined) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                            parser={(value: string | undefined) => value ? value.replace(/\$\s?|(,*)/g, '') : ''}
                            onChange={(value) => {
                              // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—É–º–º—ã
                              setTimeout(() => {
                                setFormKey(prev => prev + 1);
                              }, 100);
                            }}
                          />
                        </Form.Item>
                      </Col>
                      <Col span={4}>
                        <Form.Item label="–°—É–º–º–∞">
                          <div className="item-total">
                            {(() => {
                              const price = form.getFieldValue(['items', name, 'price']) || 0;
                              const quantity = form.getFieldValue(['items', name, 'quantity']) || 0;
                              return `${(price * quantity).toLocaleString()} ‚ÇΩ`;
                            })()}
                          </div>
                        </Form.Item>
                      </Col>
                    </Row>
                    <Button
                      type="text"
                      danger
                      icon={<DeleteOutlined />}
                      onClick={() => {
                        remove(name);
                        setTimeout(() => updateShippingCost(), 100);
                      }}
                      className="delete-item-btn"
                    >
                      –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
                    </Button>
                  </div>
                ))}
                <Form.Item>
                  <Button type="dashed" onClick={() => add()} block icon={<PlusOutlined />}>
                    –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                  </Button>
                </Form.Item>
              </>
            )}
          </Form.List>

          <Form.Item
            name="notes"
            label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
          >
            <Input.TextArea id="notes" rows={3} placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ" />
          </Form.Item>

          <div style={{ textAlign: 'right', marginTop: 24 }}>
            <Button onClick={closeModal} style={{ marginRight: 8 }}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button type="primary" htmlType="submit">
              –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
            </Button>
          </div>
        </Form>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –°–î–≠–ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <Modal
        title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –°–î–≠–ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        open={cdekConfirmModalVisible}
        onCancel={() => setCdekConfirmModalVisible(false)}
        footer={[
          <Button key="cancel" onClick={() => setCdekConfirmModalVisible(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>,
          <Button 
            key="confirm" 
            type="primary" 
            loading={cdekLoading}
            onClick={handleConfirmCdekOrder}
          >
            –°–æ–∑–¥–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
          </Button>
        ]}
        width={700}
      >
        {cdekOrderData && (
          <div>
            <h4>–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</h4>
            
            <Divider orientation="left">–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å</Divider>
            <Row gutter={16}>
              <Col span={12}>
                <strong>–ò–º—è:</strong> {cdekOrderData.sender.name}
              </Col>
              <Col span={12}>
                <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {cdekOrderData.sender.phones[0].number}
              </Col>
            </Row>

            <Divider orientation="left">–ü–æ–ª—É—á–∞—Ç–µ–ª—å</Divider>
            <Row gutter={16}>
              <Col span={12}>
                <strong>–ò–º—è:</strong> {cdekOrderData.recipient.name}
              </Col>
              <Col span={12}>
                <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {cdekOrderData.recipient.phones[0].number}
              </Col>
              <Col span={24}>
                <strong>Email:</strong> {cdekOrderData.recipient.email}
              </Col>
            </Row>

            <Divider orientation="left">–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</Divider>
            <Row gutter={16}>
              <Col span={24}>
                <strong>–ê–¥—Ä–µ—Å:</strong> {cdekOrderData.from_location.address}
              </Col>
              <Col span={8}>
                <strong>–ö–æ–¥ –≥–æ—Ä–æ–¥–∞:</strong> {cdekOrderData.from_location.code}
              </Col>
              <Col span={8}>
                <strong>–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:</strong> {cdekOrderData.from_location.postal_code}
              </Col>
            </Row>

            <Divider orientation="left">–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</Divider>
            <Row gutter={16}>
              <Col span={24}>
                <strong>–ê–¥—Ä–µ—Å:</strong> {cdekOrderData.to_location.address}
              </Col>
              <Col span={8}>
                <strong>–ö–æ–¥ –≥–æ—Ä–æ–¥–∞:</strong> {cdekOrderData.to_location.code}
              </Col>
              <Col span={8}>
                <strong>–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:</strong> {cdekOrderData.to_location.postal_code}
              </Col>
            </Row>

            <Divider orientation="left">–£–ø–∞–∫–æ–≤–∫–∞</Divider>
            <Row gutter={16}>
              <Col span={6}>
                <strong>–ù–æ–º–µ—Ä —É–ø–∞–∫–æ–≤–∫–∏:</strong>
                <div style={{ marginTop: 4, padding: '4px 8px', backgroundColor: '#f5f5f5', borderRadius: 4 }}>
                  PKG1
                </div>
              </Col>
              <Col span={6}>
                <strong>–í–µ—Å (–≥):</strong>
                <InputNumber
                  value={packageData.weight}
                  onChange={(value) => setPackageData(prev => ({ ...prev, weight: value || 2000 }))}
                  min={1}
                  max={30000}
                  style={{ width: '100%', marginTop: 4 }}
                />
              </Col>
              <Col span={6}>
                <strong>–î–ª–∏–Ω–∞ (—Å–º):</strong>
                <InputNumber
                  value={packageData.length}
                  onChange={(value) => setPackageData(prev => ({ ...prev, length: value || 20 }))}
                  min={1}
                  max={150}
                  style={{ width: '100%', marginTop: 4 }}
                />
              </Col>
              <Col span={6}>
                <strong>–®–∏—Ä–∏–Ω–∞ (—Å–º):</strong>
                <InputNumber
                  value={packageData.width}
                  onChange={(value) => setPackageData(prev => ({ ...prev, width: value || 20 }))}
                  min={1}
                  max={150}
                  style={{ width: '100%', marginTop: 4 }}
                />
              </Col>
            </Row>
            <Row gutter={16} style={{ marginTop: 8 }}>
              <Col span={6}>
                <strong>–í—ã—Å–æ—Ç–∞ (—Å–º):</strong>
                <InputNumber
                  value={packageData.height}
                  onChange={(value) => setPackageData(prev => ({ ...prev, height: value || 20 }))}
                  min={1}
                  max={150}
                  style={{ width: '100%', marginTop: 4 }}
                />
              </Col>
              <Col span={18}>
                <strong>–¢–æ–≤–∞—Ä—ã –≤ —É–ø–∞–∫–æ–≤–∫–µ:</strong>
                <div style={{ marginTop: 4, maxHeight: '120px', overflowY: 'auto' }}>
                  {selectedOrder?.items?.map((item: any, index: number) => (
                    <div key={index} style={{ 
                      padding: '4px 8px', 
                      backgroundColor: '#f5f5f5', 
                      borderRadius: 4, 
                      marginBottom: '4px',
                      fontSize: '12px'
                    }}>
                      {item.name || '–¢–æ–≤–∞—Ä'} ({item.quantity} —à—Ç.) - {selectedOrder?.total || 0} ‚ÇΩ
                      {item.productId?.sku && (
                        <div style={{ fontSize: '10px', color: '#666', marginTop: '2px' }}>
                          –ê—Ä—Ç–∏–∫—É–ª: {item.productId.sku}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
                <div style={{ 
                  marginTop: 4, 
                  padding: '4px 8px', 
                  backgroundColor: '#e6f7ff', 
                  borderRadius: 4,
                  fontWeight: 'bold'
                }}>
                  –ò—Ç–æ–≥–æ: {selectedOrder?.total || 0} ‚ÇΩ
                </div>
              </Col>
            </Row>

            <Divider orientation="left">–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—è</Divider>
            <div style={{ color: '#ff4d4f' }}>
              {cdekOrderData.to_location.postal_code === '–°–∞–º–æ–≤—ã–≤–æ–∑' && (
                <p>‚ö†Ô∏è <strong>–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:</strong> –£–∫–∞–∑–∞–Ω "–°–∞–º–æ–≤—ã–≤–æ–∑" –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞</p>
              )}
              {!cdekOrderData.to_location.address || cdekOrderData.to_location.address === '–°–∞–º–æ–≤—ã–≤–æ–∑' && (
                <p>‚ö†Ô∏è <strong>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> –£–∫–∞–∑–∞–Ω "–°–∞–º–æ–≤—ã–≤–æ–∑" –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞</p>
              )}
            </div>
          </div>
        )}
      </Modal>

      <Modal
        open={isCallAttemptModalVisible}
        onCancel={handleCloseCallAttemptModal}
        title="–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–∑–≤–æ–Ω–∞"
        footer={null}
        centered
        destroyOnClose={false}
        maskClosable={false}
        keyboard={false}
      >
        {orderForCallAttempt && (
          <div>
            <div style={{ fontWeight: 500, marginBottom: 8 }}>–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: <span style={{ color: '#222' }}>{orderForCallAttempt.shippingAddress.phone}</span></div>
            <div style={{ marginBottom: 12 }}>–í—ã –¥–æ–∑–≤–æ–Ω–∏–ª–∏—Å—å?</div>
            <div style={{ display: 'flex', gap: 12, marginBottom: 16 }}>
              <Button type="primary" loading={callAttemptLoading} onClick={() => handleCallAttempt('success')}>–î–∞</Button>
              <Button danger loading={callAttemptLoading} onClick={() => handleCallAttempt('failed')}>–ù–µ—Ç</Button>
            </div>
            {((callAttempts || []).filter(a => a.status === 'failed').length > 0) && (
              <div style={{ marginTop: 16 }}>
                <div style={{ fontWeight: 500, marginBottom: 6 }}>–ò—Å—Ç–æ—Ä–∏—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫:</div>
                <ul style={{ paddingLeft: 18 }}>
                  {(callAttempts || []).filter(a => a.status === 'failed').map((a, idx) => (
                    <li key={idx} style={{ color: '#444', fontSize: 13 }}>
                      {new Date(a.date).toLocaleString('ru-RU', { dateStyle: 'short', timeStyle: 'short' })}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        )}
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ */}
      <Modal
        title="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"
        open={isCreateOrderModalVisible}
        onCancel={closeCreateOrderModal}
        footer={null}
        width={1000}
        className="create-order-modal"
        destroyOnClose={false}
        maskClosable={false}
        keyboard={false}
      >
        <Form
          key={createOrderFormKey}
          form={createOrderForm}
          layout="vertical"
          onFinish={handleCreateOrder}
          className="create-order-form"
        >
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="customer"
                label="–ö–ª–∏–µ–Ω—Ç"
              >
                <Select
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –±–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞"
                  loading={customersLoading}
                  allowClear
                  showSearch
                  filterOption={(input, option) => {
                    const label = option?.label?.toString() || '';
                    const searchText = input.toLowerCase();
                    return label.toLowerCase().includes(searchText);
                  }}
                  onChange={(value) => {
                    console.log('üë§ –í—ã–±—Ä–∞–Ω –∫–ª–∏–µ–Ω—Ç:', value);
                    const customer = customers.find(c => c._id === value);
                    setSelectedCustomer(customer);
                    if (customer) {
                      console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç:', customer);
                      createOrderForm.setFieldsValue({
                        firstName: customer.firstName,
                        lastName: customer.lastName,
                        email: customer.email,
                        phone: customer.phone,
                        address: customer.address || '',
                        city: customer.city || '',
                        state: customer.state || '',
                        zipCode: customer.zipCode || '',
                        country: customer.country || '–†–æ—Å—Å–∏—è'
                      });
                      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
                      loadCustomerAddresses(customer._id);
                    } else if (value === '') {
                      console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω');
                      // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞"
                      createOrderForm.setFieldsValue({
                        firstName: '',
                        lastName: '',
                        email: '',
                        phone: '',
                        address: '',
                        city: '',
                        state: '',
                        zipCode: '',
                        country: ''
                      });
                      setCustomerAddresses([]);
                    }
                  }}
                  options={[
                    { value: '', label: '–ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞' },
                    ...(customers.length > 0 ? customers.map(customer => ({
                      value: customer._id,
                      label: `${customer.firstName} ${customer.lastName} (${customer.email})`
                    })) : [])
                  ]}
                  notFoundContent={customersLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="paymentMethod"
                label="–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã' }]}
              >
                <Select>
                  {((availablePaymentMethods.length === 0) || availablePaymentMethods.includes('bank_card')) && (
                    <Option value="bank_card">–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</Option>
                  )}
                  {((availablePaymentMethods.length === 0) || availablePaymentMethods.includes('cash_on_delivery')) && (
                    <Option value="cash_on_delivery">–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏</Option>
                  )}
                  {((availablePaymentMethods.length === 0) || availablePaymentMethods.includes('sberbank_transfer')) && (
                    <Option value="sberbank_transfer">–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥</Option>
                  )}
                  {((availablePaymentMethods.length === 0) || availablePaymentMethods.includes('credit_purchase')) && (
                    <Option value="credit_purchase">–ü–æ–∫—É–ø–∫–∞ –≤ –∫—Ä–µ–¥–∏—Ç</Option>
                  )}
                  {((availablePaymentMethods.length === 0) || availablePaymentMethods.includes('usdt_payment')) && (
                    <Option value="usdt_payment">–û–ø–ª–∞—Ç–∞ USDT</Option>
                  )}
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="deliveryMethod"
                label="–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"
              >
                <Select 
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"
                  onChange={handleDeliveryMethodChange}
                >
                  {deliveryMethods.map(method => (
                    <Option key={method._id} value={method._id}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <span>{method.name}</span>
                        <span style={{ fontSize: '12px', color: '#666' }}>
                          {method.costType === 'fixed' && method.fixedCost ? `${method.fixedCost} ‚ÇΩ` : ''}
                          {method.costType === 'percentage' && method.costPercentage ? `${method.costPercentage}%` : ''}
                          {method.costType === 'fixed_plus_percentage' && method.fixedCost && method.costPercentage ? `${method.fixedCost} ‚ÇΩ + ${method.costPercentage}%` : ''}
                          {method.costType === 'zone' ? '–ó–æ–Ω–∞–ª—å–Ω–∞—è' : ''}
                        </span>
                      </div>
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="shipping"
                label="–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏"
              >
                <InputNumber
                  style={{ width: '100%' }}
                  placeholder="0"
                  min={0}
                  formatter={(value: number | string | undefined) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  parser={(value: string | undefined) => value ? value.replace(/\$\s?|(,*)/g, '') : ''}
                />
              </Form.Item>
            </Col>
          </Row>

          <Divider orientation="left">–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</Divider>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="firstName"
                label="–ò–º—è"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è' }]}
              >
                <Input id="create-firstName" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="lastName"
                label="–§–∞–º–∏–ª–∏—è"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é' }]}
              >
                <Input id="create-lastName" />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="email"
                label="Email"
                rules={[
                  { required: true, message: '–í–≤–µ–¥–∏—Ç–µ email' },
                  { type: 'email', message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' }
                ]}
              >
                <Input id="create-email" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="phone"
                label="–¢–µ–ª–µ—Ñ–æ–Ω"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω' }]}
              >
                <Input id="create-phone" />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="address"
            label={
              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                <span>–ê–¥—Ä–µ—Å</span>
                {selectedCustomer && (
                  <Button
                    type="link"
                    size="small"
                    icon={<HomeOutlined />}
                    onClick={() => {
                      if (customerAddresses.length > 0) {
                        setIsAddressModalVisible(true);
                      } else {
                        message.info('–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤');
                      }
                    }}
                    disabled={addressesLoading}
                    style={{ padding: 0, height: 'auto' }}
                  >
                    –í—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
                  </Button>
                )}
              </div>
            }
            rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å' }]}
          >
            <Input.TextArea id="create-address" rows={2} />
          </Form.Item>

          <Row gutter={16}>
            <Col span={6}>
              <Form.Item
                name="city"
                label="–ì–æ—Ä–æ–¥"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥' }]}
              >
                <Input id="create-city" />
              </Form.Item>
            </Col>
            <Col span={6}>
              <Form.Item
                name="state"
                label="–û–±–ª–∞—Å—Ç—å"
              >
                <Input id="create-state" />
              </Form.Item>
            </Col>
            <Col span={6}>
              <Form.Item
                name="zipCode"
                label="–ò–Ω–¥–µ–∫—Å"
              >
                <Input id="create-zipCode" />
              </Form.Item>
            </Col>
            <Col span={6}>
              <Form.Item
                name="country"
                label="–°—Ç—Ä–∞–Ω–∞"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É' }]}
                initialValue="–†–æ—Å—Å–∏—è"
              >
                <Input id="create-country" />
              </Form.Item>
            </Col>
          </Row>

          <Divider orientation="left">–¢–æ–≤–∞—Ä—ã</Divider>

          <Form.List name="items">
            {(fields, { add, remove }) => (
              <>
                {fields.map(({ key, name, ...restField }) => (
                  <div key={key} style={{ marginBottom: 16, padding: 16, border: '1px solid #e5e7eb', borderRadius: 8 }}>
                    <Row gutter={16}>
                      <Col span={8}>
                        <Form.Item
                          {...restField}
                          name={[name, 'name']}
                          label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                          rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' }]}
                        >
                          <AutoComplete
                            key={`create-autocomplete-${name}-${createOrderFormKey}`}
                            placeholder={productsLoading ? "–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤..." : "–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"}
                            options={products.map(product => ({
                                value: product.name,
                                label: (
                                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                                    <img 
                                      src={product.mainImage} 
                                      alt={product.name}
                                      style={{ width: '24px', height: '24px', objectFit: 'cover', borderRadius: '4px' }}
                                      onError={(e) => {
                                        e.currentTarget.style.display = 'none';
                                      }}
                                    />
                                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', flex: 1 }}>
                                      <span>{product.name}</span>
                                      <span style={{ color: '#666', fontSize: '12px' }}>
                                        {product.price.toLocaleString()} ‚ÇΩ
                                      </span>
                                    </div>
                                  </div>
                                ),
                                product: product
                              }))}
                            onSelect={(value, option) => {
                              const selectedProduct = option.product as Product;
                              if (selectedProduct) {
                                const items = createOrderForm.getFieldValue('items') || [];
                                items[name] = {
                                  ...(items[name] || {}),
                                  name: selectedProduct.name,
                                  price: selectedProduct.price,
                                  costPrice: selectedProduct.costPrice || 0,
                                  sku: selectedProduct.sku,
                                  productId: selectedProduct._id,
                                  quantity: 1,
                                  image: selectedProduct.mainImage,
                                };
                                createOrderForm.setFieldsValue({ items });
                                setCreateOrderFormKey(prev => prev + 1);
                                
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
                                setTimeout(() => updateShippingCost(), 100);
                              }
                            }}
                            filterOption={(inputValue, option) => {
                              if (!option?.value) return false;
                              return option.value.toLowerCase().includes(inputValue.toLowerCase());
                            }}
                            showSearch
                            allowClear
                          />
                        </Form.Item>
                      </Col>
                      <Col span={4}>
                        <Form.Item
                          {...restField}
                          name={[name, 'price']}
                          label="–¶–µ–Ω–∞"
                          rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É' }]}
                        >
                          <InputNumber
                            key={`create-price-${name}-${createOrderFormKey}`}
                            style={{ width: '100%' }}
                            min={0}
                            formatter={(value: number | string | undefined) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                            parser={(value: string | undefined) => value ? value.replace(/\$\s?|(,*)/g, '') : ''}
                            onChange={() => setTimeout(() => updateShippingCost(), 100)}
                          />
                        </Form.Item>
                      </Col>
                      <Col span={4}>
                        <Form.Item
                          {...restField}
                          name={[name, 'quantity']}
                          label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                          rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' }]}
                        >
                          <InputNumber
                            key={`create-quantity-${name}-${createOrderFormKey}`}
                            style={{ width: '100%' }}
                            min={1}
                            onChange={() => setTimeout(() => updateShippingCost(), 100)}
                          />
                        </Form.Item>
                      </Col>
                      <Col span={3}>
                        <Form.Item
                          {...restField}
                          name={[name, 'sku']}
                          label="SKU"
                        >
                          <Input 
                            id={`create-sku-${name}`}
                            key={`create-sku-${name}-${createOrderFormKey}`}
                          />
                        </Form.Item>
                      </Col>
                      <Col span={3}>
                        <Form.Item
                          {...restField}
                          name={[name, 'costPrice']}
                          label="–ó–∞–∫—É–ø–∫–∞"
                        >
                          <InputNumber
                            key={`create-costPrice-${name}-${createOrderFormKey}`}
                            style={{ width: '100%' }}
                            min={0}
                            placeholder="0"
                            formatter={(value: number | string | undefined) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                            parser={(value: string | undefined) => value ? value.replace(/\$\s?|(,*)/g, '') : ''}
                          />
                        </Form.Item>
                      </Col>
                      <Col span={2}>
                        <Form.Item label="–°—É–º–º–∞">
                          <div className="item-total">
                            {(() => {
                              const price = createOrderForm.getFieldValue(['items', name, 'price']) || 0;
                              const quantity = createOrderForm.getFieldValue(['items', name, 'quantity']) || 0;
                              return `${(price * quantity).toLocaleString()} ‚ÇΩ`;
                            })()}
                          </div>
                        </Form.Item>
                      </Col>
                    </Row>
                    <Button
                      type="text"
                      danger
                      icon={<DeleteOutlined />}
                      onClick={() => remove(name)}
                      className="delete-item-btn"
                    >
                      –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
                    </Button>
                  </div>
                ))}
                <Form.Item>
                  <Button type="dashed" onClick={() => add()} block icon={<PlusOutlined />}>
                    –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                  </Button>
                </Form.Item>
              </>
            )}
          </Form.List>

          <Form.Item
            name="notes"
            label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
          >
            <Input.TextArea id="create-notes" rows={3} placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ" />
          </Form.Item>

          <div style={{ textAlign: 'right', marginTop: 24 }}>
            <Button onClick={closeCreateOrderModal} style={{ marginRight: 8 }}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button type="primary" htmlType="submit" loading={createOrderLoading}>
              –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
            </Button>
          </div>
        </Form>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ */}
      <Modal
        title="–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞"
        open={isAddressModalVisible}
        onCancel={() => setIsAddressModalVisible(false)}
        footer={null}
        width={600}
        centered
        destroyOnClose={false}
        maskClosable={false}
        keyboard={false}
        className="address-selection-modal"
      >
        {addressesLoading ? (
          <div style={{ textAlign: 'center', padding: '40px' }}>
            <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤...</div>
          </div>
        ) : customerAddresses.length > 0 ? (
          <div>
            <div style={{ marginBottom: 16, color: '#666' }}>
              –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞:
            </div>
            {customerAddresses.map((address, index) => (
              <div
                key={index}
                style={{
                  border: '1px solid #e5e7eb',
                  borderRadius: 8,
                  padding: 16,
                  marginBottom: 12,
                  cursor: 'pointer',
                  transition: 'all 0.2s ease',
                  backgroundColor: '#fafafa'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = '#f0f0f0';
                  e.currentTarget.style.borderColor = '#d1d5db';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = '#fafafa';
                  e.currentTarget.style.borderColor = '#e5e7eb';
                }}
                onClick={() => handleSelectAddress(address)}
              >
                <div style={{ fontWeight: 600, marginBottom: 8 }}>
                  –ê–¥—Ä–µ—Å {index + 1}
                  {address.isDefault && (
                    <Tag color="blue" style={{ marginLeft: 8 }}>–û—Å–Ω–æ–≤–Ω–æ–π</Tag>
                  )}
                </div>
                <div style={{ color: '#374151', lineHeight: 1.5 }}>
                  <div>{address.address}</div>
                  <div>
                    {address.city}{address.state ? `, ${address.state}` : ''}{address.zipCode ? `, ${address.zipCode}` : ''}
                  </div>
                  {address.country && <div>{address.country}</div>}
                </div>
                <div style={{ marginTop: 8, color: '#6b7280', fontSize: '12px' }}>
                  –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div style={{ textAlign: 'center', padding: '40px', color: '#666' }}>
            <HomeOutlined style={{ fontSize: '48px', color: '#d1d5db', marginBottom: 16 }} />
            <div>–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤</div>
            <div style={{ fontSize: '14px', marginTop: 8 }}>
              –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é
            </div>
          </div>
        )}
      </Modal>

      <Modal
        open={historyModal.open}
        onCancel={closeHistoryModal}
        footer={null}
        title="–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∑–∞–∫–∞–∑—É"
        width={600}
      >
        {historyLoading ? (
          <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        ) : historyEntries.length === 0 ? (
          <div style={{ color: '#888', textAlign: 'center', padding: 24 }}>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞</div>
        ) : (
          <div style={{ maxHeight: 400, overflowY: 'auto' }}>
            {[...historyEntries].sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()).map((entry, idx) => {
              const d = entry.details || {};
              const date = new Date(entry.timestamp).toLocaleString('ru-RU');
              let main = '';
              // –ß–µ–ª–æ–≤–µ–∫–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏
              if (entry.order_action === 'order_created') main = `–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ (—Å—Ç–∞—Ç—É—Å: ${translateStatus(d.status)}, —Å—É–º–º–∞: ${d.total})`;
              else if (entry.order_action === 'order_updated') main = `–ò–∑–º–µ–Ω—ë–Ω –∑–∞–∫–∞–∑ (—Å—Ç–∞—Ç—É—Å: ${translateStatus(d.status || '')})`;
              else if (entry.order_action === 'call_status_update') main = `–ó–≤–æ–Ω–æ–∫: ${d.call_status === 'completed' ? '–≤—ã–ø–æ–ª–Ω–µ–Ω' : (d.call_status === 'not_completed' ? '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω' : d.call_status)}`;
              else if (entry.order_action === 'call_attempt_added') main = `–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞ ‚Ññ${d.total_attempts || ''}`;
              else if (entry.order_action === 'call_request') main = `–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –∑–≤–æ–Ω–æ–∫`;
              else main = entry.order_action;
              return (
                <div key={entry.timestamp + idx} style={{ borderBottom: '1px solid #f0f0f0', padding: '12px 0' }}>
                  <div style={{ fontSize: 13, color: '#555', marginBottom: 4 }}>{date}</div>
                  <div style={{ fontWeight: 500, color: '#222', marginBottom: 2 }}>{main}</div>
                  {(d.admin_user_name || d.admin_user_id) && (
                    <div style={{ fontSize: 12, color: '#3b82f6', marginBottom: 2 }}>
                      –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {d.admin_user_name || (() => {
                        const admin = admins.find((a: any) => a._id === d.admin_user_id);
                        return admin ? `${admin.firstName} ${admin.lastName}` : d.admin_user_id;
                      })()}
                    </div>
                  )}
                  {d.changed_fields && Object.keys(d.changed_fields).length > 0 && (
                    <div style={{ fontSize: 12, color: '#888', marginBottom: 2 }}>
                      {Object.entries(d.changed_fields).map(([field, value]) => {
                        const v = value as { from: any, to: any };
                        const label = FIELD_LABELS[field] || field;
                        // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—è items
                        if (field === 'items') {
                          const compareItems = (fromItems: any[], toItems: any[]) => {
                            if (!Array.isArray(fromItems) || !Array.isArray(toItems)) {
                              return { added: [], removed: [], changed: [] };
                            }

                            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (–∏–º—è + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
                            const fromMap = new Map();
                            const toMap = new Map();

                            fromItems.forEach(item => {
                              if (item && item.name) {
                                const key = `${item.name}_${item.quantity || 1}`;
                                fromMap.set(key, item);
                              }
                            });

                            toItems.forEach(item => {
                              if (item && item.name) {
                                const key = `${item.name}_${item.quantity || 1}`;
                                toMap.set(key, item);
                              }
                            });

                            const added: any[] = [];
                            const removed: any[] = [];
                            const changed: any[] = [];

                            // –ù–∞—Ö–æ–¥–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                            toMap.forEach((item, key) => {
                              if (!fromMap.has(key)) {
                                added.push(item);
                              }
                            });

                            // –ù–∞—Ö–æ–¥–∏–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                            fromMap.forEach((item, key) => {
                              if (!toMap.has(key)) {
                                removed.push(item);
                              }
                            });

                            return { added, removed, changed };
                          };

                          const formatItem = (item: any) => {
                            if (!item || !item.name) return '';
                            return `${item.name}${item.quantity && item.quantity > 1 ? ` (${item.quantity} —à—Ç.)` : ''}`;
                          };

                          const { added, removed } = compareItems(v.from || [], v.to || []);
                          
                          if (added.length > 0 || removed.length > 0) {
                            return (
                              <div key={field}>
                                {added.length > 0 && (
                                  <span style={{color: '#38a169'}}>+ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added.map(formatItem).join(', ')}</span>
                                )}
                                {removed.length > 0 && (
                                  <span style={{color: '#e53e3e'}}>- –£–¥–∞–ª–µ–Ω–æ: {removed.map(formatItem).join(', ')}</span>
                                )}
                              </div>
                            );
                          } else {
                            // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏—á–µ–≥–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
                            return null;
                          }
                        }
                        // –û–±—ã—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                        return (
                          <div key={field}>
                            {label}: <span style={{color: '#e53e3e'}}>{field === 'status' ? translateStatus(String(v.from)) : String(v.from)}</span> ‚Üí <span style={{color: '#38a169'}}>{field === 'status' ? translateStatus(String(v.to)) : String(v.to)}</span>
                          </div>
                        );
                      })}
                    </div>
                  )}
                  {entry.description && <div style={{ fontSize: 12, color: '#888', marginTop: 4 }}>{entry.description}</div>}
                </div>
              );
            })}
          </div>
        )}
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞ –∏–∑ –∑–∞–∫–∞–∑–∞ */}
      <Modal
        title={`–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏—Ö–æ–¥ –∏–∑ –∑–∞–∫–∞–∑–∞ ${arrivalModal.order?.orderNumber || ''}`}
        open={arrivalModal.open}
        destroyOnHidden={true}
        onCancel={closeArrivalModal}
        onOk={() => {
          // –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤—ã–±—Ä–∞–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫
          const hasErrors = arrivalItems.some(item => !item.supplierId);
          if (hasErrors) {
            message.error('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞');
            return;
          }

          // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –Ω–µ-–∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
          const serialNumberErrors = arrivalItems.some(item => 
            !item.isAccessory && item.serialNumbers.filter((sn: string) => sn.trim()).length === 0
          );
          if (serialNumberErrors) {
            message.error('–î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏');
            return;
          }

          arrivalForm.validateFields().then(values => {
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏—Ö–æ–¥ –≤ localStorage
            createArrivalFromOrder(values, arrivalItems);
            closeArrivalModal();
          });
        }}
        width={900}
        okText="–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏—Ö–æ–¥"
        cancelText="–û—Ç–º–µ–Ω–∞"
        style={{ top: 20 }}
      >
        <Form 
          form={arrivalForm} 
          layout="vertical"
        >
          <Form.Item
            name="notes"
            label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
          >
            <Input.TextArea rows={2} placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" />
          </Form.Item>

          <div>
            <h4>–¢–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞:</h4>
            <div style={{ maxHeight: '500px', overflowY: 'auto' }}>
              {arrivalItems.map((item, index) => (
                <div key={item.id} style={{ 
                  marginBottom: '16px', 
                  padding: '16px', 
                  background: '#f8f9fa', 
                  border: '1px solid #e9ecef', 
                  borderRadius: '8px' 
                }}>
                                     <Row gutter={16}>
                     <Col span={8}>
                       <div style={{ fontWeight: 'bold', marginBottom: '8px' }}>{item.name}</div>
                       <div style={{ fontSize: '12px', color: '#666', marginBottom: '8px' }}>
                         –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}
                       </div>
                     </Col>
                     <Col span={5}>
                       <div style={{ marginBottom: '8px', fontSize: '12px', fontWeight: '500' }}>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</div>
                       <Select
                         value={item.supplierId}
                         onChange={(supplierId) => {
                           const supplier = suppliers.find(s => s._id === supplierId);
                           const newItems = [...arrivalItems];
                           newItems[index] = {
                             ...newItems[index],
                             supplierId,
                             supplierName: supplier?.name || ''
                           };
                           setArrivalItems(newItems);
                         }}
                         placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
                         style={{ width: '100%' }}
                         size="small"
                       >
                         {suppliers.filter(s => s.status === 'active').map(supplier => (
                           <Option key={supplier._id} value={supplier._id}>
                             {supplier.name}
                           </Option>
                         ))}
                       </Select>
                     </Col>
                     <Col span={5}>
                       <div style={{ marginBottom: '8px', fontSize: '12px', fontWeight: '500' }}>–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</div>
                       <InputNumber
                         value={item.price}
                         onChange={(value) => {
                           const newItems = [...arrivalItems];
                           newItems[index] = {
                             ...newItems[index],
                             price: value || 0
                           };
                           setArrivalItems(newItems);
                         }}
                         placeholder="0"
                         style={{ width: '100%' }}
                         size="small"
                         min={0}
                         formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                       />
                     </Col>
                     <Col span={6}>
                       <div style={{ marginBottom: '8px', fontSize: '12px', fontWeight: '500' }}>–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞:</div>
                       <InputNumber
                         value={item.costPrice}
                         onChange={(value) => {
                           const newItems = [...arrivalItems];
                           newItems[index] = {
                             ...newItems[index],
                             costPrice: value || 0
                           };
                           setArrivalItems(newItems);
                         }}
                         placeholder="0"
                         style={{ width: '100%' }}
                         size="small"
                         min={0}
                         formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                       />
                     </Col>
                   </Row>
                  
                  <Row gutter={16} style={{ marginTop: '12px' }}>
                    <Col span={8}>
                      <div style={{ marginBottom: '8px', fontSize: '12px', fontWeight: '500' }}>–¢–∏–ø —Ç–æ–≤–∞—Ä–∞:</div>
                      <Select
                        value={item.isAccessory ? 'accessory' : 'tech'}
                        onChange={(value) => {
                          const newItems = [...arrivalItems];
                          newItems[index] = {
                            ...newItems[index],
                            isAccessory: value === 'accessory',
                            serialNumbers: value === 'accessory' ? [] : ['']
                          };
                          setArrivalItems(newItems);
                        }}
                        style={{ width: '100%' }}
                        size="small"
                      >
                        <Option value="tech">üîß –¢–µ—Ö–Ω–∏–∫–∞</Option>
                        <Option value="accessory">üì¶ –ê–∫—Å–µ—Å—Å—É–∞—Ä</Option>
                      </Select>
                    </Col>
                    <Col span={16}>
                      {!item.isAccessory && (
                        <div>
                          <div style={{ marginBottom: '8px', fontSize: '12px', fontWeight: '500' }}>
                            –°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = {item.serialNumbers.filter((sn: string) => sn.trim()).length}):
                          </div>
                          <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px' }}>
                            {item.serialNumbers.map((sn: string, i: number) => (
                              <div key={i} style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                                <Input
                                  value={sn}
                                  onChange={(e) => {
                                    const newItems = [...arrivalItems];
                                    newItems[index].serialNumbers[i] = e.target.value;
                                    setArrivalItems(newItems);
                                  }}
                                  placeholder={`S/N ${i + 1}`}
                                  size="small"
                                  style={{ width: '150px' }}
                                />
                                <Button
                                  size="small"
                                  icon={<CloseOutlined />}
                                  onClick={() => {
                                    const newItems = [...arrivalItems];
                                    newItems[index].serialNumbers = newItems[index].serialNumbers.filter((_: string, idx: number) => idx !== i);
                                    if (newItems[index].serialNumbers.length === 0) {
                                      newItems[index].serialNumbers = [''];
                                    }
                                    setArrivalItems(newItems);
                                  }}
                                  disabled={item.serialNumbers.length === 1}
                                />
                              </div>
                            ))}
                          </div>
                          <Button
                            size="small"
                            icon={<PlusOutlined />}
                            onClick={() => {
                              const newItems = [...arrivalItems];
                              newItems[index].serialNumbers = [...newItems[index].serialNumbers, ''];
                              setArrivalItems(newItems);
                            }}
                            style={{ marginTop: '8px' }}
                          >
                            –î–æ–±–∞–≤–∏—Ç—å S/N
                          </Button>
                        </div>
                      )}
                      {item.isAccessory && (
                        <div>
                          <div style={{ marginBottom: '8px', fontSize: '12px', fontWeight: '500' }}>–®—Ç—Ä–∏—Ö–∫–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</div>
                          <Input
                            value={item.barcode || ''}
                            onChange={(e) => {
                              const newItems = [...arrivalItems];
                              newItems[index] = {
                                ...newItems[index],
                                barcode: e.target.value
                              };
                              setArrivalItems(newItems);
                            }}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥"
                            size="small"
                          />
                        </div>
                      )}
                    </Col>
                  </Row>
                </div>
              ))}
            </div>
          </div>
        </Form>
      </Modal>
      </div>
    </>
  );
});

export default Orders; 