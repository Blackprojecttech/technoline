import React, { useState, useEffect } from 'react';
import { 
  Card, 
  Select, 
  DatePicker, 
  Button,
  Row,
  Col,
  Statistic,
  Table,
  Space,
  message
} from 'antd';
import { 
  BarChartOutlined,
  DollarOutlined,
  TrophyOutlined,
  FileTextOutlined,
  CalendarOutlined,
  ReloadOutlined
} from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';
import dayjs from 'dayjs';
import { receiptsApi } from '../utils/baseApi';

const { Option } = Select;
const { RangePicker } = DatePicker;

type PeriodType = 'day' | 'week' | 'month' | 'range';

interface AnalyticsData {
  date: string;
  revenue: number; // –≤—ã—Ä—É—á–∫–∞
  profit: number; // –ø—Ä–∏–±—ã–ª—å
  receiptsCount: number; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤
  averageCheck: number; // —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫
}

interface ReceiptData {
  id: string;
  receiptNumber: string;
  totalAmount: number;
  total?: number; // –ü–æ–ª–µ –∏–∑ –±—ç–∫–µ–Ω–¥–∞
  items: Array<{
    price: number;
    costPrice: number;
    quantity: number;
    total: number;
  }>;
  date: string;
  status: string;
  payments: Array<{
    method: string;
    amount: number;
  }>;
  deliveryPrice?: number; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ü–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
  discountInfo?: { // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–∏–¥–∫–µ
    type: 'percent' | 'fixed';
    value: number;
  };
}

const Analytics: React.FC = () => {
  const [periodType, setPeriodType] = useState<PeriodType>('month');
  const [selectedDate, setSelectedDate] = useState(dayjs());
  const [dateRange, setDateRange] = useState<[dayjs.Dayjs, dayjs.Dayjs]>([
    dayjs().subtract(7, 'days'),
    dayjs()
  ]);
  const [loading, setLoading] = useState(false);
  const [receipts, setReceipts] = useState<ReceiptData[]>([]);
  const [analyticsData, setAnalyticsData] = useState<AnalyticsData[]>([]);
  const [pageSize, setPageSize] = useState<number>(() => {
    const saved = localStorage.getItem('analyticsPageSize');
    return saved ? parseInt(saved) : 10;
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–æ–≤ –∏–∑ API
  const loadReceipts = async () => {
    setLoading(true);
    try {
      const receiptsData = await receiptsApi.getAll();
      setReceipts(receiptsData);
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${receiptsData.length} —á–µ–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–æ–≤:', error);
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —á–µ–∫–æ–≤');
      setReceipts([]);
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadReceipts();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handlePageSizeChange = (current: number, size: number) => {
    setPageSize(size);
    localStorage.setItem('analyticsPageSize', size.toString());
  };

  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —á–µ–∫–æ–≤ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∞
  useEffect(() => {
    calculateAnalytics();
  }, [receipts, periodType, selectedDate, dateRange]);

  const calculateAnalytics = () => {
    if (!receipts.length) {
      setAnalyticsData([]);
      return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —á–µ–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
    const filteredReceipts = getFilteredReceipts();
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
    const groupedData = new Map<string, AnalyticsData>();

    filteredReceipts.forEach(receipt => {
      const receiptDate = dayjs(receipt.date).format('YYYY-MM-DD');
      
      if (!groupedData.has(receiptDate)) {
        groupedData.set(receiptDate, {
          date: receiptDate,
          revenue: 0,
          profit: 0,
          receiptsCount: 0,
          averageCheck: 0
        });
      }

      const dayData = groupedData.get(receiptDate);
      if (!dayData) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
      
      // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —á–µ–∫–∏
      if (receipt.status !== 'cancelled') {
        const totalAmount = receipt.totalAmount || receipt.total || 0;
        dayData.revenue += totalAmount;
        dayData.receiptsCount += 1;

        // –°—á–∏—Ç–∞–µ–º –ø—Ä–∏–±—ã–ª—å —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
        let receiptProfit = 0;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º totalAmount –µ—Å–ª–∏ –µ—Å—Ç—å (—É–∂–µ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏)
        if (receipt.totalAmount || receipt.total) {
          const deliveryPrice = receipt.deliveryPrice || 0;
          const finalSalesTotal = ((receipt.totalAmount || receipt.total) || 0) - deliveryPrice; // –ü—Ä–æ–¥–∞–∂–∏ –±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏
          
          // –°—á–∏—Ç–∞–µ–º –∑–∞–∫—É–ø–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
          const costTotal = (receipt.items || []).reduce((sum: number, item: any) => {
            return sum + ((item.costPrice || 0) * item.quantity);
          }, 0);
          
          receiptProfit = finalSalesTotal - costTotal;
        } else {
          // Fallback - —Å—á–∏—Ç–∞–µ–º –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
          const salesTotal = (receipt.items || []).reduce((sum: number, item: any) => {
            return sum + (item.total || (item.price * item.quantity));
          }, 0);
          
          const costTotal = (receipt.items || []).reduce((sum: number, item: any) => {
            return sum + ((item.costPrice || 0) * item.quantity);
          }, 0);
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –∫ –ø—Ä–æ–¥–∞–∂–Ω–æ–π —Å—É–º–º–µ
          let discountAmount = 0;
          const discountInfo = (receipt as any).discountInfo;
          if (discountInfo && discountInfo.value > 0) {
            if (discountInfo.type === 'percent') {
              discountAmount = salesTotal * (discountInfo.value / 100);
            } else {
              discountAmount = discountInfo.value;
            }
          }
          
          const finalSalesTotal = salesTotal - discountAmount;
          receiptProfit = finalSalesTotal - costTotal;
        }
        
        dayData.profit += receiptProfit;
      }
    });

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫
    groupedData.forEach(data => {
      data.averageCheck = data.receiptsCount > 0 ? data.revenue / data.receiptsCount : 0;
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    const sortedData = Array.from(groupedData.values()).sort((a, b) => 
      dayjs(a.date).valueOf() - dayjs(b.date).valueOf()
    );

    setAnalyticsData(sortedData);
  };

  const getFilteredReceipts = (): ReceiptData[] => {
    const now = dayjs();
    
    switch (periodType) {
      case 'day':
        const targetDate = selectedDate.format('YYYY-MM-DD');
        return receipts.filter(receipt => 
          dayjs(receipt.date).format('YYYY-MM-DD') === targetDate
        );
        
      case 'week':
        const weekStart = selectedDate.startOf('week');
        const weekEnd = selectedDate.endOf('week');
        return receipts.filter(receipt => {
          const receiptDate = dayjs(receipt.date);
          return receiptDate.isAfter(weekStart) && receiptDate.isBefore(weekEnd);
        });
        
      case 'month':
        const monthStart = selectedDate.startOf('month');
        const monthEnd = selectedDate.endOf('month');
        return receipts.filter(receipt => {
          const receiptDate = dayjs(receipt.date);
          return receiptDate.isAfter(monthStart) && receiptDate.isBefore(monthEnd);
        });
        
      case 'range':
        return receipts.filter(receipt => {
          const receiptDate = dayjs(receipt.date);
          return receiptDate.isAfter(dateRange[0]) && receiptDate.isBefore(dateRange[1]);
        });
        
      default:
        return receipts;
    }
  };

  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
  const totalStats = analyticsData.reduce(
    (acc, day) => ({
      revenue: acc.revenue + day.revenue,
      profit: acc.profit + day.profit,
      receiptsCount: acc.receiptsCount + day.receiptsCount,
      averageCheck: 0 // –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    }),
    { revenue: 0, profit: 0, receiptsCount: 0, averageCheck: 0 }
  );
  
  totalStats.averageCheck = totalStats.receiptsCount > 0 
    ? totalStats.revenue / totalStats.receiptsCount 
    : 0;

  const getPeriodTitle = () => {
    switch (periodType) {
      case 'day':
        return `–∑–∞ ${selectedDate.format('DD.MM.YYYY')}`;
      case 'week':
        return `–∑–∞ –Ω–µ–¥–µ–ª—é ${selectedDate.startOf('week').format('DD.MM')} - ${selectedDate.endOf('week').format('DD.MM.YYYY')}`;
      case 'month':
        return `–∑–∞ ${selectedDate.format('MMMM YYYY')}`;
      case 'range':
        return `–∑–∞ –ø–µ—Ä–∏–æ–¥ ${dateRange[0].format('DD.MM.YYYY')} - ${dateRange[1].format('DD.MM.YYYY')}`;
      default:
        return '';
    }
  };

  const columns: ColumnsType<AnalyticsData> = [
    {
      title: '–î–∞—Ç–∞',
      dataIndex: 'date',
      key: 'date',
      render: (date) => (
        <div>
          <div>{dayjs(date).format('DD.MM.YYYY')}</div>
          <div style={{ fontSize: '12px', color: '#8c8c8c' }}>
            {dayjs(date).format('HH:mm')}
          </div>
        </div>
      ),
      sorter: (a, b) => dayjs(a.date).valueOf() - dayjs(b.date).valueOf(),
    },
    {
      title: '–í—ã—Ä—É—á–∫–∞',
      dataIndex: 'revenue',
      key: 'revenue',
      render: (value) => (
        <span style={{ color: '#52c41a', fontWeight: '600' }}>
          {value.toLocaleString('ru-RU')} ‚ÇΩ
        </span>
      ),
      sorter: (a, b) => a.revenue - b.revenue,
    },
    {
      title: '–ü—Ä–∏–±—ã–ª—å',
      dataIndex: 'profit',
      key: 'profit',
      render: (value) => (
        <span style={{ color: '#1890ff', fontWeight: '600' }}>
          {value.toLocaleString('ru-RU')} ‚ÇΩ
        </span>
      ),
      sorter: (a, b) => a.profit - b.profit,
    },
    {
      title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤',
      dataIndex: 'receiptsCount',
      key: 'receiptsCount',
      render: (value) => (
        <span style={{ fontWeight: '500' }}>
          {value}
        </span>
      ),
      sorter: (a, b) => a.receiptsCount - b.receiptsCount,
    },
    {
      title: '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫',
      dataIndex: 'averageCheck',
      key: 'averageCheck',
      render: (value) => (
        <span style={{ color: '#722ed1', fontWeight: '500' }}>
          {value.toLocaleString('ru-RU')} ‚ÇΩ
        </span>
      ),
      sorter: (a, b) => a.averageCheck - b.averageCheck,
    },
  ];

  return (
    <div>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Card style={{ marginBottom: '24px', borderRadius: '12px', background: 'linear-gradient(135deg, #f0f2f5 0%, #e6f7ff 100%)', border: '1px solid #d9d9d9' }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
          <BarChartOutlined style={{ fontSize: '24px', color: '#1890ff' }} />
          <div>
            <div style={{ fontSize: '20px', fontWeight: '600', color: '#1890ff' }}>
              –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
            </div>
            <div style={{ fontSize: '14px', color: '#595959', marginTop: '4px' }}>
              –ê–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏, –ø—Ä–∏–±—ã–ª–∏ –∏ –ø—Ä–æ–¥–∞–∂ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
            </div>
          </div>
        </div>
      </Card>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <Card style={{ marginBottom: '24px', borderRadius: '12px' }}>
        <div style={{ display: 'flex', gap: '16px', alignItems: 'center', flexWrap: 'wrap' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
            <CalendarOutlined style={{ color: '#8c8c8c' }} />
            <span style={{ fontSize: '14px', fontWeight: '500' }}>–ü–µ—Ä–∏–æ–¥:</span>
          </div>
          
          <Select
            value={periodType}
            onChange={setPeriodType}
            style={{ minWidth: '120px' }}
          >
            <Option value="day">–î–µ–Ω—å</Option>
            <Option value="week">–ù–µ–¥–µ–ª—è</Option>
            <Option value="month">–ú–µ—Å—è—Ü</Option>
            <Option value="range">–ò–Ω—Ç–µ—Ä–≤–∞–ª</Option>
          </Select>

          {periodType !== 'range' && (
            <DatePicker
              value={selectedDate}
              onChange={(date) => date && setSelectedDate(date)}
              picker={periodType === 'month' ? 'month' : 'date'}
              format={periodType === 'month' ? 'MMMM YYYY' : 'DD.MM.YYYY'}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
            />
          )}

          {periodType === 'range' && (
            <RangePicker
              value={dateRange}
              onChange={(dates) => dates && setDateRange(dates as [dayjs.Dayjs, dayjs.Dayjs])}
              format="DD.MM.YYYY"
              placeholder={['–û—Ç', '–î–æ']}
            />
          )}

          <Button
            icon={<ReloadOutlined />}
                          onClick={loadReceipts}
            loading={loading}
            style={{ borderRadius: '8px' }}
          >
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
        </div>
      </Card>

      {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div style={{ marginBottom: '16px' }}>
        <h3 style={{ margin: 0, color: '#595959', fontSize: '16px', fontWeight: '500' }}>
          üìà –ò—Ç–æ–≥–∏ {getPeriodTitle()}
        </h3>
      </div>

      <Row gutter={[16, 16]} style={{ marginBottom: '24px' }}>
        <Col xs={24} sm={12} md={6}>
          <Card style={{ borderRadius: '12px', background: 'linear-gradient(135deg, #f6ffed 0%, #d9f7be 100%)', border: 'none' }}>
            <Statistic
              title="–í—ã—Ä—É—á–∫–∞"
              value={totalStats.revenue}
              precision={0}
              valueStyle={{ color: '#52c41a', fontSize: '24px', fontWeight: 'bold' }}
              prefix={<DollarOutlined />}
              suffix="‚ÇΩ"
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} md={6}>
          <Card style={{ borderRadius: '12px', background: 'linear-gradient(135deg, #e6f7ff 0%, #bae7ff 100%)', border: 'none' }}>
            <Statistic
              title="–ü—Ä–∏–±—ã–ª—å"
              value={totalStats.profit}
              precision={0}
              valueStyle={{ color: '#1890ff', fontSize: '24px', fontWeight: 'bold' }}
              prefix={<TrophyOutlined />}
              suffix="‚ÇΩ"
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} md={6}>
          <Card style={{ borderRadius: '12px', background: 'linear-gradient(135deg, #fff2e8 0%, #ffd8bf 100%)', border: 'none' }}>
            <Statistic
              title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤"
              value={totalStats.receiptsCount}
              valueStyle={{ color: '#fa541c', fontSize: '24px', fontWeight: 'bold' }}
              prefix={<FileTextOutlined />}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} md={6}>
          <Card style={{ borderRadius: '12px', background: 'linear-gradient(135deg, #f9f0ff 0%, #d3adf7 100%)', border: 'none' }}>
            <Statistic
              title="–°—Ä–µ–¥–Ω–∏–π —á–µ–∫"
              value={totalStats.averageCheck}
              precision={0}
              valueStyle={{ color: '#722ed1', fontSize: '24px', fontWeight: 'bold' }}
              prefix={<BarChartOutlined />}
              suffix="‚ÇΩ"
            />
          </Card>
        </Col>
      </Row>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ */}
      <Card style={{ borderRadius: '12px' }}>
        <div style={{ marginBottom: '16px' }}>
          <h4 style={{ margin: 0, fontSize: '16px', fontWeight: '500' }}>
            üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
          </h4>
        </div>
        <Table
          columns={columns}
          dataSource={analyticsData}
          rowKey="date"
          loading={loading}
          pagination={{
            pageSize: pageSize,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total) => `–í—Å–µ–≥–æ ${total} –¥–Ω–µ–π`,
            pageSizeOptions: ['10', '20', '50', '100'],
            onShowSizeChange: handlePageSizeChange,
          }}
          scroll={{ x: 800 }}
          locale={{
            emptyText: loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : (
              <div style={{ padding: '40px', textAlign: 'center' }}>
                <BarChartOutlined style={{ fontSize: '48px', color: '#d9d9d9', marginBottom: '16px' }} />
                <div style={{ color: '#8c8c8c', fontSize: '16px' }}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</div>
                <div style={{ color: '#bfbfbf', fontSize: '14px', marginTop: '8px' }}>
                  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                </div>
              </div>
            )
          }}
        />
      </Card>
    </div>
  );
};

export default Analytics; 