// baseApi.ts
import { message } from 'antd';

export class BaseApi {
  private baseUrl: string;
  private endpoint: string;

  constructor(endpoint: string) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ —Ö–æ—Å—Ç–∞
    const apiUrl = import.meta.env.VITE_API_URL;
    if (apiUrl) {
      this.baseUrl = apiUrl;
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º production API –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      this.baseUrl = 'https://technohubstore.net/api';
    }
    
    console.log('üåê API Base URL:', this.baseUrl);
    this.endpoint = endpoint;
  }

  private getAuthHeaders(): HeadersInit {
    const token = localStorage.getItem('admin_token');
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    };
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }
    return headers;
  }

  private async handleResponse(response: Response, url: string) {
    console.log(`üì• Response from ${url}:`, {
      status: response.status,
      statusText: response.statusText,
      headers: Object.fromEntries(response.headers.entries())
    });

    let responseData;
    const contentType = response.headers.get('content-type');
    
    try {
      if (contentType && contentType.includes('application/json')) {
        responseData = await response.json();
        console.log('üì¶ Response data:', responseData);
      } else {
        responseData = await response.text();
        console.log('üìù Response text:', responseData);
      }
    } catch (e) {
      console.error('‚ùå Failed to parse response:', e);
      responseData = null;
    }

    if (!response.ok) {
      console.error('‚ùå Server error response:', {
        status: response.status,
        statusText: response.statusText,
        data: responseData
      });
      
      // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
      const error: any = new Error(
        responseData?.error || 
        responseData?.message || 
        `Failed to ${url.includes('login') ? 'authenticate' : `handle ${this.endpoint} request`}`
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫ –æ—à–∏–±–∫–µ
      error.response = response;
      error.data = responseData;
      error.status = response.status;
      
      throw error;
    }

    return responseData;
  }

  private async fetchWithRetry(url: string, options: RequestInit, retries = 2): Promise<Response> {
    const finalOptions: RequestInit = {
      ...options,
      headers: {
        ...this.getAuthHeaders(),
        ...options.headers,
      },
      credentials: 'include',
      mode: 'cors',
      cache: 'no-store' // Prevent caching to ensure fresh data
    };

    console.log(`üì§ Sending request to ${url}:`, {
      method: options.method,
      headers: finalOptions.headers,
      body: options.body ? JSON.parse(options.body as string) : undefined
    });

    try {
      const response = await fetch(url, finalOptions);
      console.log(`üì• Response from ${url}:`, {
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries())
      });
      return response;
    } catch (error) {
      console.error(`‚ùå Network error for ${url}:`, error);
      if (retries > 0) {
        console.log(`üîÑ Retrying request to ${url}... (${retries} attempts left)`);
        await new Promise(resolve => setTimeout(resolve, 1000));
        return this.fetchWithRetry(url, options, retries - 1);
      }
      throw error;
    }
  }

  async authenticate(credentials: { email: string; password: string }) {
    try {
      console.log('üîê Attempting authentication...');
      const url = `${this.baseUrl}/auth/login`;
      console.log('üåê Auth URL:', url);

      const response = await this.fetchWithRetry(url, {
        method: 'POST',
        body: JSON.stringify(credentials)
      });

      const data = await this.handleResponse(response, url);
      console.log('‚úÖ Authentication successful:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Authentication error:', error);
      throw error;
    }
  }

  async getAll(params?: Record<string, any>) {
    try {
      const queryString = params ? '?' + new URLSearchParams(params).toString() : '';
      const url = `${this.baseUrl}/${this.endpoint}${queryString}`;
      console.log(`üì§ Fetching all ${this.endpoint} from ${url}...`);
      const response = await this.fetchWithRetry(url, {
        method: 'GET'
      });
      return this.handleResponse(response, url);
    } catch (error) {
      console.error(`‚ùå Error fetching ${this.endpoint}:`, error);
      throw error;
    }
  }

  async getById(id: string) {
    try {
      const url = `${this.baseUrl}/${this.endpoint}/${id}`;
      console.log(`üì§ Fetching ${this.endpoint}/${id} from ${url}...`);
      const response = await this.fetchWithRetry(url, {
        method: 'GET'
      });
      return this.handleResponse(response, url);
    } catch (error) {
      console.error(`‚ùå Error fetching ${this.endpoint}/${id}:`, error);
      throw error;
    }
  }

  async create(data: any) {
    try {
      const url = `${this.baseUrl}/${this.endpoint}`;
      console.log(`üì§ Creating new ${this.endpoint} at ${url}:`, data);
      const response = await this.fetchWithRetry(url, {
        method: 'POST',
        body: JSON.stringify(data)
      });
      return this.handleResponse(response, url);
    } catch (error) {
      console.error(`‚ùå Error creating ${this.endpoint}:`, error);
      throw error;
    }
  }

  async update(id: string, data: any) {
    try {
      console.log(`üì§ Updating ${this.endpoint} ${id}:`, data);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–ª–∞—Ç–µ–∂ –∏ –º—ã –µ–≥–æ –∏–Ω–∫–∞—Å—Å–∏—Ä—É–µ–º, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      if (this.endpoint === 'payments' && data.status === 'incassated') {
        console.log('üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞:', { id, ...data });
      }
      
      const response = await this.fetchWithRetry(`${this.baseUrl}/${this.endpoint}/${id}`, {
        method: 'PUT',
        body: JSON.stringify(data)
      });

      return this.handleResponse(response, `${this.baseUrl}/${this.endpoint}/${id}`);
    } catch (error) {
      console.error(`‚ùå Error updating ${this.endpoint}:`, error);
      throw error;
    }
  }

  async pay(id: string, data: { amount: number }) {
    try {
      const url = `${this.baseUrl}/${this.endpoint}/${id}/pay`;
      console.log(`üí∞ Processing payment for ${this.endpoint} ${id}:`, data);
      const response = await this.fetchWithRetry(url, {
        method: 'PATCH',
        body: JSON.stringify(data)
      });
      return this.handleResponse(response, url);
    } catch (error) {
      console.error(`‚ùå Error processing payment for ${this.endpoint}:`, error);
      throw error;
    }
  }

  async delete(id: string) {
    try {
      const url = `${this.baseUrl}/${this.endpoint}/${id}`;
      console.log(`üì§ Deleting ${this.endpoint}/${id} at ${url}...`);

      // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–∏—Ö–æ–¥, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –≤ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
      const options: RequestInit = {
        method: 'DELETE'
      };

      if (this.endpoint === 'arrivals') {
        const purchases = localStorage.getItem('admin_purchases') || '[]';
        options.body = JSON.stringify({ purchases: JSON.parse(purchases) });
        options.headers = {
          'Content-Type': 'application/json'
        };
      }

      const response = await this.fetchWithRetry(url, options);
      return this.handleResponse(response, url);
    } catch (error) {
      console.error(`‚ùå Error deleting ${this.endpoint}/${id}:`, error);
      throw error;
    }
  }

  async clearAll() {
    try {
      const url = `${this.baseUrl}/${this.endpoint}/clear-all`;
      console.log(`üóëÔ∏è Clearing all ${this.endpoint} at ${url}...`);
      const response = await this.fetchWithRetry(url, {
        method: 'DELETE'
      });
      return this.handleResponse(response, url);
    } catch (error) {
      console.error(`‚ùå Error clearing all ${this.endpoint}:`, error);
      throw error;
    }
  }

  async incassateReceipts(data: { receiptIds: string[] }) {
    try {
      const url = `${this.baseUrl}/receipts/incassate`;
      console.log(`üì§ Incassating receipts at ${url}:`, data);
      const response = await this.fetchWithRetry(url, {
        method: 'PATCH',
        body: JSON.stringify(data)
      });
      return this.handleResponse(response, url);
    } catch (error) {
      console.error('‚ùå Error incassating receipts:', error);
      throw error;
    }
  }

  async patch(id: string, data: any) {
    console.log(`üì§ Patching ${this.endpoint}/${id} with data:`, data);
    const response = await fetch(`${this.baseUrl}/${this.endpoint}/${id}`, {
      method: 'PATCH',
      headers: {
        ...this.getAuthHeaders(),
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });

    console.log(`üì• Response from ${this.baseUrl}/${this.endpoint}/${id}:`, response);

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
    }

    const responseData = await response.json();
    console.log(`üì¶ Response data:`, responseData);
    return responseData;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã API –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
export const authApi = new BaseApi('auth');
export const suppliersApi = new BaseApi('suppliers');
export const productsApi = new BaseApi('products');
export const categoriesApi = new BaseApi('categories');
export const characteristicsApi = new BaseApi('characteristics');
export const ordersApi = new BaseApi('orders');
export const arrivalsApi = new BaseApi('arrivals');
export const debtsApi = new BaseApi('debts');
export const simpleDebtsApi = new BaseApi('simple-debts');
export const receiptsApi = new BaseApi('receipts');
export const paymentsApi = new BaseApi('payments');
export const clientsApi = new BaseApi('clients');
export const clientRecordsApi = new BaseApi('client-records');
export const sberRecipientsApi = new BaseApi('sber-recipients');

// –£–î–ê–õ–ï–ù–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ö–ê–°–°–ê–¶–ò–ò
// –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è –ù–ï –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏!
// –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞–ª–∏—á–Ω—ã—Ö –∏–∑ –∫–∞—Å—Å—ã
export const incassateReceipts = async (receiptIds: string[], incassationData?: {
  status: 'incassated';
  incassationDate: string;
  inCashRegister: boolean;
}) => {
  console.warn('‚ö†Ô∏è incassateReceipts: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏!');
  return { success: false, message: '–§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞' };
};

 