// –°–æ–∑–¥–∞–µ–º EventSource –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ —Ç–æ–≤–∞—Ä–∞—Ö
let productUpdateEventSource: EventSource | null = null;
let reconnectTimeout: NodeJS.Timeout | null = null;
let subscribers = 0; // –°—á–µ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

export const initializeProductEvents = () => {
  subscribers++;
  console.log(`üîå Initializing ProductEvents - subscribers: ${subscribers}`);
  
  // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
  if (productUpdateEventSource && productUpdateEventSource.readyState === EventSource.OPEN) {
    console.log('‚úÖ EventSource —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    return;
  }
  
  if (productUpdateEventSource) {
    console.log('üîÑ Closing existing EventSource connection');
    productUpdateEventSource.close();
  }

  if (reconnectTimeout) {
    clearTimeout(reconnectTimeout);
    reconnectTimeout = null;
  }

  // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö API URL
  const apiUrls = [
    import.meta.env.VITE_API_URL,
    'http://192.168.50.69:5002/api',
    'http://localhost:5002/api',
    'https://technoline-api.loca.lt/api'
  ].filter(Boolean);

  const token = localStorage.getItem('admin_token');
  
  console.log('üîç Checking token:', token ? 'Token found' : 'No token');
  console.log('üîç Token length:', token ? token.length : 0);
  console.log('üîç Available API URLs:', apiUrls);
  
  if (!token) {
    console.error('‚ùå No auth token found');
    return;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ EventSource —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º URL
  const tryConnectWithUrl = (apiUrl: string) => {
    try {
      const url = new URL(`${apiUrl}/events/products`);
      url.searchParams.append('token', token);
      
      const finalUrl = url.toString();
      console.log(`üîå Trying EventSource connection: ${finalUrl}`);
      
      const eventSource = new EventSource(finalUrl);

      eventSource.onopen = () => {
        console.log(`‚úÖ EventSource connection established with ${apiUrl}`);
        productUpdateEventSource = eventSource;
      };

      eventSource.onmessage = (event) => {
        console.log('üì® Received SSE event:', event.data);
        try {
          const data = JSON.parse(event.data);
          console.log('üì¶ Parsed SSE data:', data);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
          if (data.type === 'arrivalDeleted') {
            console.log('üóëÔ∏è *** IMPORTANT *** Received arrivalDeleted event:', data);
            console.log('üóëÔ∏è arrivalId from event:', data.arrivalId);
            console.log('üóëÔ∏è supplierName from event:', data.supplierName);
            window.dispatchEvent(new CustomEvent('arrivalDeleted', { detail: data }));
            console.log('üîî *** DISPATCHED *** arrivalDeleted event to window');
          } else {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (productAdded, productRemoved)
            console.log('üì¶ Product event type:', data.type);
            window.dispatchEvent(new CustomEvent('productUpdate', { detail: data }));
            console.log('üîî Dispatched productUpdate event to window');
          }
        } catch (error) {
          console.error('‚ùå Error parsing SSE data:', error);
        }
      };

      eventSource.onerror = (error) => {
        console.error(`‚ùå EventSource error with ${apiUrl}:`, error);
        console.log('üìä EventSource readyState:', eventSource?.readyState);
        
        if (eventSource.readyState === EventSource.CLOSED) {
          console.log(`üîÑ Connection closed for ${apiUrl}, trying next URL...`);
          // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π URL
          const currentIndex = apiUrls.indexOf(apiUrl);
          const nextIndex = currentIndex + 1;
          
          if (nextIndex < apiUrls.length) {
            setTimeout(() => tryConnectWithUrl(apiUrls[nextIndex]), 1000);
          } else {
            // –ï—Å–ª–∏ –≤—Å–µ URL –ø–æ–ø—Ä–æ–±–æ–≤–∞–Ω—ã, –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞
            if (!reconnectTimeout) {
              console.log('‚è≥ All URLs failed, attempting to reconnect in 5 seconds...');
              reconnectTimeout = setTimeout(() => {
                reconnectTimeout = null;
                initializeProductEvents();
              }, 5000);
            }
          }
        }
      };

      return eventSource;
    } catch (error) {
      console.error(`‚ùå Error initializing EventSource with ${apiUrl}:`, error);
      return null;
    }
  };

  // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ URL
  if (apiUrls.length > 0) {
    tryConnectWithUrl(apiUrls[0]);
  }
};

export const closeProductEvents = () => {
  subscribers--;
  console.log(`üëã Closing ProductEvents - remaining subscribers: ${subscribers}`);
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  if (subscribers <= 0) {
    if (productUpdateEventSource) {
      console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º EventSource - –Ω–µ—Ç –±–æ–ª—å—à–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤');
      productUpdateEventSource.close();
      productUpdateEventSource = null;
    }

    if (reconnectTimeout) {
      clearTimeout(reconnectTimeout);
      reconnectTimeout = null;
    }
    
    subscribers = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
  } else {
    console.log('üîå EventSource –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º - –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏');
  }
}; 