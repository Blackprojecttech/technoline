const fetch = require('node-fetch');
require('dotenv').config();

async function getCdekToken() {
  try {
    const response = await fetch('https://api.cdek.ru/v2/oauth/token?parameters', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: new URLSearchParams({
        grant_type: 'client_credentials',
        client_id: process.env.CDEK_CLIENT_ID || 'EMscd6r9JnFiQ3bLoyjJY6eM78JrJceI',
        client_secret: process.env.CDEK_CLIENT_SECRET || 'PjLZPKBgI86kgKNzZI0'
      })
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${response.status}`);
    }

    const data = await response.json();
    return data.access_token;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    return null;
  }
}

async function checkCdekPvz() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ü–í–ó –≤ CDEK API...');
    
    const token = await getCdekToken();
    if (!token) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω');
      return;
    }
    
    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ü–í–ó –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ
    console.log('\nüìã –¢–µ—Å—Ç 1: –ü–í–ó –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ');
    
    const spbResponse = await fetch('https://api.cdek.ru/v2/location/cities?city=–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (spbResponse.ok) {
      const spbCities = await spbResponse.json();
      console.log('üèôÔ∏è –ì–æ—Ä–æ–¥–∞ –°–ü–±:', spbCities);
      
      if (spbCities.length > 0) {
        const spbCityCode = spbCities[0].code;
        console.log('üèôÔ∏è –ö–æ–¥ –≥–æ—Ä–æ–¥–∞ –°–ü–±:', spbCityCode);
        
        const spbPvzResponse = await fetch(`https://api.cdek.ru/v2/deliverypoints?city_code=${spbCityCode}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (spbPvzResponse.ok) {
          const spbPvzList = await spbPvzResponse.json();
          console.log('üè™ –ü–í–ó –≤ –°–ü–±:', spbPvzList.length);
          
          // –ò—â–µ–º –ü–í–ó –≤ –°—Ç—Ä–µ–ª—å–Ω–µ
          const strelnaPvz = spbPvzList.filter(pvz => 
            pvz.address?.toLowerCase().includes('—Å—Ç—Ä–µ–ª—å–Ω–∞') ||
            pvz.address?.toLowerCase().includes('–ª—å–≤–æ–≤—Å–∫–∞—è')
          );
          
          console.log('üìç –ü–í–ó –≤ –°—Ç—Ä–µ–ª—å–Ω–µ:', strelnaPvz.length);
          strelnaPvz.forEach(pvz => {
            console.log(`  - ${pvz.name} (${pvz.code}): ${pvz.address}`);
          });
        }
      }
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ü–í–ó –≤ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–µ
    console.log('\nüìã –¢–µ—Å—Ç 2: –ü–í–ó –≤ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–µ');
    
    const arkhResponse = await fetch('https://api.cdek.ru/v2/location/cities?city=–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (arkhResponse.ok) {
      const arkhCities = await arkhResponse.json();
      console.log('üèôÔ∏è –ì–æ—Ä–æ–¥–∞ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫:', arkhCities);
      
      if (arkhCities.length > 0) {
        const arkhCityCode = arkhCities[0].code;
        console.log('üèôÔ∏è –ö–æ–¥ –≥–æ—Ä–æ–¥–∞ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫:', arkhCityCode);
        
        const arkhPvzResponse = await fetch(`https://api.cdek.ru/v2/deliverypoints?city_code=${arkhCityCode}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (arkhPvzResponse.ok) {
          const arkhPvzList = await arkhPvzResponse.json();
          console.log('üè™ –ü–í–ó –≤ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–µ:', arkhPvzList.length);
          
          // –ò—â–µ–º –ü–í–ó –Ω–∞ —É–ª. –¢–µ—Ä–µ—Ö–∏–Ω–∞
          const terekhinaPvz = arkhPvzList.filter(pvz => 
            pvz.address?.toLowerCase().includes('—Ç–µ—Ä–µ—Ö–∏–Ω–∞')
          );
          
          console.log('üìç –ü–í–ó –Ω–∞ —É–ª. –¢–µ—Ä–µ—Ö–∏–Ω–∞:', terekhinaPvz.length);
          terekhinaPvz.forEach(pvz => {
            console.log(`  - ${pvz.name} (${pvz.code}): ${pvz.address}`);
          });
        }
      }
    }
    
    console.log('\nüéØ –í—ã–≤–æ–¥—ã:');
    console.log('  - –ï—Å–ª–∏ –ü–í–ó –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–Ω–∞—á–∏—Ç –∞–¥—Ä–µ—Å–∞ –≤ –∑–∞–∫–∞–∑–∞—Ö –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∞–¥—Ä–µ—Å–∞–º–∏ –≤ CDEK');
    console.log('  - –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ü–í–ó –∏–∑ CDEK API');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

checkCdekPvz(); 