const mongoose = require('mongoose');

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userSchema = new mongoose.Schema({
  firstName: String,
  lastName: String,
  email: { type: String, unique: true },
  password: String,
  phone: String,
  address: String,
  role: { type: String, default: 'user' },
  isActive: { type: Boolean, default: true },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

const User = mongoose.model('User', userSchema);

// –°—Ö–µ–º–∞ –∑–∞–∫–∞–∑–∞
const orderSchema = new mongoose.Schema({
  orderNumber: String,
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  items: [{
    productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product' },
    quantity: Number,
    price: Number
  }],
  total: Number,
  status: { type: String, default: 'pending' },
  paymentMethod: String,
  deliveryMethod: { type: mongoose.Schema.Types.ObjectId, ref: 'DeliveryMethod' },
  deliveryDate: String,
  deliveryTime: String,
  deliveryAddress: String,
  notes: String,
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

const Order = mongoose.model('Order', orderSchema);

mongoose.connect('mongodb://localhost:27017/technoline')
  .then(async () => {
    try {
      console.log('üîç –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑...');
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin@test.com
      const user = await User.findOne({ email: 'admin@test.com' });
      if (!user) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin@test.com –Ω–µ –Ω–∞–π–¥–µ–Ω');
        process.exit(1);
      }
      
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email);
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
      const testOrder = new Order({
        orderNumber: 'TL-20250716-0001',
        userId: user._id,
        items: [
          {
            productId: new mongoose.Types.ObjectId(), // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
            quantity: 2,
            price: 1500
          }
        ],
        total: 3000,
        status: 'confirmed',
        paymentMethod: 'cash',
        deliveryAddress: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1, –∫–≤. 1',
        notes: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏'
      });
      
      const savedOrder = await testOrder.save();
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:');
      console.log(`   ID: ${savedOrder._id}`);
      console.log(`   –ù–æ–º–µ—Ä: ${savedOrder.orderNumber}`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${savedOrder.status}`);
      console.log(`   –°—É–º–º–∞: ${savedOrder.total} ‚ÇΩ`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
    process.exit();
  })
  .catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    process.exit(1);
  }); 