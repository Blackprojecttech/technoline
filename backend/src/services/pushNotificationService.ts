import webpush from 'web-push';
import PushSubscription from '../models/PushSubscription';
import mongoose from 'mongoose';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VAPID –∫–ª—é—á–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const VAPID_PUBLIC_KEY = process.env.VAPID_PUBLIC_KEY || 'BCQmdw7UtjDaFV260LXlR3JuVxtojy_L2J8epI5ouclHmUSN1KC85FyuJtIY34RqhmPmn-SQh27jhh1PwKlZ-T8';
const VAPID_PRIVATE_KEY = process.env.VAPID_PRIVATE_KEY || 'JpmFij053flGvVSi6CCv7peOHFq9th_QL79ZhBpGKwE';
const VAPID_SUBJECT = process.env.VAPID_SUBJECT || 'mailto:support@techno-line.store';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VAPID
webpush.setVapidDetails(
  VAPID_SUBJECT,
  VAPID_PUBLIC_KEY,
  VAPID_PRIVATE_KEY
);

export interface PushNotificationPayload {
  title: string;
  body: string;
  icon?: string;
  badge?: string;
  tag?: string;
  url?: string;
  data?: any;
}

class PushNotificationService {
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendToUser(userId: string | mongoose.Types.ObjectId, payload: PushNotificationPayload): Promise<boolean> {
    try {
      console.log('üì± –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', userId);
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const subscriptions = await PushSubscription.find({ 
        user: userId, 
        isActive: true 
      });

      if (subscriptions.length === 0) {
        console.log('üì≠ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö push-–ø–æ–¥–ø–∏—Å–æ–∫');
        return false;
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const notificationData = {
        title: payload.title,
        body: payload.body,
        icon: payload.icon || '/icon-192.png',
        badge: payload.badge || '/icon-192.png',
        tag: payload.tag || 'notification',
        url: payload.url || '/',
        data: payload.data || {},
        requireInteraction: true,
        actions: [
          {
            action: 'view',
            title: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
          }
        ]
      };

      let successCount = 0;
      const failedSubscriptions: string[] = [];

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (const subscription of subscriptions) {
        try {
          const pushSubscription = {
            endpoint: subscription.endpoint,
            keys: {
              p256dh: subscription.p256dh,
              auth: subscription.auth
            }
          };

          await webpush.sendNotification(
            pushSubscription,
            JSON.stringify(notificationData)
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          subscription.lastUsed = new Date();
          await subscription.save();
          
          successCount++;
          console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');

        } catch (error: any) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', error);
          
          // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ—ë
          if (error.statusCode === 410 || error.statusCode === 404) {
            console.log('üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É');
            subscription.isActive = false;
            await subscription.save();
          }
          
          failedSubscriptions.push(subscription.endpoint);
        }
      }

      console.log(`üì± Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount}/${subscriptions.length}`);
      return successCount > 0;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   */
  async sendWelcomeNotification(userId: string | mongoose.Types.ObjectId, userName: string): Promise<boolean> {
    return this.sendToUser(userId, {
      title: 'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Techno-line!',
      body: `–ü—Ä–∏–≤–µ—Ç, ${userName}! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ù–∞—á–∏–Ω–∞–π—Ç–µ –¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫–∏!`,
      tag: 'welcome',
      url: '/catalog'
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
   */
  async sendNewOrderNotification(userId: string | mongoose.Types.ObjectId, orderNumber: string, total: number): Promise<boolean> {
    return this.sendToUser(userId, {
      title: 'üõçÔ∏è –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!',
      body: `–í–∞—à –∑–∞–∫–∞–∑ #${orderNumber} –Ω–∞ —Å—É–º–º—É ${total.toLocaleString()} ‚ÇΩ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É`,
      tag: 'new_order',
      url: `/orders/${orderNumber}`,
      data: { orderNumber, total }
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
   */
  async sendOrderStatusNotification(
    userId: string | mongoose.Types.ObjectId, 
    orderNumber: string, 
    status: string,
    orderId: string
  ): Promise<boolean> {
    const statusMessages: Record<string, { title: string; body: string; emoji: string }> = {
      confirmed: {
        title: '‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        body: `–í–∞—à –∑–∞–∫–∞–∑ #${orderNumber} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É`,
        emoji: '‚úÖ'
      },
      processing: {
        title: 'üì¶ –ó–∞–∫–∞–∑ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è',
        body: `–í–∞—à –∑–∞–∫–∞–∑ #${orderNumber} —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ`,
        emoji: 'üì¶'
      },
      shipped: {
        title: 'üöö –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        body: `–í–∞—à –∑–∞–∫–∞–∑ #${orderNumber} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω`,
        emoji: 'üöö'
      },
      with_courier: {
        title: 'üèÉ‚Äç‚ôÇÔ∏è –ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏',
        body: `–ö—É—Ä—å–µ—Ä –≤—ã–µ—Ö–∞–ª —Å –≤–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º #${orderNumber}. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞!`,
        emoji: 'üèÉ‚Äç‚ôÇÔ∏è'
      },
      delivered: {
        title: 'üéâ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
        body: `–í–∞—à –∑–∞–∫–∞–∑ #${orderNumber} —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!`,
        emoji: 'üéâ'
      },
      cancelled: {
        title: '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
        body: `–í–∞—à –∑–∞–∫–∞–∑ #${orderNumber} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω`,
        emoji: '‚ùå'
      }
    };

    const statusInfo = statusMessages[status] || {
      title: 'üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω',
      body: `–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #${orderNumber} –æ–±–Ω–æ–≤–ª–µ–Ω`,
      emoji: 'üìã'
    };

    return this.sendToUser(userId, {
      title: statusInfo.title,
      body: statusInfo.body,
      tag: 'order_status',
      url: `/orders/${orderId}`,
      data: { orderNumber, status, orderId }
    });
  }

  /**
   * –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async sendTestNotification(userId: string | mongoose.Types.ObjectId): Promise<boolean> {
    return this.sendToUser(userId, {
      title: 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      body: '–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!',
      tag: 'test',
      url: '/profile'
    });
  }

}

export default new PushNotificationService(); 