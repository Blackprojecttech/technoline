import { Request, Response } from 'express';
import { Product, IProduct } from '../models/Product';
import { Category } from '../models/Category';
import mongoose from 'mongoose';
import Characteristic from '../models/Characteristic';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ SKU
const generateUniqueSku = async (): Promise<string> => {
  const timestamp = Date.now();
  const random = Math.floor(Math.random() * 1000);
  let sku = `SKU-${timestamp}-${random}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ SKU
  let attempts = 0;
  while (attempts < 10) {
    const existingProduct = await Product.findOne({ sku });
    if (!existingProduct) {
      return sku;
    }
    // –ï—Å–ª–∏ SKU –∑–∞–Ω—è—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    const newRandom = Math.floor(Math.random() * 1000);
    sku = `SKU-${timestamp}-${newRandom}`;
    attempts++;
  }
  
  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π SKU –∑–∞ 10 –ø–æ–ø—ã—Ç–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
  return `SKU-${timestamp}-${Math.floor(Math.random() * 10000)}`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –≤ –ø–æ–ª–Ω—ã–µ URL
const makeFullUrl = (req: Request, path: string) => {
  if (!path) return path;
  if (path.startsWith('http')) return path;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∫—Å–∏ (Nginx)
  const protocol = req.get('X-Forwarded-Proto') || req.protocol;
  const host = req.get('X-Forwarded-Host') || req.get('host');
  
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS
  const finalProtocol = process.env.NODE_ENV === 'production' ? 'https' : protocol;
  
  return `${finalProtocol}://${host}${path}`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ç–æ–≤–∞—Ä–µ
export const transformProductImages = (req: Request, product: any) => {
  if (product.mainImage) {
    product.mainImage = makeFullUrl(req, product.mainImage);
  }
  if (product.images && Array.isArray(product.images)) {
    product.images = product.images.map((img: string) => makeFullUrl(req, img));
  }
  return product;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ)
const getAllChildCategoryIds = async (categoryId: string): Promise<string[]> => {
  const childCategories = await Category.find({ parentId: categoryId });
  let allChildIds = childCategories.map((cat: any) => cat._id.toString());
  
  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—á–µ—Ä–Ω–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  for (const childCategory of childCategories) {
    const nestedChildIds = await getAllChildCategoryIds((childCategory as any)._id.toString());
    allChildIds = [...allChildIds, ...nestedChildIds];
  }
  
  return allChildIds;
};

// @desc    Get all products
// @route   GET /api/products
// @access  Public
export const getProducts = async (req: Request, res: Response): Promise<void> => {
  try {
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 12;
    const skip = (page - 1) * limit;
    
    const category = req.query.category as string;
    const search = req.query.search as string;
    const minPrice = req.query.minPrice ? parseFloat(req.query.minPrice as string) : undefined;
    const maxPrice = req.query.maxPrice ? parseFloat(req.query.maxPrice as string) : undefined;
    const sortBy = req.query.sortBy as string || 'createdAt';
    const sortOrder = req.query.sortOrder as string || 'desc';

    // Build filter
    const filter: any = { isDeleted: { $ne: true } };
    
    // –î–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ API - —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
    const isAdminRequest = req.query.admin === 'true';
    if (!isAdminRequest) {
      filter.isActive = true;
    }
    
    console.log(`üì¶ getProducts –≤—ã–∑–≤–∞–Ω —Å admin=${isAdminRequest}, —Ñ–∏–ª—å—Ç—Ä:`, filter);
    
    if (category) {
      if (category === 'none') {
        filter.$or = [
          { categoryId: { $exists: false } },
          { categoryId: null }
        ];
      } else {
        // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ slug
        const categoryDoc = await Category.findOne({ slug: category });
        if (categoryDoc) {
          filter.categoryId = categoryDoc._id;
        }
      }
    }
    
    if (search) {
      filter.$text = { $search: search };
    }
    
    if (minPrice !== undefined || maxPrice !== undefined) {
      filter.price = {};
      if (minPrice !== undefined) filter.price.$gte = minPrice;
      if (maxPrice !== undefined) filter.price.$lte = maxPrice;
    }

    // --- –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –§–ò–õ–¨–¢–†–´ –î–õ–Ø –§–†–û–ù–¢–ê ---
    if (req.query.stockQuantity === '0') {
      filter.stockQuantity = 0;
    }
    if (req.query.stockQuantity_gt === '0') {
      filter.stockQuantity = { $gt: 0 };
    }
    if (req.query.noImages === '1') {
      filter.$and = [
        { $or: [ 
          { mainImage: { $exists: false } }, 
          { mainImage: '' }, 
          { mainImage: null },
          { mainImage: 'placeholder.jpg' }
        ] },
        { $or: [ 
          { images: { $exists: false } }, 
          { images: { $size: 0 } },
          { images: [] }
        ] }
      ];
    }
    if (req.query.withImages === '1') {
      filter.$or = [
        { $and: [ 
          { mainImage: { $ne: null } }, 
          { mainImage: { $ne: '' } },
          { mainImage: { $ne: 'placeholder.jpg' } }
        ] },
        { images: { $exists: true, $not: { $size: 0 } } }
      ];
    }
    if (req.query.isActive === 'false') {
      filter.isActive = false;
    }
    if (req.query.isActive === 'true') {
      filter.isActive = true;
    }
    // --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ù–´–• –§–ò–õ–¨–¢–†–û–í ---

    // –û—Å–æ–±—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    if (req.query.isMainPage === '1') {
      filter.isMainPage = true;
    }
    if (req.query.isPromotion === '1') {
      filter.isPromotion = true;
    }
    if (req.query.isNewProduct === '1') {
      filter.isNewProduct = true;
    }
    if (req.query.isBestseller === '1') {
      filter.isBestseller = true;
    }
    if (req.query.isFromDatabase === '1') {
      filter.isFromDatabase = true;
    }

    // --- –§–ò–õ–¨–¢–† –î–£–ë–õ–ò–ö–ê–¢–û–í ---
    if (req.query.duplicates === '1') {
      // –ù–∞–π—Ç–∏ –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ (case-insensitive)
      const duplicateNamesAgg = await Product.aggregate([
        { $match: filter },
        { $group: { _id: { $toLower: "$name" }, count: { $sum: 1 } } },
        { $match: { count: { $gt: 1 } } },
        { $project: { _id: 1 } }
      ]);
      const duplicateNames = duplicateNamesAgg.map((d: any) => d._id);
      // –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
      filter.$expr = { $in: [ { $toLower: "$name" }, duplicateNames ] };
    }
    // --- –ö–û–ù–ï–¶ –§–ò–õ–¨–¢–†–ê –î–£–ë–õ–ò–ö–ê–¢–û–í ---

    // Build sort
    const sort: any = {};
    sort[sortBy] = sortOrder === 'desc' ? -1 : 1;

    const products = await Product.find(filter)
      .populate({
        path: 'categoryId',
        select: 'name slug parentId',
        populate: {
          path: 'parentId',
          select: 'name slug parentId',
          populate: {
            path: 'parentId',
            select: 'name slug'
          }
        }
      })
      .sort(sort)
      .skip(skip)
      .limit(limit);

    const total = await Product.countDocuments(filter);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const transformedProducts = products.map(product => transformProductImages(req, product.toObject()));

    console.log(`üì¶ getProducts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ${transformedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ ${total} –æ–±—â–∏—Ö`);
    
    res.json({
      products: transformedProducts,
      page,
      pages: Math.ceil(total / limit),
      total, // legacy
      totalCount: total, // –Ω–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
      hasNextPage: page * limit < total,
      hasPrevPage: page > 1
    });
    return;
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// @desc    Get single product
// @route   GET /api/products/:id
// @access  Public
export const getProduct = async (req: Request, res: Response): Promise<void> => {
  try {
    const product = await Product.findById(req.params.id)
      .populate('categoryId', 'name slug');

    if (product) {
      const transformedProduct = transformProductImages(req, product.toObject());
      res.json(transformedProduct);
    } else {
      res.status(404).json({ message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// @desc    Get product by slug
// @route   GET /api/products/slug/:slug
// @access  Public
export const getProductBySlug = async (req: Request, res: Response): Promise<void> => {
  try {
    const product = await Product.findOne({ slug: req.params.slug })
      .populate({
        path: 'categoryId',
        select: 'name slug parentId',
        populate: {
          path: 'parentId',
          select: 'name slug parentId',
          populate: {
            path: 'parentId',
            select: 'name slug parentId',
          }
        }
      });

    if (product) {
      const transformedProduct = transformProductImages(req, product.toObject());
      res.json(transformedProduct);
    } else {
      res.status(404).json({ message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// @desc    Create a product
// @route   POST /api/products
// @access  Private/Admin
export const createProduct = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('Creating product with data:', req.body);
    console.log('Uploaded files:', req.files);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (req.files && Array.isArray(req.files) && req.files.length > 0) {
      const imageUrls = req.files.map((file: Express.Multer.File) => `/uploads/${file.filename}`);
      req.body.images = imageUrls;
      req.body.mainImage = imageUrls[0]; // –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ
      console.log('Processed images:', imageUrls);
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON –ø–æ–ª—è –∏–∑ FormData
    if (req.body.serialNumbers && typeof req.body.serialNumbers === 'string') {
      try {
        req.body.serialNumbers = JSON.parse(req.body.serialNumbers);
      } catch (e) {
        console.error('Error parsing serialNumbers:', e);
      }
    }
    
    if (req.body.barcodes && typeof req.body.barcodes === 'string') {
      try {
        req.body.barcodes = JSON.parse(req.body.barcodes);
      } catch (e) {
        console.error('Error parsing barcodes:', e);
      }
    }
    
    if (req.body.characteristics && typeof req.body.characteristics === 'string') {
      try {
        req.body.characteristics = JSON.parse(req.body.characteristics);
      } catch (e) {
        console.error('Error parsing characteristics:', e);
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º mainImage - –∏–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –æ–±—ä–µ–∫—Ç–∞
    if (req.body.mainImage && typeof req.body.mainImage === 'object') {
      console.log('Processing mainImage object:', JSON.stringify(req.body.mainImage, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞
      if (req.body.mainImage.file && req.body.mainImage.file.response) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å file.response, –∏–∑–≤–ª–µ–∫–∞–µ–º URL
        const response = req.body.mainImage.file.response;
        if (typeof response === 'string') {
          try {
            const parsed = JSON.parse(response);
            req.body.mainImage = parsed.file?.url || parsed.url || response;
          } catch {
            req.body.mainImage = response;
          }
        } else {
          req.body.mainImage = response.file?.url || response.url || JSON.stringify(response);
        }
      } else if (req.body.mainImage.response) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å response, –∏–∑–≤–ª–µ–∫–∞–µ–º URL
        const response = req.body.mainImage.response;
        if (typeof response === 'string') {
          try {
            const parsed = JSON.parse(response);
            req.body.mainImage = parsed.file?.url || parsed.url || response;
          } catch {
            req.body.mainImage = response;
          }
        } else {
          req.body.mainImage = response.file?.url || response.url || JSON.stringify(response);
        }
      } else if (req.body.mainImage.file) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ file, –∏–∑–≤–ª–µ–∫–∞–µ–º URL
        const file = req.body.mainImage.file;
        if (file.response) {
          if (typeof file.response === 'string') {
            try {
              const parsed = JSON.parse(file.response);
              req.body.mainImage = parsed.file?.url || parsed.url || file.response;
            } catch {
              req.body.mainImage = file.response;
            }
          } else {
            req.body.mainImage = file.response.file?.url || file.response.url || JSON.stringify(file.response);
          }
        } else {
          req.body.mainImage = file.url || JSON.stringify(file);
        }
      } else {
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        req.body.mainImage = JSON.stringify(req.body.mainImage);
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º images - –∏–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤
    if (req.body.images && Array.isArray(req.body.images)) {
      req.body.images = req.body.images.map((image: any) => {
        if (typeof image === 'object') {
          if (image.file && image.file.response) {
            const response = image.file.response;
            if (typeof response === 'string') {
              try {
                const parsed = JSON.parse(response);
                return parsed.file?.url || parsed.url || response;
              } catch {
                return response;
              }
            } else {
              return response.file?.url || response.url || JSON.stringify(response);
            }
          } else if (image.response) {
            const response = image.response;
            if (typeof response === 'string') {
              try {
                const parsed = JSON.parse(response);
                return parsed.file?.url || parsed.url || response;
              } catch {
                return response;
              }
            } else {
              return response.file?.url || response.url || JSON.stringify(response);
            }
          } else if (image.file) {
            const file = image.file;
            if (file.response) {
              if (typeof file.response === 'string') {
                try {
                  const parsed = JSON.parse(file.response);
                  return parsed.file?.url || parsed.url || file.response;
                } catch {
                  return file.response;
                }
              } else {
                return file.response.file?.url || file.response.url || JSON.stringify(file.response);
              }
            } else {
              return file.url || JSON.stringify(file);
            }
          } else {
            return JSON.stringify(image);
          }
        }
        return image;
      });
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º characteristics - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ, –µ—Å–ª–∏ name, –Ω–æ –Ω–µ characteristicId
    if (Array.isArray(req.body.characteristics)) {
      for (let i = 0; i < req.body.characteristics.length; i++) {
        const char = req.body.characteristics[i];
        if (char && char.name && !char.characteristicId) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
          let found = await Characteristic.findOne({ name: char.name });
          if (!found) {
            found = await Characteristic.create({ name: char.name });
          }
          req.body.characteristics[i] = { characteristicId: found._id, value: char.value };
        }
      }
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!req.body.slug && req.body.name) {
      console.log('Generating slug in backend for:', req.body.name);
      req.body.slug = req.body.name
        .toLowerCase()
        .replace(/[–∞-—è—ë]/g, (char: string) => {
          const map: { [key: string]: string } = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
          };
          return map[char] || char;
        })
        .replace(/[^a-z0-9\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-+|-+$/g, '');
      console.log('Generated slug in backend:', req.body.slug);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (req.body.isActive === undefined) req.body.isActive = true;
    if (req.body.inStock === undefined) req.body.inStock = true;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SKU, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω
    if (!req.body.sku || req.body.sku.trim() === '') {
      req.body.sku = await generateUniqueSku();
      console.log('Generated SKU:', req.body.sku);
    }
    
    const product = new Product(req.body);
    const createdProduct = await product.save();
    
    const populatedProduct = await Product.findById(createdProduct._id)
      .populate('categoryId', 'name slug');
    
    if (!populatedProduct) {
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
      return;
    }
    
    const transformedProduct = transformProductImages(req, populatedProduct.toObject());
    res.status(201).json(transformedProduct);
  } catch (error) {
    console.error('Error creating product:', error);
    res.status(400).json({ 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};

// @desc    Update a product
// @route   PUT /api/products/:id
// @access  Private/Admin
export const updateProduct = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('Updating product with ID:', req.params.id);
    console.log('Request body:', req.body);
    console.log('CategoryId in request:', req.body.categoryId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å categoryId –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
    if (req.body.categoryId && !mongoose.Types.ObjectId.isValid(req.body.categoryId)) {
      console.error('Invalid categoryId format:', req.body.categoryId);
      res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (req.body.categoryId) {
      const categoryExists = await Category.findById(req.body.categoryId);
      if (!categoryExists) {
        console.error('Category not found:', req.body.categoryId);
        res.status(400).json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }
      console.log('Category found:', categoryExists.name);
    }
    
    const product = await Product.findById(req.params.id);

    if (product) {
      console.log('Current product category:', product.categoryId);
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!req.body.slug && req.body.name) {
        console.log('Generating slug in update for:', req.body.name);
        req.body.slug = req.body.name
          .toLowerCase()
          .replace(/[–∞-—è—ë]/g, (char: string) => {
            const map: { [key: string]: string } = {
              '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
              '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
              '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
              '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'ch', '—à': 'sh', '—â': 'sch',
              '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
            };
            return map[char] || char;
          })
          .replace(/[^a-z0-9\s-]/g, '')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
          .replace(/^-+|-+$/g, '');
        console.log('Generated slug in update:', req.body.slug);
      }
      
      // –ù–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–æ–ª–Ω—ã–µ URL - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SKU, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω
      if (!req.body.sku || req.body.sku.trim() === '') {
        req.body.sku = await generateUniqueSku();
        console.log('Generated SKU in update:', req.body.sku);
      }
      
      Object.assign(product, req.body);
      console.log('Product before save:', { categoryId: product.categoryId });
      
      const updatedProduct = await product.save();
      console.log('Product after save:', { categoryId: updatedProduct.categoryId });
      
      const populatedUpdatedProduct = await Product.findById(updatedProduct._id)
        .populate('categoryId', 'name slug');
      
      console.log('Populated product:', { categoryId: populatedUpdatedProduct?.categoryId });
      
      if (!populatedUpdatedProduct) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
        return;
      }
      
      const transformedUpdatedProduct = transformProductImages(req, populatedUpdatedProduct.toObject());
      res.json(transformedUpdatedProduct);
    } else {
      res.status(404).json({ message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
  } catch (error) {
    res.status(400).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
};

// @desc    Delete a product
// @route   DELETE /api/products/:id
// @access  Private/Admin
export const deleteProduct = async (req: Request, res: Response): Promise<void> => {
  try {
    const product = await Product.findById(req.params.id);

    if (product) {
      await product.deleteOne();
      res.json({ message: '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω' });
    } else {
      res.status(404).json({ message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// @desc    Get featured products
// @route   GET /api/products/featured
// @access  Public
export const getFeaturedProducts = async (req: Request, res: Response): Promise<void> => {
  try {
    const limit = parseInt(req.query.limit as string) || 8;
    
    const products = await Product.find({ 
      isActive: true, 
      isFeatured: true 
    })
      .populate('categoryId', 'name slug')
      .sort({ createdAt: -1 })
      .limit(limit);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const transformedProducts = products.map(product => transformProductImages(req, product.toObject()));

    res.json(transformedProducts);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// @desc    Get products by category
// @route   GET /api/products/category/:categorySlug
// @access  Public
export const getProductsByCategory = async (req: Request, res: Response): Promise<void> => {
  try {
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 10000;
    const skip = (page - 1) * limit;

    const category = await Category.findOne({ slug: req.params.categorySlug });
    
    if (!category) {
      res.status(404).json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const childCategoryIds = await getAllChildCategoryIds((category as any)._id.toString());
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Ç–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è + –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ)
    const categoryIds = [(category as any)._id, ...childCategoryIds.map(id => new mongoose.Types.ObjectId(id))];

    const products = await Product.find({ 
      categoryId: { $in: categoryIds },
      isActive: true 
    })
      .populate('categoryId', 'name slug')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit);

    const total = await Product.countDocuments({ 
      categoryId: { $in: categoryIds },
      isActive: true 
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const transformedProducts = products.map(product => transformProductImages(req, product.toObject()));

    res.json({
      products: transformedProducts,
      page,
      pages: Math.ceil(total / limit),
      total, // legacy
      totalCount: total, // –Ω–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
      hasNextPage: page * limit < total,
      hasPrevPage: page > 1
    });
  } catch (error) {
    console.error('Error in getProductsByCategory:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}; 