import express from 'express';
import { Supplier } from '../models/Supplier';
import { auth } from '../middleware/auth';
import { admin } from '../middleware/admin';

const router = express.Router();

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
router.get('/', auth, admin, async (req, res) => {
  try {
    const { status, search } = req.query;
    
    let query: any = {};
    if (status && status !== 'all') {
      query.status = status;
    }
    if (search) {
      query.$or = [
        { name: { $regex: search, $options: 'i' } },
        { contactPerson: { $regex: search, $options: 'i' } },
        { phone: { $regex: search, $options: 'i' } }
      ];
    }

    const suppliers = await Supplier.find(query).sort({ createdAt: -1 });
    res.json(suppliers);
  } catch (error) {
    console.error('Error fetching suppliers:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ ID
router.get('/:id', auth, admin, async (req, res) => {
  try {
    const supplier = await Supplier.findById(req.params.id);
    if (!supplier) {
      return res.status(404).json({ error: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    return res.json(supplier);
  } catch (error) {
    console.error('Error fetching supplier:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
router.post('/', auth, admin, async (req, res) => {
  try {
    console.log('üìù Creating supplier with data:', req.body);
    const supplier = new Supplier(req.body);
    console.log('üìù Supplier model created, saving...');
    await supplier.save();
    console.log('‚úÖ Supplier saved successfully:', supplier._id);
    return res.status(201).json(supplier);
  } catch (error) {
    console.error('‚ùå Error creating supplier:', error);
    console.error('‚ùå Error details:', (error as Error).message);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
router.put('/:id', auth, admin, async (req, res) => {
  try {
    const supplier = await Supplier.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );
    if (!supplier) {
      return res.status(404).json({ error: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    return res.json(supplier);
  } catch (error) {
    console.error('Error updating supplier:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
router.delete('/:id', auth, admin, async (req, res) => {
  try {
    const supplier = await Supplier.findByIdAndDelete(req.params.id);
    if (!supplier) {
      return res.status(404).json({ error: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    return res.json({ message: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('Error deleting supplier:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' });
  }
});

export default router; 