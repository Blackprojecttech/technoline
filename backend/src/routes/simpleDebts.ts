import express from 'express';
import { SimpleDebt } from '../models/SimpleDebt';
import { Payment } from '../models/Payment';
import { auth } from '../middleware/auth';
import { admin } from '../middleware/admin';

const router = express.Router();

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ –¥–æ–ª–≥–∏
router.get('/', auth, admin, async (req, res) => {
  try {
    const { status, search } = req.query;
    
    let query: any = {};
    if (status && status !== 'all') {
      query.status = status;
    }
    if (search) {
      query.$or = [
        { title: { $regex: search, $options: 'i' } },
        { notes: { $regex: search, $options: 'i' } }
      ];
    }

    const debts = await SimpleDebt.find(query).sort({ date: -1 });
    return res.json(debts);
  } catch (error) {
    console.error('Error fetching simple debts:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ª–≥–æ–≤' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Å—Ç–æ–π –¥–æ–ª–≥
router.post('/', auth, admin, async (req, res) => {
  try {
    const debtData = {
      ...req.body,
      createdBy: (req as any).user.id
    };
    
    const debt = new SimpleDebt(debtData);
    await debt.save();
    return res.status(201).json(debt);
  } catch (error) {
    console.error('Error creating simple debt:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–ª–≥–∞' });
  }
});

// –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞
router.patch('/:id/pay', auth, admin, async (req, res) => {
  try {
    const { amount } = req.body;
    
    if (!amount || typeof amount !== 'number' || amount <= 0) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞' });
    }

    const debt = await SimpleDebt.findOne({ id: req.params.id });
    
    if (!debt) {
      return res.status(404).json({ error: '–î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (amount > debt.remainingAmount) {
      return res.status(400).json({ 
        error: `–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ (${amount}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —Å—É–º–º—ã –¥–æ–ª–≥–∞ (${debt.remainingAmount})`
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—ã
    debt.paidAmount += amount;
    debt.remainingAmount -= amount;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if (debt.remainingAmount === 0) {
      debt.status = 'paid';
    } else if (debt.paidAmount > 0) {
      debt.status = 'partially_paid';
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await debt.save();

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –∏–∑ –Ω–∞–ª–∏—á–Ω—ã—Ö –∫–∞—Å—Å—ã
    try {
      const paymentId = `payment_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
      
      const cashExpense = new Payment({
        id: paymentId,
        type: '–Ω–∞–ª–∏—á–Ω—ã–µ',
        category: '–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞',
        amount: -Math.abs(amount),
        date: new Date(),
        description: `–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞: ${debt.title}`,
        paymentMethod: '–Ω–∞–ª–∏—á–Ω—ã–µ',
        apiType: 'expense',
        debtId: debt.id,
        notes: `–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞ –Ω–∞ —Å—É–º–º—É ${amount.toLocaleString('ru-RU')} ‚ÇΩ\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${debt.title}`,
        inCashRegister: 'yes',
        cashRegisterDate: new Date(),
        createdBy: (req as any).user.id
      });

      await cashExpense.save();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –∏–∑ –∫–∞—Å—Å—ã:', error);
    }

    return res.json(debt);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –¥–æ–ª–≥–∞:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –¥–æ–ª–≥–∞' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ –¥–æ–ª–≥–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) - –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–ï–†–ï–î /:id
router.delete('/clear-all', auth, admin, async (req, res) => {
  try {
    console.log('üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Å—Ç—ã—Ö –¥–æ–ª–≥–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', (req as any).user?.role);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
    if ((req as any).user?.role !== 'admin') {
      return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–≥–æ–≤ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const count = await SimpleDebt.countDocuments();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ç—ã—Ö –¥–æ–ª–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${count}`);

    if (count === 0) {
      return res.json({ message: '–ü—Ä–æ—Å—Ç—ã–µ –¥–æ–ª–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', deletedCount: 0 });
    }

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–æ–ª–≥–∏ —Å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–∞—Å—Å—É
    const debtsWithPayments = await SimpleDebt.find({ paidAmount: { $gt: 0 } });
    
    // –°–æ–∑–¥–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–∞
    if (debtsWithPayments.length > 0) {
      for (const debt of debtsWithPayments) {
        try {
          const refundPaymentId = `refund_simple_debt_clear_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
          
          const refundPayment = new Payment({
            id: refundPaymentId,
            type: '–Ω–∞–ª–∏—á–Ω—ã–µ',
            category: '–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É',
            amount: debt.paidAmount,
            date: new Date(),
            description: `–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–æ–ª–≥–∞ "${debt.title}"`,
            paymentMethod: '–Ω–∞–ª–∏—á–Ω—ã–µ',
            apiType: 'income',
            notes: `–í–æ–∑–≤—Ä–∞—Ç ${debt.paidAmount.toLocaleString('ru-RU')} ‚ÇΩ –≤ –∫–∞—Å—Å—É –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Å–µ—Ö –ø—Ä–æ—Å—Ç—ã—Ö –¥–æ–ª–≥–æ–≤`,
            inCashRegister: 'yes',
            cashRegisterDate: new Date(),
            createdBy: (req as any).user.id
          });

          await refundPayment.save();
          console.log(`üí∞ –°–æ–∑–¥–∞–Ω –≤–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É –Ω–∞ —Å—É–º–º—É: ${debt.paidAmount} ‚ÇΩ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–æ–ª–≥–∞ ${debt.id}`);
        } catch (error) {
          console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–æ–ª–≥–∞ ${debt.id}:`, error);
        }
      }
    }

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (—Ä–∞—Å—Ö–æ–¥—ã –ø–æ –ø—Ä–æ—Å—Ç—ã–º –¥–æ–ª–≥–∞–º)
    const deletedPayments = await Payment.deleteMany({ 
      $or: [
        { category: '–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞' },
        { paymentMethod: 'simple_debt' }
      ]
    });
    
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${deletedPayments.deletedCount}`);

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ –¥–æ–ª–≥–∏
    const result = await SimpleDebt.deleteMany({});
    
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ—Å—Ç—ã—Ö –¥–æ–ª–≥–æ–≤: ${result.deletedCount}, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –∫–∞—Å—Å—É: ${debtsWithPayments.reduce((sum, debt) => sum + debt.paidAmount, 0)} ‚ÇΩ`);
    
    return res.json({ 
      message: '–í—Å–µ –ø—Ä–æ—Å—Ç—ã–µ –¥–æ–ª–≥–∏ —É–¥–∞–ª–µ–Ω—ã',
      deletedCount: result.deletedCount,
      deletedPayments: deletedPayments.deletedCount,
      refundAmount: debtsWithPayments.reduce((sum, debt) => sum + debt.paidAmount, 0)
    });
  } catch (error) {
    console.error('Error clearing all simple debts:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ—Å—Ç—ã—Ö –¥–æ–ª–≥–æ–≤' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –¥–æ–ª–≥
router.delete('/:id', auth, admin, async (req, res) => {
  try {
    const debt = await SimpleDebt.findOne({ id: req.params.id });
    if (!debt) {
      return res.status(404).json({ error: '–î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    await Payment.deleteMany({ debtId: debt.id });

    // –ï—Å–ª–∏ –¥–æ–ª–≥ –±—ã–ª —á–∞—Å—Ç–∏—á–Ω–æ –æ–ø–ª–∞—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –≤ –∫–∞—Å—Å—É
    if (debt.paidAmount > 0) {
      try {
        const refundPaymentId = `refund_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
        
        const refundPayment = new Payment({
          id: refundPaymentId,
          type: 'income',
          category: '–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É',
          amount: debt.paidAmount,
          date: new Date(),
          description: `–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞: ${debt.title}`,
          paymentMethod: 'cash',
          notes: `–í–æ–∑–≤—Ä–∞—Ç ${debt.paidAmount.toLocaleString('ru-RU')} ‚ÇΩ –≤ –∫–∞—Å—Å—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞ "${debt.title}"`,
          createdBy: (req as any).user.id
        });

        await refundPayment.save();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–∞—Å—Å—É:', error);
      }
    }

    // –£–¥–∞–ª—è–µ–º —Å–∞–º –¥–æ–ª–≥
    await SimpleDebt.deleteOne({ id: debt.id });

    return res.json({ 
      message: '–î–æ–ª–≥ —É–¥–∞–ª–µ–Ω',
      refundAmount: debt.paidAmount > 0 ? debt.paidAmount : 0
    });
  } catch (error) {
    console.error('Error deleting simple debt:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞' });
  }
});

export default router; 