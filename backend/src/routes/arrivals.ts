import express from 'express';
import { Arrival, IArrival } from '../models/Arrival';
import { Debt } from '../models/Debt';
import { Payment } from '../models/Payment';
import { Receipt } from '../models/Receipt';
import { auth } from '../middleware/auth';
import { admin } from '../middleware/admin';
import { Types } from 'mongoose';
import { eventController } from '../controllers/eventController';

const router = express.Router();

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–∏—Ö–æ–¥—ã
router.get('/', auth, admin, async (req, res) => {
  try {
    const { supplierId, dateFrom, dateTo, search } = req.query;
    
    let query: any = {};
    if (supplierId) {
      query.supplierId = supplierId;
    }
    if (dateFrom && dateTo) {
      query.date = {
        $gte: new Date(dateFrom as string),
        $lte: new Date(dateTo as string)
      };
    }
    if (search) {
      query.$or = [
        { supplierName: { $regex: search, $options: 'i' } },
        { 'items.productName': { $regex: search, $options: 'i' } },
        { notes: { $regex: search, $options: 'i' } }
      ];
    }

    const arrivals = await Arrival.find(query).sort({ date: -1 });
    return res.json(arrivals);
  } catch (error) {
    console.error('Error fetching arrivals:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏—Ö–æ–¥–æ–≤' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏—Ö–æ–¥ –ø–æ ID
router.get('/:id', auth, admin, async (req, res) => {
  try {
    const arrival = await Arrival.findById(req.params.id);
    if (!arrival) {
      return res.status(404).json({ error: '–ü—Ä–∏—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    return res.json(arrival);
  } catch (error) {
    console.error('Error fetching arrival:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∏—Ö–æ–¥
router.post('/', auth, admin, async (req, res) => {
  try {
    const arrivalData = {
      ...req.body,
      createdBy: (req as any).user.id
    };
    
    const arrival = await (new Arrival(arrivalData)).save();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
    arrival.items.forEach(item => {
      if (item.serialNumbers && item.serialNumbers.length > 0) {
        // –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–µ—Ä–∏–π–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–¥–µ–ª—å–Ω–æ
        item.serialNumbers.forEach(serialNumber => {
          console.log(`üì§ Sending event for product with serial number: ${serialNumber}`);
          eventController.sendEvent({
            type: 'productAdded',
            product: {
              arrivalId: arrival._id,
              productName: item.productName,
              serialNumber,
              price: item.price,
              costPrice: item.costPrice,
              isAccessory: item.isAccessory,
              isService: item.isService,
              supplierId: arrival.supplierId,
              supplierName: arrival.supplierName,
              barcode: item.barcode,
              addedAt: new Date().toISOString() // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            }
          });
        });
      } else {
        // –î–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        console.log(`üì§ Sending event for accessory/service: ${item.productName}`);
        eventController.sendEvent({
          type: 'productAdded',
          product: {
            arrivalId: arrival._id,
            productName: item.productName,
            price: item.price,
            costPrice: item.costPrice,
            isAccessory: item.isAccessory,
            isService: item.isService,
            supplierId: arrival.supplierId,
            supplierName: arrival.supplierName,
            barcode: item.barcode,
            quantity: item.quantity,
            addedAt: new Date().toISOString() // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
          }
        });
      }
    });

    // –°–æ–∑–¥–∞–µ–º –¥–æ–ª–≥ –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞
    // –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ —Å –∑–∞–∫—É–ø–æ—á–Ω–æ–π —Ü–µ–Ω–æ–π > 0
    const totalAmount = (arrival.items || []).reduce((sum, item) => {
      // –î–ª—è —É—Å–ª—É–≥ —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞
      if (item.isService && (!item.costPrice || item.costPrice <= 0)) {
        return sum;
      }
      return sum + (item.costPrice * item.quantity);
    }, 0);
    
    const dueDate = new Date(arrival.date);
    dueDate.setDate(dueDate.getDate() + 4); // –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ 4 –¥–Ω—è

    // –°–æ–∑–¥–∞–µ–º –¥–æ–ª–≥ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫ –∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏ —Å –∑–∞–∫—É–ø–æ—á–Ω–æ–π —Ü–µ–Ω–æ–π
    if (arrival.supplierId && arrival.supplierName && totalAmount > 0) {
      const debt = new Debt({
        id: `debt_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,
        arrivalId: arrival._id instanceof Types.ObjectId ? arrival._id.toString() : arrival._id,
        supplierId: arrival.supplierId,
        supplierName: arrival.supplierName,
        amount: totalAmount,
        paidAmount: 0,
        remainingAmount: totalAmount,
        date: arrival.date,
        dueDate: dueDate,
        status: 'active',
        notes: `–î–æ–ª–≥ –ø–æ –ø—Ä–∏—Ö–æ–¥—É –æ—Ç ${new Date(arrival.date).toLocaleDateString('ru-RU')} (${arrival.items.filter(item => !item.isService || (item.costPrice && item.costPrice > 0)).map(item => item.productName).join(', ')})`,
        items: arrival.items.map(item => ({
          productId: item.productId,
          productName: item.productName,
          quantity: item.quantity,
          price: item.price,
          costPrice: item.costPrice,
          isAccessory: item.isAccessory,
          isService: item.isService,
          serialNumbers: item.serialNumbers || [],
          barcode: item.barcode
        })),
        createdBy: (req as any).user.id
      });

             await debt.save();
     }
    
    return res.status(201).json(arrival);
  } catch (error) {
    console.error('Error creating arrival:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏—Ö–æ–¥
router.put('/:id', auth, admin, async (req, res) => {
  try {
    const oldArrival = await Arrival.findById(req.params.id);
    if (!oldArrival) {
      return res.status(404).json({ error: '–ü—Ä–∏—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const arrivalId = oldArrival._id instanceof Types.ObjectId ? oldArrival._id.toString() : oldArrival._id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª—è—é—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    const newItems = req.body.items || [];
    const receiptsWithThisArrival = await Receipt.find({
      'items.arrivalId': arrivalId
    });

    if (receiptsWithThisArrival.length > 0) {
      // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
      const conflicts = [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –∏–∑ —á–µ–∫–æ–≤
      for (const receipt of receiptsWithThisArrival) {
        for (const receiptItem of receipt.items) {
          if (receiptItem.arrivalId === arrivalId) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞
            const stillExists = newItems.some((newItem: any) => {
              if (receiptItem.serialNumber) {
                // –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–µ—Ä–∏–π–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
                return newItem.productName === receiptItem.productName &&
                       newItem.serialNumbers && 
                       newItem.serialNumbers.includes(receiptItem.serialNumber);
              } else {
                // –î–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥
                return newItem.productName === receiptItem.productName &&
                       newItem.isAccessory === receiptItem.isAccessory &&
                       newItem.isService === receiptItem.isService &&
                       (newItem.quantity || 0) >= (receiptItem.quantity || 1);
              }
            });

            if (!stillExists) {
              const itemDescription = receiptItem.serialNumber 
                ? `"${receiptItem.productName}" (S/N: ${receiptItem.serialNumber})`
                : `"${receiptItem.productName}" (${receiptItem.quantity} —à—Ç.)`;
                
              conflicts.push(`‚Ä¢ ${itemDescription} ‚Üí —á–µ–∫ ${receipt.receiptNumber}`);
            }
          }
        }
      }
      
      if (conflicts.length > 0) {
        const errorMessage = `–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—Ö–æ–¥, —Ç–∞–∫ –∫–∞–∫ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –ø—Ä–æ–¥–∞–Ω—ã:\n\n${conflicts.join('\n')}\n\n–≠—Ç–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å, –ø–æ–∫–∞ –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —á–µ–∫–∏.`;
        
        return res.status(400).json({
          error: errorMessage
        });
      }
    }

    const arrival = await Arrival.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );
    if (!arrival) {
      return res.status(404).json({ error: '–ü—Ä–∏—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    oldArrival.items.forEach(item => {
      if (item.serialNumbers && item.serialNumbers.length > 0) {
        item.serialNumbers.forEach(serialNumber => {
          console.log(`üì§ Sending removal event for old product: ${serialNumber}`);
          eventController.sendEvent({
            type: 'productRemoved',
            product: {
              arrivalId: oldArrival._id,
              productName: item.productName,
              serialNumber,
              price: item.price,
              costPrice: item.costPrice,
              isAccessory: item.isAccessory,
              isService: item.isService,
              supplierId: oldArrival.supplierId,
              supplierName: oldArrival.supplierName,
              barcode: item.barcode,
              removedAt: new Date().toISOString()
            }
          });
        });
      } else {
        console.log(`üì§ Sending removal event for old accessory/service: ${item.productName}`);
        eventController.sendEvent({
          type: 'productRemoved',
          product: {
            arrivalId: oldArrival._id,
            productName: item.productName,
            price: item.price,
            costPrice: item.costPrice,
            isAccessory: item.isAccessory,
            isService: item.isService,
            supplierId: oldArrival.supplierId,
            supplierName: oldArrival.supplierName,
            barcode: item.barcode,
            quantity: item.quantity,
            removedAt: new Date().toISOString()
          }
        });
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
    arrival.items.forEach(item => {
      if (item.serialNumbers && item.serialNumbers.length > 0) {
        item.serialNumbers.forEach(serialNumber => {
          console.log(`üì§ Sending addition event for updated product: ${serialNumber}`);
          eventController.sendEvent({
            type: 'productAdded',
            product: {
              arrivalId: arrival._id,
              productName: item.productName,
              serialNumber,
              price: item.price,
              costPrice: item.costPrice,
              isAccessory: item.isAccessory,
              isService: item.isService,
              supplierId: arrival.supplierId,
              supplierName: arrival.supplierName,
              barcode: item.barcode,
              addedAt: new Date().toISOString()
            }
          });
        });
      } else {
        console.log(`üì§ Sending addition event for updated accessory/service: ${item.productName}`);
        eventController.sendEvent({
          type: 'productAdded',
          product: {
            arrivalId: arrival._id,
            productName: item.productName,
            price: item.price,
            costPrice: item.costPrice,
            isAccessory: item.isAccessory,
            isService: item.isService,
            supplierId: arrival.supplierId,
            supplierName: arrival.supplierName,
            barcode: item.barcode,
            quantity: item.quantity,
            addedAt: new Date().toISOString()
          }
        });
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –¥–æ–ª–≥
    const existingDebt = await Debt.findOne({ arrivalId });
    
    if (existingDebt) {
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –¥–æ–ª–≥–∞
      const totalAmount = (arrival.items || []).reduce((sum, item) => sum + (item.costPrice * item.quantity), 0);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ª–≥, —Å–æ—Ö—Ä–∞–Ω—è—è paidAmount
      const newRemainingAmount = totalAmount - existingDebt.paidAmount;
      
      await Debt.findByIdAndUpdate(existingDebt._id, {
        amount: totalAmount,
        remainingAmount: Math.max(0, newRemainingAmount),
        notes: `–î–æ–ª–≥ –ø–æ –ø—Ä–∏—Ö–æ–¥—É –æ—Ç ${new Date(arrival.date).toLocaleDateString('ru-RU')} (${arrival.items.map(item => item.productName).join(', ')})`,
        items: arrival.items.map(item => ({
          productId: item.productId,
          productName: item.productName,
          quantity: item.quantity,
          price: item.price,
          costPrice: item.costPrice,
          isAccessory: item.isAccessory,
          isService: item.isService,
          serialNumbers: item.serialNumbers || [],
          barcode: item.barcode
        }))
      });
      
      console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω –¥–æ–ª–≥ –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞ ${arrivalId}: ${totalAmount} ‚ÇΩ`);
    }

    return res.json(arrival);
  } catch (error) {
    console.error('Error updating arrival:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞' });
  }
});

// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∏—Ö–æ–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤) - –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–ï–†–ï–î /:id
router.delete('/clear-all', auth, admin, async (req, res) => {
  try {
    console.log('üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏—Ö–æ–¥–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', (req as any).user);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    const userRole = (req as any).user.role;
    if (userRole !== 'admin' && userRole !== 'accountant') {
      return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä –º–æ–∂–µ—Ç –æ—á–∏—â–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—Ö–æ–¥–æ–≤ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const arrivalsCount = await Arrival.countDocuments();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤
    const debtsCount = await Debt.countDocuments();
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–∏—Ö–æ–¥—ã
    const arrivalsResult = await Arrival.deleteMany({});
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–ª–≥–∏
    const debtsResult = await Debt.deleteMany({});
    
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${arrivalsResult.deletedCount} –ø—Ä–∏—Ö–æ–¥–æ–≤ –∏–∑ ${arrivalsCount}`);
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${debtsResult.deletedCount} –¥–æ–ª–≥–æ–≤ –∏–∑ ${debtsCount}`);
    
    return res.json({ 
      message: '–í—Å–µ –ø—Ä–∏—Ö–æ–¥—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–ª–≥–∏ —É–¥–∞–ª–µ–Ω—ã',
      deletedCount: arrivalsResult.deletedCount,
      totalCount: arrivalsCount,
      deletedDebts: debtsResult.deletedCount,
      totalDebts: debtsCount
    });
  } catch (error) {
    console.error('Error clearing all arrivals:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø—Ä–∏—Ö–æ–¥–æ–≤' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏—Ö–æ–¥
router.delete('/:id', auth, admin, async (req, res) => {
  try {
    const arrival = await Arrival.findById(req.params.id) as IArrival | null;
    if (!arrival) {
      return res.status(404).json({ error: '–ü—Ä–∏—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –ø—Ä–∏—Ö–æ–¥–∞ –≤ —Å—Ç—Ä–æ–∫—É
    const deleteArrivalId: string = arrival._id.toString();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–µ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–∑ —ç—Ç–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞
    const receiptsWithThisArrival = await Receipt.find({
      'items.arrivalId': deleteArrivalId,
      // –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —á–µ–∫–∏
      status: { $nin: ['cancelled', 'deleted'] }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∫—É–ø–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –ø—Ä–∏—Ö–æ–¥–æ–º
    const purchases = (req.body?.purchases || []) as Array<{ arrivalId?: string; productName: string }>;
    const purchaseWithThisArrival = purchases.find(p => p.arrivalId === deleteArrivalId);
    
    if (purchaseWithThisArrival) {
      return res.status(400).json({
        error: `–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏—Ö–æ–¥, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å–≤—è–∑–∞–Ω —Å –ø–æ–∫—É–ø–∫–æ–π "${purchaseWithThisArrival.productName}". –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–†–∞—Å—á–µ—Ç—ã" -> "–ü–æ–∫—É–ø–∫–∏".`
      });
    }

    if (receiptsWithThisArrival.length > 0) {
      // –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ —á–µ–∫–∞—Ö
      const conflictDetails = [];
      
      for (const receipt of receiptsWithThisArrival) {
        const itemsFromThisArrival = receipt.items.filter(item => item.arrivalId === deleteArrivalId);
        
        for (const item of itemsFromThisArrival) {
          const itemDescription = item.serialNumber 
            ? `"${item.productName}" (S/N: ${item.serialNumber})`
            : `"${item.productName}" (${item.quantity} —à—Ç.)`;
            
          conflictDetails.push(`‚Ä¢ ${itemDescription} ‚Üí —á–µ–∫ ${receipt.receiptNumber}`);
        }
      }
      
      const errorMessage = `–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏—Ö–æ–¥, —Ç–∞–∫ –∫–∞–∫ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–∫–∞—Ö:\n\n${conflictDetails.join('\n')}\n\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏—Ö–æ–¥, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–µ–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞.`;
      
      return res.status(400).json({ 
        error: errorMessage
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    arrival.items.forEach(item => {
      if (item.serialNumbers && item.serialNumbers.length > 0) {
        // –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–µ—Ä–∏–π–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–¥–µ–ª—å–Ω–æ
        item.serialNumbers.forEach(serialNumber => {
          console.log(`üì§ Sending removal event for product with serial number: ${serialNumber}`);
          eventController.sendEvent({
            type: 'productRemoved',
            product: {
              arrivalId: arrival._id,
              productName: item.productName,
              serialNumber,
              price: item.price,
              costPrice: item.costPrice,
              isAccessory: item.isAccessory,
              isService: item.isService,
              supplierId: arrival.supplierId,
              supplierName: arrival.supplierName,
              barcode: item.barcode,
              removedAt: new Date().toISOString()
            }
          });
        });
      } else {
        // –î–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        console.log(`üì§ Sending removal event for accessory/service: ${item.productName}`);
        eventController.sendEvent({
          type: 'productRemoved',
          product: {
            arrivalId: arrival._id,
            productName: item.productName,
            price: item.price,
            costPrice: item.costPrice,
            isAccessory: item.isAccessory,
            isService: item.isService,
            supplierId: arrival.supplierId,
            supplierName: arrival.supplierName,
            barcode: item.barcode,
            quantity: item.quantity,
            removedAt: new Date().toISOString()
          }
        });
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –¥–æ–ª–≥ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const debt = await Debt.findOne({ arrivalId: deleteArrivalId });
    let needsCashRefund = false;
    let refundAmount = 0;
    
    if (debt && debt.paidAmount > 0) {
      needsCashRefund = true;
      refundAmount = debt.paidAmount;
      console.log(`üí∞ –ù–∞–π–¥–µ–Ω –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ–ª–≥ –Ω–∞ —Å—É–º–º—É ${refundAmount} ‚ÇΩ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É`);
    }

    // –£–¥–∞–ª—è–µ–º –ø—Ä–∏—Ö–æ–¥
    await Arrival.findByIdAndDelete(req.params.id);

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ —ç—Ç–æ–º—É –¥–æ–ª–≥—É (—Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –æ–ø–ª–∞—Ç—É –¥–æ–ª–≥–∞)
    const deletedPayments = await Payment.deleteMany({ 
      $or: [
        { debtId: debt?._id?.toString() },
        { arrivalId: deleteArrivalId }
      ]
    });
    
    if (deletedPayments.deletedCount > 0) {
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deletedPayments.deletedCount} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞ ${deleteArrivalId}`);
    }

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –¥–æ–ª–≥
    if (debt) {
      await Debt.deleteOne({ _id: debt._id });
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –¥–æ–ª–≥ ${debt._id} –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞ ${deleteArrivalId}`);
    }

    // –ï—Å–ª–∏ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ–ª–≥, —Å–æ–∑–¥–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Å—Å—ã
    if (needsCashRefund && refundAmount > 0) {
      try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        const refundPaymentId = `arrival_refund_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
        
        const refundPayment = new Payment({
          id: refundPaymentId,
          type: '–Ω–∞–ª–∏—á–Ω—ã–µ', // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ enum —Å—Ö–µ–º—ã
          apiType: 'income', // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
          category: '–í–æ–∑–≤—Ä–∞—Ç –∑–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø—Ä–∏—Ö–æ–¥',
          amount: refundAmount,
          date: new Date(),
          description: `–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Å—Å—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞ –æ—Ç ${new Date(arrival.date).toLocaleDateString('ru-RU')} (${arrival.supplierName || '–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω'})`,
          paymentMethod: '–Ω–∞–ª–∏—á–Ω—ã–µ', // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          inCashRegister: true, // ‚úÖ –í–æ–∑–≤—Ä–∞—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∫–∞—Å—Å—É
          cashRegisterDate: new Date(), // ‚úÖ –î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞—Å—Å—É
          supplierId: arrival.supplierId,
          supplierName: arrival.supplierName,
          arrivalId: deleteArrivalId,
          notes: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç ${refundAmount.toLocaleString('ru-RU')} ‚ÇΩ –≤ –∫–∞—Å—Å—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞`,
          createdBy: (req as any).user?.id
        });
        
        await refundPayment.save();
        console.log(`üí∞ –°–æ–∑–¥–∞–Ω –≤–æ–∑–≤—Ä–∞—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É ${refundAmount} ‚ÇΩ:`, {
          paymentId: refundPayment._id,
          amount: refundAmount,
          supplier: arrival.supplierName,
          arrivalId: deleteArrivalId
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
        eventController.sendEvent({
          type: 'arrivalDeleted',
          arrivalId: deleteArrivalId,
          supplierName: arrival.supplierName,
          deletedAt: new Date().toISOString()
        });

        return res.json({ 
          message: '–ü—Ä–∏—Ö–æ–¥ —É–¥–∞–ª–µ–Ω', 
          refund: {
            amount: refundAmount,
            description: `–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –∫–∞—Å—Å—É ${refundAmount.toLocaleString('ru-RU')} ‚ÇΩ`
          }
        });
      } catch (refundError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', refundError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏—Ö–æ–¥ –∏ –¥–æ–ª–≥ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
        eventController.sendEvent({
          type: 'arrivalDeleted',
          arrivalId: deleteArrivalId,
          supplierName: arrival.supplierName,
          deletedAt: new Date().toISOString()
        });

        return res.json({ 
          message: '–ü—Ä–∏—Ö–æ–¥ —É–¥–∞–ª–µ–Ω', 
          warning: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –∫–∞—Å—Å—É'
        });
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
    eventController.sendEvent({
      type: 'arrivalDeleted',
      arrivalId: deleteArrivalId,
      supplierName: arrival.supplierName,
      deletedAt: new Date().toISOString()
    });

    return res.json({ message: '–ü—Ä–∏—Ö–æ–¥ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('Error deleting arrival:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —á–µ–∫–∞
router.get('/available-products', auth, admin, async (req, res) => {
  try {
    const { search } = req.query;
    const searchTerm = (search as string || '').toLowerCase();
    console.log('üîç Searching for products with term:', searchTerm);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏—Ö–æ–¥—ã
    const arrivals = await Arrival.find({}).sort({ date: -1 });
    console.log(`üì¶ Found ${arrivals.length} arrivals`);
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    const availableProducts = [];
    
    for (const arrival of arrivals) {
      console.log(`üîÑ Processing arrival ${arrival._id}`);
      for (const item of arrival.items) {
        if (item.serialNumbers && item.serialNumbers.length > 0) {
          // –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–µ—Ä–∏–π–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
          console.log(`üì± Processing item with serial numbers: ${item.productName}`);
          for (const serialNumber of item.serialNumbers) {
            if (
              !searchTerm || 
              serialNumber.toLowerCase() === searchTerm ||
              item.productName.toLowerCase().includes(searchTerm) ||
              (item.barcode && item.barcode.toLowerCase().includes(searchTerm))
            ) {
              console.log(`‚úÖ Adding product with serial number: ${serialNumber}`);
              availableProducts.push({
                arrivalId: arrival._id,
                productName: item.productName,
                serialNumber,
                price: item.price,
                costPrice: item.costPrice,
                isAccessory: item.isAccessory,
                isService: item.isService,
                supplierId: arrival.supplierId,
                supplierName: arrival.supplierName,
                barcode: item.barcode
              });
            }
          }
        } else {
          // –î–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥
          console.log(`üéÅ Processing accessory/service: ${item.productName}`);
          if (
            !searchTerm || 
            item.productName.toLowerCase().includes(searchTerm) ||
            (item.barcode && item.barcode.toLowerCase().includes(searchTerm))
          ) {
            console.log(`‚úÖ Adding accessory/service: ${item.productName}`);
            availableProducts.push({
              arrivalId: arrival._id,
              productName: item.productName,
              price: item.price,
              costPrice: item.costPrice,
              isAccessory: item.isAccessory,
              isService: item.isService,
              supplierId: arrival.supplierId,
              supplierName: arrival.supplierName,
              barcode: item.barcode,
              quantity: item.quantity
            });
          }
        }
      }
    }

    console.log(`üìä Total available products found: ${availableProducts.length}`);
    return res.json(availableProducts);
  } catch (error) {
    console.error('‚ùå Error fetching available products:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤' });
  }
});

export default router; 