import mongoose from 'mongoose';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/technoline-store';

interface DebtItem {
  productId: string;
  productName: string;
  quantity: number;
  price: number;
  costPrice: number;
  isAccessory: boolean;
  isService?: boolean;
  serialNumbers?: string[];
  barcode?: string;
}

interface ArrivalItem extends DebtItem {
  id?: string;
}

async function updateDebtItems() {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connect(MONGODB_URI);
    console.log('üì¶ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ MongoDB');

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const arrivalsCollection = mongoose.connection.collection('arrivals');
    const debtsCollection = mongoose.connection.collection('debts');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–ª–≥–∏
    const debts = await debtsCollection.find({}).toArray();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${debts.length} –¥–æ–ª–≥–æ–≤`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–æ–ª–≥
    let updated = 0;
    for (const debt of debts) {
      try {
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–∏—Ö–æ–¥
        const arrival = await arrivalsCollection.findOne({ 
          $or: [
            { _id: new mongoose.Types.ObjectId(debt.arrivalId) },
            { id: debt.arrivalId }
          ]
        });

        if (!arrival) {
          console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏—Ö–æ–¥ –¥–ª—è –¥–æ–ª–≥–∞ ${debt._id}`);
          continue;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º items –≤ –¥–æ–ª–≥–µ, –¥–æ–±–∞–≤–ª—è—è serialNumbers –∏ barcode
        const updatedItems = debt.items.map((debtItem: DebtItem) => {
          // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π item –≤ –ø—Ä–∏—Ö–æ–¥–µ
          const arrivalItem = arrival.items.find((item: ArrivalItem) => 
            item.productId === debtItem.productId && 
            item.productName === debtItem.productName
          );

          if (!arrivalItem) {
            console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä ${debtItem.productName} –≤ –ø—Ä–∏—Ö–æ–¥–µ ${arrival._id}`);
            return debtItem;
          }

          return {
            ...debtItem,
            serialNumbers: arrivalItem.serialNumbers || [],
            barcode: arrivalItem.barcode
          };
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ª–≥
        await debtsCollection.updateOne(
          { _id: debt._id },
          { $set: { items: updatedItems } }
        );
        
        updated++;
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –¥–æ–ª–≥ ${debt._id}`);
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞ ${debt._id}:`, err);
      }
    }

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} –∏–∑ ${debts.length} –¥–æ–ª–≥–æ–≤`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üëã –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç MongoDB');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
updateDebtItems().catch(console.error); 