import mongoose from 'mongoose';
import { Debt } from '../src/models/Debt';
import { Arrival } from '../src/models/Arrival';
import dotenv from 'dotenv';

dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/technoline';

async function cleanDuplicateDebts() {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–ª–≥–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ arrivalId
    const debts = await Debt.find().lean();
    const debtsByArrival = new Map<string, any[]>();

    debts.forEach(debt => {
      if (!debt.arrivalId) return;
      
      if (!debtsByArrival.has(debt.arrivalId)) {
        debtsByArrival.set(debt.arrivalId, []);
      }
      debtsByArrival.get(debt.arrivalId)!.push(debt);
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${debts.length} –¥–æ–ª–≥–æ–≤`);
    console.log(`üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∏—Ö–æ–¥–æ–≤: ${debtsByArrival.size}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–∏—Ö–æ–¥
    let duplicatesCount = 0;
    let deletedCount = 0;
    let orphanedCount = 0;

    for (const [arrivalId, arrivalDebts] of debtsByArrival) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∞
      const arrival = await Arrival.findById(arrivalId).lean();
      
      if (!arrival) {
        console.log(`‚ùå –ü—Ä–∏—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–æ–ª–≥–æ–≤: ${arrivalId}`);
        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º ${arrivalDebts.length} –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –¥–æ–ª–≥–æ–≤`);
        await Debt.deleteMany({ arrivalId });
        orphanedCount += arrivalDebts.length;
        continue;
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
      if (arrivalDebts.length > 1) {
        duplicatesCount++;
        console.log(`\nüîç –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞ ${arrivalId}:`);
        console.log(`üì¶ –ü—Ä–∏—Ö–æ–¥ –æ—Ç: ${new Date(arrival.date).toLocaleDateString()}`);
        console.log(`üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–≥–æ–≤: ${arrivalDebts.length}`);

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ª–≥–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
        const sortedDebts = arrivalDebts.sort((a, b) => 
          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
        );

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π –¥–æ–ª–≥
        const latestDebt = sortedDebts[0];
        const debtsToDelete = sortedDebts.slice(1);

        console.log(`‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º –¥–æ–ª–≥: ${latestDebt._id}`);
        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –¥–æ–ª–≥–∏:`, debtsToDelete.map(d => d._id).join(', '));

        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        for (const debt of debtsToDelete) {
          await Debt.deleteOne({ _id: debt._id });
          deletedCount++;
        }
      }
    }

    console.log('\nüìä –ò—Ç–æ–≥–∏ –æ—á–∏—Å—Ç–∫–∏:');
    console.log(`üîç –í—Å–µ–≥–æ –¥–æ–ª–≥–æ–≤: ${debts.length}`);
    console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏—Ö–æ–¥–æ–≤ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: ${duplicatesCount}`);
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–æ–ª–≥–æ–≤: ${deletedCount}`);
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –¥–æ–ª–≥–æ–≤: ${orphanedCount}`);
    console.log(`‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ–ª–≥–æ–≤: ${debts.length - deletedCount - orphanedCount}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üëã –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
cleanDuplicateDebts(); 