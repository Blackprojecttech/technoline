import mongoose from 'mongoose';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/technoline-store';

const generateUniqueDebtId = () => `debt_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;

async function fixDebtIds() {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connect(MONGODB_URI);
    console.log('üì¶ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ MongoDB');

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–æ–ª–≥–æ–≤
    const debtsCollection = mongoose.connection.collection('debts');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–ª–≥–∏
    const debts = await debtsCollection.find({}).toArray();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${debts.length} –¥–æ–ª–≥–æ–≤`);

    // –û–±–Ω–æ–≤–ª—è–µ–º ID –∫–∞–∂–¥–æ–≥–æ –¥–æ–ª–≥–∞
    let updated = 0;
    for (const debt of debts) {
      const newId = generateUniqueDebtId();
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ª–≥ ${debt.id || debt._id} -> ${newId}`);
      
      try {
        await debtsCollection.updateOne(
          { _id: debt._id },
          { 
            $set: { 
              id: newId,
              // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
              arrivalId: debt.arrivalId || `arrival_${Date.now()}`,
              status: debt.status || 'active',
              items: debt.items || []
            } 
          }
        );
        updated++;
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞ ${debt._id}:`, err);
      }
    }

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} –∏–∑ ${debts.length} –¥–æ–ª–≥–æ–≤`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üëã –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç MongoDB');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixDebtIds().catch(console.error); 