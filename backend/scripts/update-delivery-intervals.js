const mongoose = require('mongoose');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect('mongodb://localhost:27017/technoline-store', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// –°—Ö–µ–º–∞ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
const deliveryMethodSchema = new mongoose.Schema({
  name: String,
  customInterval1: String,
  customInterval2: String,
  // –¥—Ä—É–≥–∏–µ –ø–æ–ª—è...
});

const DeliveryMethod = mongoose.model('DeliveryMethod', deliveryMethodSchema);

async function updateDeliveryMethods() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç–∞–≤–∫–∏, —É–±–∏—Ä–∞—è –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    const result = await DeliveryMethod.updateMany(
      {}, // –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
      {
        $set: {
          customInterval1: null,
          customInterval2: null
        }
      }
    );
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${result.modifiedCount} –º–µ—Ç–æ–¥–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const methods = await DeliveryMethod.find({});
    console.log('üìã –¢–µ–∫—É—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç–∞–≤–∫–∏:');
    methods.forEach(method => {
      console.log(`- ${method.name}: customInterval1=${method.customInterval1}, customInterval2=${method.customInterval2}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    mongoose.connection.close();
  }
}

updateDeliveryMethods(); 