const mongoose = require('mongoose');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect('mongodb://localhost:27017/technoline-store', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// –°—Ö–µ–º–∞ —Ç–æ–≤–∞—Ä–∞
const productSchema = new mongoose.Schema({
  name: String,
  slug: String,
  description: String,
  price: Number,
  costPrice: Number,
  currency: String,
  sku: String,
  categoryId: {
    _id: String,
    name: String,
    slug: String
  },
  images: [String],
  mainImage: String,
  isActive: Boolean,
  isFeatured: Boolean,
  inStock: Boolean,
  isAvailable: Boolean,
  stockQuantity: Number,
  tags: [String],
  specifications: [Object],
  createdAt: Date,
  updatedAt: Date
});

const Product = mongoose.model('Product', productSchema);

async function fixImageUrlsForBoth() {
  try {
    console.log('üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ localtunnel —Ä–∞–±–æ—Ç—ã...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const products = await Product.find({});
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    
    for (const product of products) {
      let updated = false;
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º mainImage - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ localhost –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      if (product.mainImage && product.mainImage.includes('technoline-api.loca.lt')) {
        product.mainImage = product.mainImage.replace('https://technoline-api.loca.lt', 'http://localhost:5002');
        updated = true;
      }
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º images - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ localhost –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      if (product.images && product.images.length > 0) {
        product.images = product.images.map(img => 
          img.includes('technoline-api.loca.lt') ? img.replace('https://technoline-api.loca.lt', 'http://localhost:5002') : img
        );
        updated = true;
      }
      
      if (updated) {
        await product.save();
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã URL –¥–ª—è —Ç–æ–≤–∞—Ä–∞ "${product.name}" (–ª–æ–∫–∞–ª—å–Ω—ã–µ)`);
      }
    }
    
    console.log('üéâ –í—Å–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã!');
    console.log('üí° –î–ª—è localtunnel –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å frontend –¥–ª—è –∑–∞–º–µ–Ω—ã URL');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ URL:', error);
  } finally {
    mongoose.connection.close();
  }
}

fixImageUrlsForBoth(); 